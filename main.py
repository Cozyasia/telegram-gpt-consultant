import os
import logging
from typing import Iterable
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("cozyasia-bot")

TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]  # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
CHANNEL_ID = os.environ.get("CHANNEL_ID")  # '@–∏–º—è_–∫–∞–Ω–∞–ª–∞' –∏–ª–∏ '-100...'
# –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º: —Ç–æ–≥–¥–∞ /post –±—É–¥–µ—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω –≤—Å–µ–º
ADMIN_IDS = {
    int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x
}

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
def is_admin(user_id: int) -> bool:
    """–ï—Å–ª–∏ ADMIN_IDS –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º; –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º id."""
    return (not ADMIN_IDS) or (user_id in ADMIN_IDS)

def chunk_text(text: str, limit: int = 4096) -> Iterable[str]:
    """–†–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–¥ –ª–∏–º–∏—Ç Telegram."""
    for i in range(0, len(text), limit):
        yield text[i : i + limit]

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /post <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω CHANNEL_ID)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —É–ª–µ—Ç–∏—Ç –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ ‚Äî —è –ø–æ–≤—Ç–æ—Ä—é —Å–æ–æ–±—â–µ–Ω–∏–µ",
    )

async def post_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∏–∑ –ª–∏—á–∫–∏ –±–æ—Ç–∞."""
    if not update.effective_user:
        return
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not CHANNEL_ID:
        await update.message.reply_text("‚ùóÔ∏èCHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
        return

    # –¢–µ–∫—Å—Ç –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ /post –∏–ª–∏ –∏–∑ —Ä–µ–ø–ª–∞—è
    text = " ".join(context.args).strip()
    if not text and update.message and update.message.reply_to_message:
        rep = update.message.reply_to_message
        text = (rep.text or rep.caption or "").strip()

    if not text:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post <—Ç–µ–∫—Å—Ç> (–∏–ª–∏ –æ—Ç–≤–µ—Ç—å /post –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return

    sent = 0
    for chunk in chunk_text(text):
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=chunk,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False,
        )
        sent += 1

    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ({sent} —Å–æ–æ–±—â.).")

async def photo_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –∏–∑ –ª–∏—á–∫–∏ –≤ –∫–∞–Ω–∞–ª."""
    if not update.effective_user or not update.message:
        return
    if not is_admin(update.effective_user.id):
        return
    if not CHANNEL_ID:
        await update.message.reply_text("‚ùóÔ∏èCHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
        return

    try:
        if update.message.photo:
            file_id = update.message.photo[-1].file_id  # —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è
            caption = update.message.caption or ""
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        elif update.message.document and update.message.document.mime_type.startswith("image/"):
            # –ï—Å–ª–∏ –∫–∏–¥–∞—é—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            file_id = update.message.document.file_id
            caption = update.message.caption or ""
            await context.bot.send_document(
                chat_id=CHANNEL_ID,
                document=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
            await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª")
        await update.message.reply_text(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ–µ —ç—Ö–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞."""
    if update.message and update.message.text:
        await update.message.reply_text(update.message.text)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–∫–∏ –±–æ—Ç–∞
    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("post", post_to_channel, filters=filters.ChatType.PRIVATE))

    # –§–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ –ª–∏—á–∫–∏ ‚Äî –≤ –∫–∞–Ω–∞–ª
    app.add_handler(MessageHandler(filters.PHOTO & filters.ChatType.PRIVATE, photo_to_channel))
    app.add_handler(MessageHandler(filters.Document.IMAGE & filters.ChatType.PRIVATE, photo_to_channel))

    # –≠—Ö–æ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.add_error_handler(error_handler)

    logger.info("üöÄ Starting polling‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
