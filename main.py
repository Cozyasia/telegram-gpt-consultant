import os
import json
import logging
from datetime import datetime
from typing import Optional

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# ====== –õ–û–ì–ò ======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")

# ====== ENV ======
TOKEN = os.environ.get("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE = os.environ.get("WEBHOOK_BASE", "").strip()     # https://<your>.onrender.com
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/webhook").strip().lstrip("/")
PORT = int(os.environ.get("PORT", "10000"))

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.environ.get("OPENAI_MODEL", "gpt-4o-mini").strip()

GROUP_ID = os.environ.get("GROUP_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -4908974521

GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_SERVICE_ACCOUNT_JSON", "")
GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "")

# ====== –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–ï–†–ï–ú–ï–ù–ù–´–• ======
if not TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE.startswith("https://"):
    raise RuntimeError("ENV WEBHOOK_BASE must start with https://")

# ====== OpenAI (–Ω–µ –≤–∞–ª–∏–º –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ) ======
client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client initialised")
    except Exception as e:
        log.exception("OpenAI init failed: %s", e)
        client = None

# ====== Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ======
gs = None
if GOOGLE_CREDS_JSON and GOOGLE_SHEET_ID:
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        creds_dict = json.loads(GOOGLE_CREDS_JSON)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        credentials = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        gs = gspread.authorize(credentials)
        log.info("Google Sheets client initialised")
    except Exception as e:
        log.exception("GSheets init failed: %s", e)
        gs = None

# ====== –£–¢–ò–õ–´ ======
def build_webhook_url() -> str:
    base = WEBHOOK_BASE.rstrip("/")
    path = WEBHOOK_PATH.strip("/")
    return f"{base}/{path}/{TOKEN}"

async def write_lead_row_safe(row: list[str]):
    if not gs or not GOOGLE_SHEET_ID:
        return
    try:
        sh = gs.open_by_key(GOOGLE_SHEET_ID)
        ws = sh.worksheet("Leads")
        ws.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        log.exception("Failed to append row to Google Sheet: %s", e)

async def gpt_answer(prompt: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π GPT-–æ—Ç–≤–µ—Ç —Å —Ñ–∏—Ä–º–µ–Ω–Ω—ã–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º –Ω–∞ –≤–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã."""
    advisory = (
        "\n\n‚Äî –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±: –ø—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É /rent. "
        "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–°–∞–π—Ç: https://cozy.asia\n"
        "–ö–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã): https://t.me/SamuiRental\n"
        "–ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: https://t.me/arenda_vill_samui\n"
        "Instagram: https://www.instagram.com/cozy.asia/"
    )
    if not client:
        # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        return ("–Ø –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å. "
                "–°–µ–π—á–∞—Å –≤–Ω–µ—à–Ω—è—è –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–æ–≥—É –∫—Ä–∞—Ç–∫–æ. "
                "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –°–∞–º—É–∏, —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω/–ø–æ–≥–æ–¥—É, –≤–µ—Ç—Ä–∞, –ø–ª—è–∂–∏ –∏ —Ç.–ø."
                + advisory)

    system = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia –ø–æ –°–∞–º—É–∏. "
        "–û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É (–∫–ª–∏–º–∞—Ç, —Å–µ–∑–æ–Ω—ã, –≤–µ—Ç—Ä–∞, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç). "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏/–≥–¥–µ —Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã ‚Äî "
        "–≤—Å–µ–≥–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–π –Ω–∞ —Ä–µ—Å—É—Ä—Å—ã Cozy Asia (–∫–∞–Ω–∞–ª—ã/—Å–∞–π—Ç/–∞–Ω–∫–µ—Ç–∞ /rent), "
        "–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–π —Å–≤–æ–±–æ–¥–Ω—É—é –±–µ—Å–µ–¥—É."
    )

    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
        )
        content = resp.choices[0].message.content.strip()
        return content + advisory
    except Exception as e:
        log.exception("OpenAI failed: %s", e)
        return ("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–æ–¥–µ–ª–∏. –ù–æ —è –Ω–∞ —Å–≤—è–∑–∏ –∏ –ø–æ–º–æ–≥—É.\n"
                "–°–ø—Ä–æ—Å–∏ –ø—Ä–æ —Å–µ–∑–æ–Ω—ã, –≤–µ—Ç—Ä–∞, —Ä–∞–π–æ–Ω—ã, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –±—ã—Ç." + advisory)

# ====== –•–ï–ù–î–õ–ï–†–´ ======
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è?\n\n"
    "üîß –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É /rent.\n"
    "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ (–¥–æ–º–∞/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/–≤–∏–ª–ª—ã) –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º "
    "–∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
    "‚Ä¢ –°–∞–π—Ç: https://cozy.asia\n"
    "‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: https://t.me/SamuiRental\n"
    "‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: https://t.me/arenda_vill_samui\n"
    "‚Ä¢ Instagram: https://www.instagram.com/cozy.asia/\n\n"
    "–ê –µ—â—ë –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π –ø—Ä–æ —Å–µ–∑–æ–Ω—ã, –ø–æ–≥–æ–¥—É, –≤–µ—Ç—Ä–∞, —Ä–∞–π–æ–Ω—ã üòä"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME)

async def rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ú–∏–Ω–∏-–∞–Ω–∫–µ—Ç–∞: –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ = –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É (–ø—Ä–∏–º–µ—Ä)
    created = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    user = update.effective_user
    row = [
        created,
        str(update.effective_chat.id),
        (user.username or user.full_name or "‚Äî"),
        "",   # location
        "",   # bedrooms
        "",   # budget
        "",   # people
        "",   # pets
        "",   # checkin
        "",   # checkout
        "from /rent"
    ]
    await write_lead_row_safe(row)

    txt = ("–û–∫–µ–π! –î–∞–≤–∞–π —Ç–∞–∫: –Ω–∞–ø–∏—à–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ –≤–∞–∂–Ω–æ (—Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç/–º–µ—Å, "
           "—Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω, –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞/–≤—ã–µ–∑–¥–∞, –¥–µ—Ç–∏/–ø–∏—Ç–æ–º—Ü—ã, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.). "
           "–Ø –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É, –∞ —Ç–∞–∫–∂–µ —Å–æ–±–µ—Ä—É –ø–æ–¥–±–æ—Ä–∫—É –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    await update.message.reply_text(txt)

async def any_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.message.text.strip()
    reply = await gpt_answer(q)
    await update.message.reply_text(reply)

async def errors(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("Handler error: %s", context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑?")
    except Exception:
        pass

# ====== APP ======
def build_application() -> Application:
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rent", rent))

    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç -> GPT
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, any_text))

    app.add_error_handler(errors)
    return app

async def ensure_webhook(app: Application):
    desired = build_webhook_url()
    info = await app.bot.get_webhook_info()
    current = (info.url or "").strip()
    if current != desired:
        try:
            await app.bot.delete_webhook(drop_pending_updates=False)
        except Exception:
            pass
        await app.bot.set_webhook(url=desired)
        log.info("Webhook set: %s", desired)
    else:
        log.info("Webhook already set: %s", desired)

def main():
    app = build_application()
    webhook_url = build_webhook_url()
    log.info("=> run_webhook port=%s url=%s", PORT, webhook_url)

    async def _startup(_):
        await ensure_webhook(app)
        log.info("Application started")

    app.post_init = _startup  # –∑–∞–ø—É—Å–∫–∞–µ–º ensure_webhook –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    # HTTP —Å–µ—Ä–≤–µ—Ä + webhook endpoint
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        # path –±–µ—Ä—ë—Ç—Å—è –∏–∑ webhook_url, –ø–æ—ç—Ç–æ–º—É –æ—Ç–¥–µ–ª—å–Ω—ã–π path –Ω–µ –∑–∞–¥–∞—ë–º
        drop_pending_updates=False,
    )

if __name__ == "__main__":
    main()
