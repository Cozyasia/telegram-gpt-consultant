import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from telegram import (Update, InlineKeyboardMarkup, InlineKeyboardButton)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")

# === –ö–û–ù–§–ò–ì / ENV ===
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
PORT = int(os.getenv("PORT", "10000"))

MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "5978240436"))  # Cozy Asia manager
GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID", "0"))  # <- —Å—é–¥–∞ –ø–æ—Å—Ç–∞–≤—å—Ç–µ ID —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã

GOOGLE_SHEETS_DB_ID = os.getenv("GOOGLE_SHEETS_DB_ID", "").strip()
GOOGLE_SERVICE_ACCOUNT_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON", "").strip()

# –í–∞—à–∏ —Å—Å—ã–ª–∫–∏ (–∂—ë—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ ¬´—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–ª¬ª —á—É–∂–∏—Ö)
LINK_SITE = "https://cozy.asia"
LINK_CHANNEL_ALL = "https://t.me/SamuiRental"
LINK_CHANNEL_VILLAS = "https://t.me/arenda_vill_samui"
LINK_INSTAGRAM = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"

# === –ü–†–û–ú–û –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
PROMO_KB = InlineKeyboardMarkup([
    [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=LINK_SITE)],
    [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=LINK_CHANNEL_ALL)],
    [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=LINK_CHANNEL_VILLAS)],
    [InlineKeyboardButton("üì∑ Instagram", url=LINK_INSTAGRAM)],
])

# === –°–û–°–¢–û–Ø–ù–ò–Ø –ê–ù–ö–ï–¢–´ ===
(
    Q_TYPE,      # 1/7 —Ç–∏–ø –∂–∏–ª—å—è
    Q_BUDGET,    # 2/7 –±—é–¥–∂–µ—Ç
    Q_AREA,      # 3/7 —Ä–∞–π–æ–Ω
    Q_BEDR,      # 4/7 —Å–ø–∞–ª—å–Ω–∏
    Q_CHECKIN,   # 5/7 –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
    Q_CHECKOUT,  # 6/7 –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
    Q_NOTES      # 7/7 —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è
) = range(7)

# –ü–∞–º—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state: Dict[int, Dict[str, Any]] = {}
cta_cache: Dict[int, datetime] = {}  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–æ–º–æ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ

# === GOOGLE SHEETS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ===
_gs_client = None
_gs_sheet = None

def init_gs():
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã ENV)."""
    global _gs_client, _gs_sheet
    if not GOOGLE_SHEETS_DB_ID or not GOOGLE_SERVICE_ACCOUNT_JSON:
        return
    if _gs_client and _gs_sheet:
        return
    import gspread
    from google.oauth2.service_account import Credentials

    try:
        # JSON –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ ¬´—Å—ã—Ä–æ–π¬ª, —Ç–∞–∫ –∏ base64
        raw = GOOGLE_SERVICE_ACCOUNT_JSON
        try:
            raw = json.loads(raw)
        except Exception:
            raw = json.loads(os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON_JSON", "{}"))  # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        creds = Credentials.from_service_account_info(
            raw,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        _gs_client = gspread.authorize(creds)
        _gs_sheet = _gs_client.open_by_key(GOOGLE_SHEETS_DB_ID).sheet1
        log.info("Google Sheets connected.")
    except Exception as e:
        log.warning(f"Google Sheets init failed: {e}")

def gs_append_row(row: list):
    try:
        init_gs()
        if _gs_sheet:
            _gs_sheet.append_row(row, value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning(f"Google Sheets append failed: {e}")

# === –î–ê–¢–´ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç) ===
def parse_any_date(s: str) -> Optional[str]:
    """–í–µ—Ä–Ω—ë—Ç ISO yyyy-mm-dd –∏–∑ –ø–æ—á—Ç–∏ –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ RU/EN, –∏–Ω–∞—á–µ None."""
    if not s:
        return None
    from dateutil import parser
    try:
        dt = parser.parse(s, dayfirst=True, fuzzy=True, default=datetime.utcnow())
        return dt.strftime("%Y-%m-%d")
    except Exception:
        return None

# === –§–õ–ê–ì –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç!) ===
RE_INTENT_KEYS = (
    "–Ω–µ–¥–≤–∏–∂–∏–º", "–∞—Ä–µ–Ω–¥", "—Å–Ω—è—Ç—å", "—Å—ä—ë–º", "–¥–æ–º", "–≤–∏–ª–ª", "–∞–ø–∞—Ä—Ç", "–∫–≤–∞—Ä—Ç–∏—Ä",
    "–ø–µ—Ä–µ—Å–µ–ª", "–∑–∞—Å–µ–ª", "–¥–æ–≥–æ–≤–æ—Ä", "–ø—Ä–æ–¥–∞–∂", "–∫—É–ø–∏—Ç—å", "–ª–æ—Ç", "–∂–∏–ª—å—ë",
    "house", "villa", "apartment", "rent", "lease", "real estate"
)

def is_real_estate_intent(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in RE_INTENT_KEYS)

# === PROMO CTA (–Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ 3 —á–∞—Å–∞) ===
def should_show_cta(user_id: int) -> bool:
    now = datetime.utcnow()
    last = cta_cache.get(user_id)
    if not last or (now - last) > timedelta(hours=3):
        cta_cache[user_id] = now
        return True
    return False

# === OPENAI ===
_openai_client = None
def oai():
    global _openai_client
    if _openai_client is None:
        from openai import OpenAI
        _openai_client = OpenAI(api_key=OPENAI_API_KEY)
    return _openai_client

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
    "–ú–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ –±–µ—Å–µ–¥–æ–≤–∞—Ç—å –æ –°–∞–º—É–∏: –∫–ª–∏–º–∞—Ç, —Å–µ–∑–æ–Ω—ã, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å, "
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞, –≤–∏–∑—ã, —Å–≤—è–∑—å, –ø–∏—Ç–æ–º—Ü—ã –∏ —Ç.–ø. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, "
    "–º–æ–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∫—Ä–æ–º–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Cozy Asia –Ω–µ –¥–∞–≤–∞–π."
)

async def gpt_reply(text: str, user_id: int, username: str) -> Optional[str]:
    if not OPENAI_API_KEY:
        return None
    try:
        client = oai()
        resp = client.chat.completions.create(
            model="gpt-4o-mini",  # –ª—ë–≥–∫–∏–π –∏ –±—ã—Å—Ç—Ä—ã–π, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ GPT-5 Thinking, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∫–ª—é—á—É
            temperature=0.6,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text}
            ]
        )
        return (resp.choices[0].message.content or "").strip()
    except Exception as e:
        log.warning(f"OpenAI error: {e}")
        return None

# === –°–õ–£–ñ–ï–ë–ù–´–ï ===
def lead_link_to_sheet() -> str:
    if not GOOGLE_SHEETS_DB_ID:
        return ""
    return f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEETS_DB_ID}"

def fmt_user(u) -> str:
    uname = f"@{u.username}" if getattr(u, "username", None) else (u.full_name or str(u.id))
    return f"{uname} (ID: {u.id})"

def promo_text() -> str:
    return (
        "üõ†Ô∏è –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
        "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ (–¥–æ–º–∞/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/–≤–∏–ª–ª—ã) –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º, "
        "–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.\n\n"
        f"‚Ä¢ –°–∞–π—Ç: {LINK_SITE}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {LINK_CHANNEL_ALL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {LINK_CHANNEL_VILLAS}\n"
        f"‚Ä¢ Instagram: {LINK_INSTAGRAM}"
    )

# === /start ===
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
        "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
        "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
        "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.",
        reply_markup=PROMO_KB
    )
    # –°–±—Ä–æ—Å–∏–º –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
    user_state.pop(update.effective_user.id, None)

# === /cancel ===
async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.pop(update.effective_user.id, None)
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")

# === /diag ===
async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = [
        f"WEBHOOK_BASE: {WEBHOOK_BASE}",
        f"PORT: {PORT}",
        f"OPENAI: {'ON' if OPENAI_API_KEY else 'OFF'}",
        f"GROUP_CHAT_ID: {GROUP_CHAT_ID}",
        f"SHEETS: {'ON' if GOOGLE_SHEETS_DB_ID else 'OFF'}",
    ]
    await update.message.reply_text("\n".join(txt))

# === –ê–ù–ö–ï–¢–ê ===
async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid] = {"stage": Q_TYPE, "lead_sent": False, "data": {}}
    await update.message.reply_text("–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return Q_TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid]["data"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return Q_BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid]["data"]["budget"] = update.message.text.strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return Q_AREA

async def q_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid]["data"]["area"] = update.message.text.strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return Q_BEDR

async def q_bedr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    user_state[uid]["data"]["bedrooms"] = update.message.text.strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ **–∑–∞–µ–∑–¥–∞**? –ú–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–º –ø–æ–Ω—è—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.12.2025 –∏–ª–∏ 1 –¥–µ–∫ 25).")
    return Q_CHECKIN

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    date_str = parse_any_date(update.message.text)
    if not date_str:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä. 2025-12-01).")
        return Q_CHECKIN
    user_state[uid]["data"]["checkin"] = date_str
    await update.message.reply_text("6/7. –î–∞—Ç–∞ **–≤—ã–µ–∑–¥–∞**? (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    date_str = parse_any_date(update.message.text)
    if not date_str:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä. 2026-01-01).")
        return Q_CHECKOUT
    user_state[uid]["data"]["checkout"] = date_str
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    st = user_state.get(uid, {})
    st["data"]["notes"] = update.message.text.strip()
    st["stage"] = None
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –æ–¥–∏–Ω —Ä–∞–∑
    if not st.get("lead_sent"):
        st["lead_sent"] = True
        await finalize_lead(update, context, st["data"])
    else:
        log.info("Lead already sent; skipping duplicate.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é
    user_state[uid] = {"stage": None, "lead_sent": True, "data": st["data"]}
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã üôÇ",
        reply_markup=PROMO_KB
    )
    return ConversationHandler.END

async def finalize_lead(update: Update, context: ContextTypes.DEFAULT_TYPE, data: Dict[str, str]):
    u = update.effective_user
    created = datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
    lead_text = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {fmt_user(u)}\n"
        f"–¢–∏–ø: {data.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {data.get('area','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms','')}\n"
        f"–ó–∞–µ–∑–¥: {data.get('checkin','')}\n"
        f"–í—ã–µ–∑–¥: {data.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {data.get('notes','')}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {created}\n"
    )
    # –í —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É –∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    try:
        if GROUP_CHAT_ID:
            await context.bot.send_message(GROUP_CHAT_ID, lead_text)
    except Exception as e:
        log.warning(f"Send to group failed: {e}")
    try:
        if MANAGER_CHAT_ID:
            await context.bot.send_message(MANAGER_CHAT_ID, lead_text)
    except Exception as e:
        log.warning(f"Send to manager failed: {e}")

    # –í —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
    if GOOGLE_SHEETS_DB_ID:
        row = [
            datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            str(u.id), getattr(u, "username", ""), getattr(u, "full_name", ""),
            data.get("type",""), data.get("budget",""), data.get("area",""),
            data.get("bedrooms",""), data.get("checkin",""), data.get("checkout",""),
            data.get("notes","")
        ]
        gs_append_row(row)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    sheet_url = lead_link_to_sheet()
    if sheet_url:
        await update.message.reply_text(f"üîó –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ CRM: {sheet_url}")

# === –°–í–û–ë–û–î–ù–û–ï –û–ë–©–ï–ù–ò–ï (–¥–µ—Ñ–æ–ª—Ç) ===
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = update.message.text or ""

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –≤ ConversationHandler
    st = user_state.get(uid)
    if st and st.get("stage") is not None:
        await update.message.reply_text("–ú—ã —Å–µ–π—á–∞—Å –∑–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ /cancel —á—Ç–æ–±—ã –≤—ã–π—Ç–∏, –∏–ª–∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å üôÇ")
        return

    # GPT –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
    reply = await gpt_reply(text, uid, getattr(update.effective_user, "username", ""))

    # –ú—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ OpenAI –æ—Ç–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è
    if not reply:
        reply = (
            "–°–∞–º—É–∏: —Ç—Ä–æ–ø–∏–∫–∏; —è–Ω–≤‚Äì–º–∞—Ä—Ç –æ–±—ã—á–Ω–æ —Å—É—à–µ –∏ —Å–ø–æ–∫–æ–π–Ω–µ–µ, –∞–ø—Ä–µ–ª—å ‚Äî –∂–∞—Ä–∫–∏–π —à—Ç–∏–ª—å, "
            "–æ–∫—Ç‚Äì–¥–µ–∫ –±–æ–ª—å—à–µ –¥–æ–∂–¥–µ–π –∏ –≤–æ–ª–Ω–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ. –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, –ø–æ–≥–æ–¥—É –∏ –±—ã—Ç.\n"
        )

    # –î–æ–±–∞–≤–∏–º CTA, –µ—Å–ª–∏ —Ä–µ—á—å –ø—Ä–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∏ –Ω–µ —Å–ø–∞–º–∏–º —á–∞—â–µ 1/3—á)
    if is_real_estate_intent(text) and should_show_cta(uid):
        reply += "\n\n" + promo_text()

        await update.message.reply_text(reply, reply_markup=PROMO_KB)
    else:
        await update.message.reply_text(reply)

# === –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===
def build_application() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("ENV TELEGRAM_BOT_TOKEN is required")

    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))
    app.add_handler(CommandHandler("diag", cmd_diag))

    # –ê–Ω–∫–µ—Ç–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", cmd_rent)],
        states={
            Q_TYPE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_BUDGET:  [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_AREA:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_area)],
            Q_BEDR:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedr)],
            Q_CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT:[MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES:   [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))

    return app

# === MAIN (WEBHOOK –¥–ª—è Render) ===
def main():
    app = build_application()

    # –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫, —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    async def runner():
        await app.bot.delete_webhook(drop_pending_updates=False)
        url = f"{WEBHOOK_BASE}/webhook/{BOT_TOKEN}"
        log.info(f"Starting webhook on 0.0.0.0:{PORT} | url={url}")
        await app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=f"webhook/{BOT_TOKEN}",
            webhook_url=url,
        )

    asyncio.run(runner())

if __name__ == "__main__":
    main()
