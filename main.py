import os, json, logging, datetime as dt
from typing import Dict, Any, Optional

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

import gspread
from dateutil import parser as dateparser
from openai import OpenAI

# ---------- –õ–û–ì–ì–ï–† ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
WEBHOOK_BASE  = os.environ.get("WEBHOOK_BASE")            # https://<render>.onrender.com
PORT          = int(os.environ.get("PORT", "10000"))

OPENAI_API_KEY   = os.environ.get("OPENAI_API_KEY", "")
OPENAI_MODEL     = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")

GOOGLE_CREDS_JSON= os.environ["GOOGLE_CREDS_JSON"]        # –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π JSON (–∫–∞–∫ —É —Ç–µ–±—è —Å–µ–π—á–∞—Å)
GOOGLE_SHEET_ID  = os.environ["GOOGLE_SHEET_ID"]          # ID —Ç–∞–±–ª–∏—Ü—ã (–∏–∑ URL)
SHEET_LEADS_NAME = os.environ.get("SHEET_LEADS_NAME", "Leads")

GROUP_CHAT_ID    = os.environ.get("GROUP_CHAT_ID")        # –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
BRAND_SITE       = os.environ.get("BRAND_SITE", "https://cozy.asia")
BRAND_CHAN_MAIN  = os.environ.get("BRAND_CHAN_MAIN", "https://t.me/cozy_asia")
BRAND_CHAN_RULES = os.environ.get("BRAND_CHAN_RULES", "https://t.me/cozy_asia_rules")

# ---------- CONSTANTS ----------
FREE_CHAT_PROMPT = f"""–¢—ã ‚Äî –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia Real Estate (–°–∞–º—É–∏).
–í—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏. –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∫–∞—Å–∞–µ—Ç—Å—è –∂–∏–ª—å—è/—Ä–∞–π–æ–Ω–æ–≤/–ø–æ–≥–æ–¥—ã,
–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:
‚Ä¢ –°–∞–π—Ç: {BRAND_SITE}
‚Ä¢ Telegram: {BRAND_CHAN_MAIN}
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞/–≥–∞–π–¥: {BRAND_CHAN_RULES}
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–±–æ—Ä—É ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.
–ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π, –Ω–æ –º—è–≥–∫–æ –ø–æ–¥–≤–æ–¥–∏.
–ö–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

RENT_Q = [
    "1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)",
    "2/7: —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?",
    "3/7: –±—é–¥–∂–µ—Ç –∑–∞ –º–µ—Å—è—Ü –∏–ª–∏ –∑–∞ –Ω–æ—á—å? (—Ü–∏—Ñ—Ä–∞ –∏ –≤–∞–ª—é—Ç–∞/–º–µ—Å/–Ω–æ—á—å)",
    "4/7: —Ä–∞–π–æ–Ω –Ω–∞ –°–∞–º—É–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ–≤–∞–∂–Ω–æ¬ª)",
    "5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)",
    "6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)",
    "7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)",
]

RENT_FIELDS = ["type", "people", "budget", "location", "checkin", "checkout", "notes"]

# ---------- OPENAI ----------
oa_client = OpenAI(api_key=OPENAI_API_KEY)

def ai_answer(text: str) -> str:
    if not OPENAI_API_KEY:
        # –§–æ–ª–ª–±–µ–∫ –±–µ–∑ OpenAI
        return ("–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –∏ –±–µ–∑ –ò–ò üòä\n"
                f"–ù–∞—à —Å–∞–π—Ç: {BRAND_SITE}\n–ö–∞–Ω–∞–ª: {BRAND_CHAN_MAIN}\n"
                "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å—ë ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /rent.")
    try:
        resp = oa_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": FREE_CHAT_PROMPT},
                {"role": "user", "content": text}
            ],
            temperature=0.4,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.exception("OpenAI error")
        return ("–ü–æ–∫–∞ –æ—Ç–≤–µ—á—É –∫–æ—Ä–æ—Ç–∫–æ, —É –º–µ–Ω—è –∑–∞–º–∏–Ω–∫–∞ —Å –ò–ò. "
                f"–ù–∞—à —Å–∞–π—Ç: {BRAND_SITE}. –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –∂–∏–ª—å—è ‚Äî /rent.")

# ---------- SHEET ----------
def _gs_client():
    creds_dict = json.loads(GOOGLE_CREDS_JSON)
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    gc = gspread.service_account_from_dict(creds_dict, scopes=scopes)
    return gc

def append_lead(row: Dict[str, Any]) -> Optional[str]:
    """–ü–∏—à–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ª–∏—Å—Ç Leads. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ None."""
    try:
        gc = _gs_client()
        sh = gc.open_by_key(GOOGLE_SHEET_ID)
        ws = sh.worksheet(SHEET_LEADS_NAME)

        # –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫: created_at, chat_id, username, location, bedrooms, budget, people, pets, checkin, checkout, notes
        ws.append_row([
            dt.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            str(row.get("chat_id","")),
            row.get("username","") or "",
            row.get("location","") or "",
            row.get("bedrooms","") or "",
            row.get("budget","") or "",
            row.get("people","") or "",
            row.get("pets","") or "",
            row.get("checkin","") or "",
            row.get("checkout","") or "",
            row.get("notes","") or ""
        ], value_input_option="USER_ENTERED")
        return None
    except Exception as e:
        log.exception("append_lead error")
        return str(e)

# ---------- HELPERS ----------
def parse_date(s: str) -> str:
    try:
        return dateparser.parse(s, dayfirst=True).date().isoformat()
    except Exception:
        return s.strip()

def notify_group(context: ContextTypes.DEFAULT_TYPE, lead: Dict[str, Any]) -> None:
    if not GROUP_CHAT_ID:
        return
    txt = (
        "üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia**\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{lead.get('username') or '‚Äî'} (ID: {lead.get('chat_id')})\n"
        f"–¢–∏–ø: {lead.get('type')}\n"
        f"–†–∞–π–æ–Ω: {lead.get('location')}\n"
        f"–ë—é–¥–∂–µ—Ç: {lead.get('budget')}\n"
        f"–°–ø–∞–ª–µ–Ω: {lead.get('bedrooms') or ''}\n"
        f"Check-in: {lead.get('checkin')}\n"
        f"Check-out: {lead.get('checkout')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {lead.get('notes') or ''}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {dt.datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
    )
    try:
        context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=txt, parse_mode="Markdown")
    except Exception:
        log.exception("notify_group error")

def reset_form(user_data: Dict[str, Any]):
    user_data["mode"] = "free"
    user_data["step"] = 0
    user_data["lead"] = {}

# ---------- HANDLERS ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_form(context.user_data)
    hello = (
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cozy Asia Real Estate Bot¬ª\n\n"
        "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n"
        "üó£ –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
        "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
        "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
        "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
        f"–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è ‚Äî –Ω–∞–ø–∏—à–∏ /rent\n"
        f"–ù–∞—à —Å–∞–π—Ç: {BRAND_SITE}\n–ö–∞–Ω–∞–ª: {BRAND_CHAN_MAIN}"
    )
    await update.message.reply_text(hello)

async def rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mode"] = "rent"
    context.user_data["step"] = 0
    context.user_data["lead"] = {
        "chat_id": update.effective_user.id,
        "username": update.effective_user.username or ""
    }
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. " + RENT_Q[0])

async def free_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∫–µ—Ç—ã
    if context.user_data.get("mode") == "rent":
        idx = context.user_data.get("step", 0)

        # –º–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤
        key = RENT_FIELDS[idx]
        val = text

        if key in ("checkin", "checkout"):
            val = parse_date(text)

        context.user_data["lead"][key] = val

        idx += 1
        context.user_data["step"] = idx

        if idx < len(RENT_Q):
            await update.message.reply_text(RENT_Q[idx])
            return

        # –∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ => —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        lead = context.user_data["lead"]
        # derive few fields for sheet
        lead["location"] = lead.get("location","")
        # bedrooms –ø–æ–ø—ã—Ç–∞–π—Å—è –≤—ã—Ç—è–Ω—É—Ç—å –∏–∑ —Ç–∏–ø–∞, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º ‚Äî –≤—Ä—É—á–Ω—É—é
        lead["bedrooms"] = ""
        # pets –≤—ã—Ç–∞—â–∏–º –∏–∑ notes –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî —Å–µ–π—á–∞—Å –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        lead["pets"] = ""

        err = append_lead(lead)
        if err:
            log.error("Sheet append failed: %s", err)

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        notify_group(context, lead)

        # –∫–ª–∏–µ–Ω—Ç—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        summary = (
            "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
            f"–¢–∏–ø: {lead.get('type')}\n"
            f"–†–∞–π–æ–Ω: {lead.get('location')}\n"
            f"–°–ø–∞–ª–µ–Ω: {lead.get('bedrooms') or ''}\n"
            f"–ë—é–¥–∂–µ—Ç: {lead.get('budget')}\n"
            f"Check-in: {lead.get('checkin')}\n"
            f"Check-out: {lead.get('checkout')}\n"
            f"–£—Å–ª–æ–≤–∏—è: {lead.get('notes') or ''}\n\n"
            "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
            "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
        )
        await update.message.reply_text(summary)
        reset_form(context.user_data)
        return

    # —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ (–ò–ò)
    reply = ai_answer(text)
    await update.message.reply_text(reply)

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –∂–∏–ª—å—è ‚Äî /rent.")

# ---------- APP ----------
def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rent", rent))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_message))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))

    return app

def run_webhook(app: Application):
    # set webhook
    url = f"{WEBHOOK_BASE.rstrip('/')}/webhook/{TELEGRAM_TOKEN}"
    log.info("==> start webhook: %s", url)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=url,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    application = build_app()
    if WEBHOOK_BASE:
        run_webhook(application)
    else:
        log.info("==> start polling (WEBHOOK_BASE not set)")
        application.run_polling(drop_pending_updates=True)
