# -*- coding: utf-8 -*-
"""
Cozy Asia Bot ‚Äî –µ–¥–∏–Ω—ã–π main.py
- –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render (webhook) –∏ –ª–æ–∫–∞–ª—å–Ω–æ (polling).
- –°–Ω–∏–º–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ —Å drop_pending_updates=True (–Ω–µ—Ç 409).
- –ü–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ –∏ –ø–∏—à–µ—Ç –ª–æ—Ç—ã –≤ Google Sheets (–ª–∏—Å—Ç "Listings").
- –í–µ–¥—ë—Ç –∞–Ω–∫–µ—Ç—É /rent: —Ä–∞–π–æ–Ω ‚Üí —Å–ø–∞–ª—å–Ω–∏ ‚Üí –±—é–¥–∂–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ª–æ—Ç—ã.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞):
  TELEGRAM_BOT_TOKEN   (–æ–±—è–∑.)
  BASE_URL             (–¥–ª—è Render, –Ω–∞–ø—Ä–∏–º–µ—Ä https://telegram-gpt-consultant-xxxx.onrender.com)
  WEBHOOK_PATH         (/webhook ‚Äî –æ—Å—Ç–∞–≤—å —Ç–∞–∫)
  PUBLIC_CHANNEL       (—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä samuirental)
  GREETING_MESSAGE     (–Ω–µ–æ–±—è–∑. —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è)
  MANAGER_CHAT_ID      (–Ω–µ–æ–±—è–∑. —á–∞—Ç ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —á–∏—Å–ª–æ)
  GOOGLE_SHEET_ID      (–µ—Å–ª–∏ –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É)
  GOOGLE_CREDS_JSON    (–≤–µ—Å—å JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞)
  LOG_LEVEL            (INFO/DEBUG –∏ —Ç.–ø.)
"""

import os
import re
import json
import asyncio
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
)
log = logging.getLogger("cozy_bot")

# ---------- ENV ----------
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
BASE_URL = os.environ.get("BASE_URL", "").rstrip("/")  # –ø—É—Å—Ç–æ = –ª–æ–∫–∞–ª—å–Ω—ã–π polling
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/webhook")
PUBLIC_CHANNEL = os.environ.get("PUBLIC_CHANNEL", "").lstrip("@").strip()
GREETING_MESSAGE = os.environ.get(
    "GREETING_MESSAGE",
    "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia üå¥\n–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—â–µ—à—å (—Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç, —Å–ø–∞–ª—å–Ω–∏, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏ –∏ —Ç.–¥.) "
    "–∏–ª–∏ –Ω–∞–∂–º–∏ /rent ‚Äî –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –±–∞–∑—ã.",
)
MANAGER_CHAT_ID = os.environ.get("MANAGER_CHAT_ID", "").strip() or None

GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON", "").strip()

# ---------- Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
gspread = None
sheet_works = False
worksheet = None
LISTINGS_SHEET_NAME = "Listings"
LISTING_COLUMNS = [
    "listing_id", "created_at", "title", "description", "location", "bedrooms",
    "bathrooms", "price_month", "pets_allowed", "utilities", "electricity_rate",
    "water_rate", "area_m2", "pool", "furnished", "link", "images", "tags", "raw_text"
]

def setup_gsheets_if_possible() -> None:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ."""
    global gspread, sheet_works, worksheet
    if not GOOGLE_SHEET_ID or not GOOGLE_CREDS_JSON:
        log.info("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    try:
        import gspread  # type: ignore
        from google.oauth2.service_account import Credentials  # type: ignore

        creds_dict = json.loads(GOOGLE_CREDS_JSON)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = gspread.authorize(creds)
        sh = client.open_by_key(GOOGLE_SHEET_ID)
        if LISTINGS_SHEET_NAME in [w.title for w in sh.worksheets()]:
            worksheet = sh.worksheet(LISTINGS_SHEET_NAME)
        else:
            worksheet = sh.add_worksheet(title=LISTINGS_SHEET_NAME, rows="1000", cols=str(len(LISTING_COLUMNS)))
            worksheet.append_row(LISTING_COLUMNS)
        sheet_works = True
        log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω, –ª–∏—Å—Ç: %s", LISTINGS_SHEET_NAME)
    except Exception as e:
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: %s", e)
        sheet_works = False

# –í –ø–∞–º—è—Ç–∏ –¥–µ—Ä–∂–∏–º –ª–æ—Ç—ã (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π)
IN_MEMORY_LISTINGS: List[Dict[str, Any]] = []

def append_listing_row(row: Dict[str, Any]) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –ø–∞–º—è—Ç—å."""
    global worksheet, sheet_works
    IN_MEMORY_LISTINGS.append(row)
    if not sheet_works or worksheet is None:
        return
    try:
        values = [row.get(col, "") for col in LISTING_COLUMNS]
        worksheet.append_row(values, value_input_option="USER_ENTERED")
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)

# ---------- –ü–∞—Ä—Å–µ—Ä –ø–æ—Å—Ç–æ–≤ ----------
REGION_WORDS = [
    "lamai", "lama√Ø", "lamay", "–ª–∞–º–∞–π",
    "bophut", "bo phut", "–±–æ–ø—Ö—É—Ç",
    "chaweng", "—á–∞–≤–µ–Ω–≥",
    "maenam", "–º–∞–µ–Ω–∞–º",
    "ban rak", "bangrak", "bang rak", "–±–∞–Ω—Ä–∞–∫", "–±–∞–Ω–≥—Ä–∞–∫",
    "choeng mon", "—á–æ–µ–Ω–≥ –º–æ–Ω", "—á–æ—ç–Ω–≥ –º–æ–Ω",
    "lipanoi", "lipa noi", "–ª–∏–ø–∞ –Ω–æ–π",
    "taling ngam", "—Ç–∞–ª–∏–Ω–≥ –Ω—å–≥–∞–º", "—Ç–∞–ª–∏–Ω–Ω–≥–∞–º"
]

def parse_listing_from_text(text: str, msg_link: str, listing_id: str) -> Dict[str, Any]:
    t = text.lower()

    # location
    location = ""
    for w in REGION_WORDS:
        if w in t:
            location = w
            break
    # bedrooms
    bedrooms = ""
    m = re.search(r"(\d+)\s*(—Å–ø–∞–ª—å–Ω|bed(room)?s?)", t)
    if m:
        bedrooms = m.group(1)

    # bathrooms
    bathrooms = ""
    mb = re.search(r"(\d+)\s*(–≤–∞–Ω–Ω|bath(room)?s?)", t)
    if mb:
        bathrooms = mb.group(1)

    # price per month
    price = ""
    mp = re.search(r"(\d[\d\s]{3,})(?:\s*baht|\s*–±–∞—Ç|\s*‡∏ø|b|thb)?", t)
    if mp:
        raw = mp.group(1)
        price = re.sub(r"\s", "", raw)

    # pets
    pets_allowed = "unknown"
    if "–±–µ–∑ –ø–∏—Ç–æ–º—Ü" in t or "no pets" in t:
        pets_allowed = "no"
    elif "—Å –ø–∏—Ç–æ–º—Ü" in t or "pets ok" in t or "pet friendly" in t:
        pets_allowed = "yes"

    # utilities
    utilities = "unknown"

    # pool/furnished
    pool = "yes" if ("pool" in t or "–±–∞—Å—Å–µ–π–Ω" in t) else "no"
    furnished = "yes" if ("furnished" in t or "–º–µ–±–µ–ª" in t) else "unknown"

    title = ""
    mt = re.search(r"^([^\n]{10,80})", text.strip())
    if mt:
        title = mt.group(1)

    row = {
        "listing_id": listing_id,
        "created_at": datetime.utcnow().isoformat(timespec="seconds"),
        "title": title,
        "description": text[:2000],
        "location": location,
        "bedrooms": bedrooms,
        "bathrooms": bathrooms,
        "price_month": price,
        "pets_allowed": pets_allowed,
        "utilities": utilities,
        "electricity_rate": "",
        "water_rate": "",
        "area_m2": "",
        "pool": pool,
        "furnished": furnished,
        "link": msg_link,
        "images": "",
        "tags": "",
        "raw_text": text,
    }
    return row

# ---------- –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤ ----------
def suggest_listings(area: str, bedrooms: int, budget: int) -> List[Dict[str, Any]]:
    area_l = area.lower()
    res = []
    for item in IN_MEMORY_LISTINGS:
        ok_area = (area_l in (item.get("location") or "").lower()) if area_l else True
        try:
            bd = int(item.get("bedrooms") or 0)
        except Exception:
            bd = 0
        try:
            pr = int(item.get("price_month") or 0)
        except Exception:
            pr = 0
        if ok_area and (bd >= bedrooms or bd == 0) and (pr <= budget or pr == 0):
            res.append(item)
    # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ/—Å–æ–≤—Å–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã –≤ –∫–æ–Ω–µ—Ü
    res.sort(key=lambda x: int(x.get("price_month") or "99999999"))
    return res[:5]

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ----------
AREA, BEDROOMS, BUDGET = range(3)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(GREETING_MESSAGE)

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ù–∞—á–Ω—ë–º. –ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–µ–Ω–∞–º, –ë–æ–ø—Ö—É—Ç, –ß–∞–≤–µ–Ω–≥, –õ–∞–º–∞–π)")
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["area"] = update.message.text.strip()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ?")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip()
    m = re.search(r"\d+", txt)
    bedrooms = int(m.group(0)) if m else 1
    context.user_data["bedrooms"] = bedrooms
    await update.message.reply_text("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –º–µ—Å—è—Ü (–±–∞—Ç)?")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = update.message.text.strip().replace(" ", "")
    m = re.search(r"\d+", txt)
    budget = int(m.group(0)) if m else 0
    context.user_data["budget"] = budget

    area = context.user_data.get("area", "")
    bedrooms = int(context.user_data.get("bedrooms", 1))
    budget = int(context.user_data.get("budget", 0))

    # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    offers = suggest_listings(area, bedrooms, budget)
    if offers:
        lines = ["–ù–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"]
        for o in offers:
            line = f"‚Ä¢ {o.get('title') or '–õ–æ—Ç'} ‚Äî —Å–ø–∞–ª—å–Ω–∏: {o.get('bedrooms') or '?'}; —Ü–µ–Ω–∞: {o.get('price_month') or '?'}; —Ä–∞–π–æ–Ω: {o.get('location') or '?'}\n{(o.get('link') or '')}"
            lines.append(line)
        await update.message.reply_text("\n\n".join(lines))
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –≤ –±–∞–∑–µ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –Ø –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.")
        if MANAGER_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=int(MANAGER_CHAT_ID),
                    text=f"–ó–∞—è–≤–∫–∞: —Ä–∞–π–æ–Ω={area}; —Å–ø–∞–ª—å–Ω–∏={bedrooms}; –±—é–¥–∂–µ—Ç={budget}; –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}",
                )
            except Exception as e:
                log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: %s", e)

    await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ–º —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /rent")
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ù–∞–ø–∏—à–∏—Ç–µ /rent –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã.")
    return ConversationHandler.END

async def on_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≤–∏–º –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–µ, –ø–∞—Ä—Å–∏–º –∏ –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É."""
    if not update.channel_post:
        return
    msg = update.channel_post
    uname = (msg.chat.username or "").lower()
    if PUBLIC_CHANNEL and uname != PUBLIC_CHANNEL.lower():
        # —á—É–∂–æ–π –∫–∞–Ω–∞–ª ‚Äî –∏–≥–Ω–æ—Ä
        return

    text = (msg.text or msg.caption or "").strip()
    if not text:
        return

    message_link = ""
    if msg.link:
        message_link = msg.link
    elif msg.chat.username:
        message_link = f"https://t.me/{msg.chat.username}/{msg.message_id}"

    listing_id = f"{msg.chat.id}_{msg.message_id}"
    item = parse_listing_from_text(text, message_link, listing_id)
    append_listing_row(item)
    log.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ—Ç %s –∏–∑ –∫–∞–Ω–∞–ª–∞ @%s", listing_id, msg.chat.username)

# ---------- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
def build_application() -> Application:
    app: Application = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    app.add_handler(MessageHandler(filters.ChatType.CHANNEL & filters.TEXT, on_channel_post))

    return app

# ---------- –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ ----------
async def run_webhook(app: Application) -> None:
    """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook (Render)."""
    bot: Bot = app.bot

    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —á–∏—Å—Ç–∏–º "–≤–∏—Å—è—â–∏–µ" –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)
    log.info("deleteWebhook -> OK")

    webhook_url = f"{BASE_URL}{WEBHOOK_PATH if WEBHOOK_PATH.startswith('/') else '/'+WEBHOOK_PATH}"
    # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–±—Ö—É–∫ –¥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    await bot.set_webhook(url=webhook_url, allowed_updates=["message", "channel_post", "callback_query"])
    log.info('setWebhook -> %s', webhook_url)

    # –Ø–≤–Ω–æ —Å–æ–∑–¥–∞—ë–º event loop (–∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç "no current event loop" –Ω–∞ Py3.12/3.13)
    loop = asyncio.get_event_loop()
    if loop.is_closed():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "10000")),
        url_path=WEBHOOK_PATH.lstrip("/"),
        webhook_url=webhook_url,
        allowed_updates=["message", "channel_post", "callback_query"],
    )

async def run_polling(app: Application) -> None:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ polling (BASE_URL –Ω–µ –∑–∞–¥–∞–Ω)."""
    await app.bot.delete_webhook(drop_pending_updates=True)
    log.info("deleteWebhook -> OK (polling mode)")
    await app.initialize()
    await app.start()
    log.info("Polling started‚Ä¶")
    try:
        await app.updater.start_polling(allowed_updates=["message", "channel_post", "callback_query"])
        await app.updater.wait()
    finally:
        await app.stop()
        await app.shutdown()

def main() -> None:
    setup_gsheets_if_possible()
    app = build_application()

    # –î–ª—è –ª–æ–≥–æ–≤
    async def _run() -> None:
        me = await app.bot.get_me()
        log.info("Bot started: @%s", me.username)

        if BASE_URL:
            await run_webhook(app)
        else:
            await run_polling(app)

    # –ù–∞–¥—ë–∂–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ—Ä—É—Ç–∏–Ω —Å —è–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    if loop.is_closed():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.run_until_complete(_run())

if __name__ == "__main__":
    main()
