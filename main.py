import os
import json
import logging
import asyncio
from datetime import datetime
from typing import Dict, Any, Optional

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters, PicklePersistence
)

# ====== 3rd party for LLM + Sheets + dates ======
from openai import OpenAI
import gspread
from google.oauth2 import service_account
import dateparser

# ------------- Logging -------------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("cozyasia-bot")

# ------------- ENV -------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_API_KEY_DEFAULT")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook")  # –î–û–õ–ñ–ù–û –°–û–í–ü–ê–î–ê–¢–¨ —Å run_webhook
PORT = int(os.getenv("PORT", "10000"))

GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID") or os.getenv("GROUP_ID")  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã

# Google Sheets (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
GSHEET_ID = os.getenv("GSPREAD_SHEET_ID") or os.getenv("GOOGLE_SHEET_ID")  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É
GSHEET_TAB = os.getenv("GSPREAD_LEADS_SHEET", "Leads")
GOOGLE_SA_JSON = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")  # –≤–µ—Å—å JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞

# –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã
LINK_SITE = os.getenv("LINK_SITE", "https://cozy.asia")
LINK_LISTINGS = os.getenv("LINK_LISTINGS", "https://t.me/SamuiRental")
LINK_VILLAS = os.getenv("LINK_VILLAS", "https://t.me/arenda_vill_samui")
LINK_IG = os.getenv("LINK_IG", "https://www.instagram.com/cozy.asia")

# ----------- States for Conversation -----------
(
    Q_TYPE,
    Q_BUDGET,
    Q_LOCATION,
    Q_BEDROOMS,
    Q_CHECKIN,
    Q_CHECKOUT,
    Q_NOTES,
) = range(7)

# ----------- Helpers -----------
def parse_date_any(s: str) -> Optional[str]:
    if not s:
        return None
    dt = dateparser.parse(
        s,
        settings={"PREFER_DATES_FROM": "future", "DATE_ORDER": "DMY"},
    )
    if not dt:
        return None
    return dt.date().isoformat()

def sheets_client():
    if not (GSHEET_ID and GOOGLE_SA_JSON):
        return None, None
    try:
        info = json.loads(GOOGLE_SA_JSON)
        creds = service_account.Credentials.from_service_account_info(
            info, scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(GSHEET_ID)
        ws = sh.worksheet(GSHEET_TAB)
        return gc, ws
    except Exception as e:
        log.warning("Sheets disabled: %s", e)
        return None, None

def promo_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=LINK_SITE)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=LINK_LISTINGS)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=LINK_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=LINK_IG)],
    ])

PROMO_TEXT = (
    "üõ†Ô∏è –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
    "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ (–¥–æ–º–∞/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/–≤–∏–ª–ª—ã) –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)

# ----------- OpenAI -----------
oai_client = None
if OPENAI_API_KEY:
    oai_client = OpenAI(api_key=OPENAI_API_KEY)

async def ai_reply(user_text: str) -> str:
    """
    –°–≤–æ–±–æ–¥–Ω—ã–π GPT-—á–∞—Ç —Å –º—è–≥–∫–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–µ–π: –æ—Ç–≤–µ—á–∞–µ–º –ø–æ —Å—É—â–µ—Å—Ç–≤—É
    –∏ –¥–µ–ª–∏–∫–∞—Ç–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –∞–Ω–∫–µ—Ç–µ/—Ä–µ—Å—É—Ä—Å–∞–º.
    –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–∞ –¥–∞—ë–º –æ—Ñ—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫—É.
    """
    if not oai_client:
        return (
            "–Ø –Ω–∞ —Å–≤—è–∑–∏ –∏ –º–æ–≥—É –ø–æ–º–æ—á—å üôÇ\n\n"
            "–ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ.\n\n" + PROMO_TEXT
        )
    try:
        sys = (
            "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia –Ω–∞ –°–∞–º—É–∏. "
            "–û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É (–ø–æ–≥–æ–¥–∞, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç, –æ—Ç–¥—ã—Ö). "
            "–ö–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å —É—Ö–æ–¥–∏—Ç –∫ –∞—Ä–µ–Ω–¥–µ/–ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ ‚Äî "
            "–Ω–µ —Ä–µ–∫–ª–∞–º–∏—Ä—É–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞; –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ /rent "
            "–∏ —Ä–µ—Å—É—Ä—Å–∞–º Cozy Asia. –ö—Ä–∞—Ç–∫–æ—Å—Ç—å, —Ä—É—Å—Å–∫–∞—è –ª–æ–∫–∞–ª—å."
        )
        resp = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": sys},
                {"role": "user", "content": user_text},
            ],
            temperature=0.6,
        )
        content = resp.choices[0].message.content.strip()
        # –î–æ–±–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫—É—é ¬´–ø–æ–¥—Å–∫–∞–∑–∫—É¬ª –≤ –∫–æ–Ω—Ü–µ, –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç:
        tail = "\n\n" + PROMO_TEXT
        return content + tail
    except Exception as e:
        log.warning("OpenAI error: %s", e)
        return (
            "–°–µ–π—á–∞—Å –æ—Ç–≤–µ—á—É –∫–∞–∫ —Å–º–æ–≥—É üôÇ\n\n"
            + PROMO_TEXT
        )

# ----------- Conversation Handlers -----------
def reset_user_state(context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("lead_submitted", None)
    context.user_data["form"] = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cozy Asia Real Estate Bot¬ª\n\n"
        "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
        "üí¨ –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
        "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
        "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
        "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
        + PROMO_TEXT
    )
    await update.message.reply_text(text, reply_markup=promo_keyboard())
    return ConversationHandler.END

async def rent_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É: –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π 7/7 ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç, –ø–æ–∫–∞ —è–≤–Ω–æ –Ω–µ –Ω–∞—á–Ω—É—Ç /rent –∑–∞–Ω–æ–≤–æ
    reset_user_state(context)
    await update.message.reply_text("–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return Q_TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return Q_BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["budget"] = update.message.text.strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return Q_LOCATION

async def q_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["location"] = update.message.text.strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return Q_BEDROOMS

async def q_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["bedrooms"] = update.message.text.strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã)")
    return Q_CHECKIN

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    parsed = parse_date_any(raw)
    if not parsed:
        # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±—ã–º –ø–æ–Ω—è—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º (–ø—Ä–∏–º–µ—Ä: 1 –æ–∫—Ç, 2025-10-01, 01/10/25).")
        return Q_CHECKIN
    context.user_data["form"]["check_in"] = parsed
    await update.message.reply_text("6/7. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã)")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    parsed = parse_date_any(raw)
    if not parsed:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –ª—é–±—ã–º –ø–æ–Ω—è—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º üôè")
        return Q_CHECKOUT
    context.user_data["form"]["check_out"] = parsed
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["notes"] = update.message.text.strip()

    form = context.user_data["form"].copy()
    user = update.effective_user

    # ---- Write to Google Sheets (optional) ----
    gc, ws = sheets_client()
    if ws:
        try:
            ws.append_row([
                datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
                str(update.effective_chat.id),
                (user.username or user.full_name or ""),
                form.get("location", ""),
                form.get("bedrooms", ""),
                form.get("budget", ""),
                "",  # people (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
                "",  # pets (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
                form.get("check_in", ""),
                form.get("check_out", ""),
                form.get("type", ""),
                form.get("notes", ""),
            ])
        except Exception as e:
            log.warning("Sheets append failed: %s", e)

    # ---- Notify group ----
    if GROUP_CHAT_ID:
        try:
            msg = (
                "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
                f"–ö–ª–∏–µ–Ω—Ç: @{user.username or '–±–µ–∑_–Ω–∏–∫–∞'} (ID: {user.id})\n"
                f"–¢–∏–ø: {form.get('type','')}\n"
                f"–†–∞–π–æ–Ω: {form.get('location','')}\n"
                f"–ë—é–¥–∂–µ—Ç: {form.get('budget','')}\n"
                f"–°–ø–∞–ª–µ–Ω: {form.get('bedrooms','')}\n"
                f"Check-in: {form.get('check_in','')}  |  Check-out: {form.get('check_out','')}\n"
                f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {form.get('notes','')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M')} UTC"
            )
            await context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=msg)
        except Exception as e:
            log.warning("Group notify failed: %s", e)

    # ---- Tell user ----
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –æ–Ω –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.\n"
        "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø—Ä–∏—à–ª—é –≤ —ç—Ç–æ—Ç —á–∞—Ç. "
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ. üôÇ",
        reply_markup=promo_keyboard()
    )

    context.user_data["lead_submitted"] = True
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END

# ----------- Free Chat -----------
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    user_text = update.message.text.strip()
    reply = await ai_reply(user_text)
    await update.message.reply_text(reply, reply_markup=promo_keyboard())

# ----------- Build Application -----------
def build_application() -> Application:
    persistence = PicklePersistence(filepath="cozyasia.pickle")
    app: Application = (
        ApplicationBuilder()
        .token(TELEGRAM_TOKEN)
        .persistence(persistence)
        .concurrent_updates(True)
        .build()
    )

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_cmd)],
        states={
            Q_TYPE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_BUDGET:  [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_LOCATION:[MessageHandler(filters.TEXT & ~filters.COMMAND, q_location)],
            Q_BEDROOMS:[MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
            Q_CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT:[MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES:   [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        name="rent-form",
        persistent=True,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))

    return app

# ----------- Main (Webhook) -----------
async def run() -> None:
    app = build_application()

    full_url = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"
    log.info("=> run_webhook port=%s url=%s", PORT, full_url)

    # –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: –ø—É—Ç—å –≤ set_webhook –∏ run_webhook –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å!
    await app.bot.delete_webhook(drop_pending_updates=True)
    await app.bot.set_webhook(url=full_url, allowed_updates=Update.ALL_TYPES)

    await app.initialize()
    await app.start()
    # –í v21 run_webhook —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç aiohttp —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–±—Ä–æ—Å–∏—Ç –∑–∞–ø—Ä–æ—Å—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH.lstrip("/"),
    )

    # –¥–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å
    await asyncio.Event().wait()

def main():
    asyncio.run(run())

if __name__ == "__main__":
    main()
