import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, Tuple

from dateutil import parser as dtparser
from dateutil.parser import ParserError

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters,
    ConversationHandler
)

# ====== –õ–û–ì–ò ================================================================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")

# ====== –ë–ï–ó–û–ü–ê–°–ù–û–ï –ß–¢–ï–ù–ò–ï ENV =============================================
def env(name: str, default: Optional[str] = None, required: bool = False) -> Optional[str]:
    val = os.getenv(name, default)
    if required and not val:
        raise RuntimeError(f"ENV {name} is required")
    return val

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ / –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_TOKEN   = env("TELEGRAM_TOKEN", required=True)
OPENAI_API_KEY   = env("OPENAI_API_KEY") or env("OPENAI_API_KEY_SECRET")
OPENAI_MODEL     = env("OPENAI_MODEL", "gpt-4o-mini")
GROUP_CHAT_ID    = env("GROUP_CHAT_ID")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: -4908974531
WEBHOOK_BASE     = env("WEBHOOK_BASE", required=True).rstrip("/")
WEBHOOK_PATH     = env("WEBHOOK_PATH", "/webhook")
PORT             = int(env("PORT", "10000"))

# –†–µ—Å—É—Ä—Å—ã –¥–ª—è ¬´–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ¬ª –±–ª–æ–∫–∞
SITE_URL         = env("SITE_URL", "https://cozy.asia")
TG_CHANNEL_ALL   = env("TG_CHANNEL_ALL", "https://t.me/SamuiRental")
TG_CHANNEL_VILL  = env("TG_CHANNEL_VILL", "https://t.me/arenda_vill_samui")
INSTAGRAM_URL    = env("INSTAGRAM_URL", "https://www.instagram.com/cozy.asia")

# Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
GS_DB_ID         = env("GOOGLE_SHEETS_DB_ID")
GS_CREDS_JSON    = env("GOOGLE_SERVICE_ACCOUNT_JSON")

# ====== OPENAI ==============================================================
openai_client = None
if OPENAI_API_KEY:
    try:
        from openai import OpenAI
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client ready.")
    except Exception as e:
        log.warning("OpenAI init failed: %s", e)

# ====== GOOGLE SHEETS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ========================================
gspread_client = None
worksheet = None
if GS_DB_ID and GS_CREDS_JSON:
    try:
        import gspread
        from google.oauth2.service_account import Credentials

        sa_info = json.loads(GS_CREDS_JSON)
        creds = Credentials.from_service_account_info(
            sa_info,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        gspread_client = gspread.authorize(creds)
        sh = gspread_client.open_by_key(GS_DB_ID)
        worksheet = sh.sheet1
        log.info("Google Sheets ready.")
    except Exception as e:
        log.warning("Google Sheets disabled: %s", e)
else:
    log.info("Google Sheets not configured; skipping.")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ====================================================
def parse_any_date(text: str) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É ¬´–≤ –ª—é–±—ã—Ö —Ä–∞–∑—É–º–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö¬ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ISO 'YYYY-MM-DD' –∏–ª–∏ None.
    """
    if not text:
        return None
    try:
        # dayfirst=True –ø–æ–º–æ–≥–∞–µ—Ç –¥–ª—è 01.12.2025 –∏ —Ç.–ø.
        dt = dtparser.parse(text, dayfirst=True, fuzzy=True)
        return dt.date().isoformat()
    except ParserError:
        return None

def marketing_block() -> Tuple[str, InlineKeyboardMarkup]:
    text = (
        "üìå –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
        "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"‚Ä¢ –°–∞–π—Ç: {SITE_URL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_CHANNEL_ALL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_CHANNEL_VILL}\n"
        f"‚Ä¢ Instagram: {INSTAGRAM_URL}"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=SITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_CHANNEL_ALL)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_CHANNEL_VILL)],
        [InlineKeyboardButton("üì∏ Instagram", url=INSTAGRAM_URL)],
    ])
    return text, kb

async def gpt_reply(user_text: str) -> str:
    """
    –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫.
    –ö –æ—Ç–≤–µ—Ç—É –¥–æ–±–∞–≤–ª—è–µ–º –º—è–≥–∫—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∫ –∞–Ω–∫–µ—Ç–µ/—Ä–µ—Å—É—Ä—Å–∞–º.
    """
    base_answer = None

    if openai_client:
        try:
            sys_prompt = (
                "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia –ø–æ –°–∞–º—É–∏: –∫–ª–∏–º–∞—Ç, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç, –ø–µ—Ä–µ–ª—ë—Ç—ã, –≤–∏–∑—ã, "
                "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞, –∞ —Ç–∞–∫–∂–µ –±–∞–∑–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥–±–æ—Ä—É –∂–∏–ª—å—è. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –≤–Ω–µ—à–Ω–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤. "
                "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∏–¥—ë—Ç –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–¥–±–æ—Ä—É/–∞—Ä–µ–Ω–¥–µ/–ø–æ–∫—É–ø–∫–µ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É /rent –∏ –¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ Cozy Asia."
            )
            resp = openai_client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": sys_prompt},
                    {"role": "user", "content": user_text}
                ],
                temperature=0.7,
                max_tokens=500
            )
            base_answer = resp.choices[0].message.content.strip()
        except Exception as e:
            log.warning("OpenAI error: %s", e)

    if not base_answer:
        # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –º–æ–ª—á–∞–ª
        base_answer = (
            "–ü–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. –ù–∞ –°–∞–º—É–∏ ‚Äî —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç: –æ–∫—Ç‚Äì–¥–µ–∫ —á–∞—â–µ –¥–æ–∂–¥–∏ –∏ –≤–æ–ª–Ω–∞ –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ; "
            "—è–Ω–≤‚Äì–º–∞—Ä—Ç —Å—É—à–µ –∏ —Å–ø–æ–∫–æ–π–Ω–µ–µ; –∞–ø—Ä–µ–ª—å ‚Äî –∂–∞—Ä–∫–∏–π —à—Ç–∏–ª—å; –ª–µ—Ç–æ —É–º–µ—Ä–µ–Ω–Ω–æ–µ. "
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, –∏ —è —É—Ç–æ—á–Ω—é. "
        )

    # –î–æ–±–∞–≤–∏–º ¬´–º—è–≥–∫—É—é –≤–æ—Ä–æ–Ω–∫—É¬ª
    extra, _ = marketing_block()
    return f"{base_answer}\n\n{extra}"

def safe_notify_group(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not GROUP_CHAT_ID:
        return
    try:
        context.application.create_task(
            context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=text, parse_mode=ParseMode.HTML)
        )
    except Exception as e:
        log.warning("Notify group failed: %s", e)

def write_to_sheet(row: Dict[str, Any]):
    if not worksheet:
        return
    try:
        values = [
            row.get("time", ""),
            row.get("user_id", ""),
            row.get("username", ""),
            row.get("type", ""),
            row.get("area", ""),
            row.get("budget", ""),
            row.get("bedrooms", ""),
            row.get("checkin", ""),
            row.get("checkout", ""),
            row.get("notes", ""),
        ]
        worksheet.append_row(values)
    except Exception as e:
        log.warning("Sheet append failed: %s", e)

# ====== –ê–ù–ö–ï–¢–ê /rent ========================================================
(
    RENT_TYPE,
    RENT_BUDGET,
    RENT_AREA,
    RENT_BEDS,
    RENT_CHECKIN,
    RENT_CHECKOUT,
    RENT_NOTES,
) = range(7)

def reset_form(user_data: Dict[str, Any]):
    user_data["rent_form"] = {
        "type": "",
        "budget": "",
        "area": "",
        "bedrooms": "",
        "checkin": "",
        "checkout": "",
        "notes": "",
        "submitted": False,  # –∞–Ω—Ç–∏–¥—É–±–ª–∏
    }

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reset_form(context.user_data)
    await update.message.reply_text(
        "–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?"
    )
    return RENT_TYPE

async def rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent_form"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return RENT_BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent_form"]["budget"] = update.message.text.strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return RENT_AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent_form"]["area"] = update.message.text.strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return RENT_BEDS

async def rent_beds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent_form"]["bedrooms"] = update.message.text.strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±—ã–º –ø–æ–Ω—è—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.12.2025)?")
    return RENT_CHECKIN

async def rent_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    iso = parse_any_date(update.message.text)
    if not iso:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-12-01 –∏–ª–∏ 01.12.2025).")
        return RENT_CHECKIN
    context.user_data["rent_form"]["checkin"] = iso
    await update.message.reply_text("6/7. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)?")
    return RENT_CHECKOUT

async def rent_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    iso = parse_any_date(update.message.text)
    if not iso:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return RENT_CHECKOUT
    context.user_data["rent_form"]["checkout"] = iso
    await update.message.reply_text(
        "7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)"
    )
    return RENT_NOTES

async def rent_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    form = context.user_data.get("rent_form", {})
    form["notes"] = update.message.text.strip()

    # –ê–Ω—Ç–∏–¥—É–±–ª–∏: –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –Ω–µ —à–ª—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    if not form.get("submitted"):
        form["submitted"] = True
        # –£–≤–µ–¥–æ–º–∏–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
        text = (
            "<b>üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia</b>\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '‚Äî'} (ID: {update.effective_user.id})\n"
            f"–¢–∏–ø: {form['type']}\n"
            f"–†–∞–π–æ–Ω: {form['area']}\n"
            f"–ë—é–¥–∂–µ—Ç: {form['budget']}\n"
            f"–°–ø–∞–ª–µ–Ω: {form['bedrooms']}\n"
            f"Check-in: {form['checkin']}  |  Check-out: {form['checkout']}\n"
            f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {form['notes']}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
        )
        safe_notify_group(context, text)

        # –ó–∞–ø–∏—à–µ–º –≤ Google Sheets, –µ—Å–ª–∏ –µ—Å—Ç—å
        write_to_sheet({
            "time": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),
            "user_id": str(update.effective_user.id),
            "username": update.effective_user.username or "",
            "type": form['type'],
            "area": form['area'],
            "budget": form['budget'],
            "bedrooms": form['bedrooms'],
            "checkin": form['checkin'],
            "checkout": form['checkout'],
            "notes": form['notes'],
        })

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –∞–≤—Ç–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    extra_text, kb = marketing_block()
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ\n"
        "–Ø —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª –¥–µ—Ç–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç–µ –∏ –≤—ã—à–ª—é —Å—Å—ã–ª–∫–∏.\n\n"
        f"{extra_text}",
        reply_markup=kb
    )
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END

# ====== /start –∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ =========================================
def make_starter_keyboard() -> InlineKeyboardMarkup:
    _, kb = marketing_block()
    return kb

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
        "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
        "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )
    await update.message.reply_text(text, reply_markup=make_starter_keyboard())

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /rent, /cancel")

async def free_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –õ—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –Ω–µ –∏–¥—ë—Ç –∞–Ω–∫–µ—Ç–∞ ‚Äî –≤ GPT
    user_text = update.message.text.strip()
    answer = await gpt_reply(user_text)
    # –£—Ç–æ—á–Ω—è—é—â–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton("/rent")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(answer, reply_markup=kb, parse_mode=ParseMode.HTML)

# ====== –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==================================================
def build_application() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).concurrent_updates(True).build()

    # –ê–Ω–∫–µ—Ç–∞ /rent
    rent_conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            RENT_TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            RENT_BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            RENT_AREA:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            RENT_BEDS:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_beds)],
            RENT_CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkin)],
            RENT_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkout)],
            RENT_NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_notes)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
        allow_reentry=True,
        name="rent-conv",
        persistent=False,
    )

    app.add_handler(rent_conv)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))

    # –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å /rent
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_chat))

    return app

# ====== –ó–ê–ü–£–°–ö WEBHOOK (Render) ============================================
def main():
    app = build_application()

    # URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç —Å–ª–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã:
    webhook_url = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"

    log.info("Starting webhook on 0.0.0.0:%s, url=%s", PORT, webhook_url)

    # –í–ê–ñ–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å asyncio.run(...) –≤–æ–∫—Ä—É–≥ run_webhook,
    # –∏–Ω–∞—á–µ –±—É–¥–µ—Ç 'Cannot close a running event loop'.
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH.lstrip("/"),
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
