# main.py
import os
import json
import logging
from datetime import datetime
from typing import Optional

from telegram import Update
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ===================== CONFIG & LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# Telegram & Webhook
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE   = os.environ.get("WEBHOOK_BASE", "").strip()   # https://<service>.onrender.com
PORT           = int(os.environ.get("PORT", "10000"))

# Group for notifications
GROUP_CHAT_ID  = os.environ.get("GROUP_CHAT_ID", "").strip()  # -100xxxxxxxxxx

# Google Sheets
SHEET_ID         = os.environ.get("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS_RAW = os.environ.get("GOOGLE_CREDS_JSON", "").strip()

# OpenAI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "").strip()     # sk-... –∏–ª–∏ sk-proj-...
OPENAI_PROJECT = os.environ.get("OPENAI_PROJECT", "").strip()     # proj_..., –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å project-key
OPENAI_ORG     = os.environ.get("OPENAI_ORG", "").strip()         # org_..., –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
OPENAI_MODEL   = os.environ.get("OPENAI_MODEL", "gpt-4o-mini").strip()

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE or not WEBHOOK_BASE.startswith("http"):
    raise RuntimeError("ENV WEBHOOK_BASE must be your Render URL like https://xxx.onrender.com")

def _print_openai_cfg():
    if not OPENAI_API_KEY:
        log.warning("OpenAI disabled: no OPENAI_API_KEY")
        return
    subtype = "user-key"
    if OPENAI_API_KEY.startswith("sk-proj-"):
        subtype = "project-key"
    log.info(
        "OpenAI ready | type=%s | model=%s | project=%s | org=%s",
        subtype, OPENAI_MODEL, (OPENAI_PROJECT or "‚Äî"), (OPENAI_ORG or "‚Äî"),
    )

# ===================== GOOGLE SHEETS (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è) =====================
_gspread = None
_worksheet = None

def _init_sheets_once():
    global _gspread, _worksheet
    if _worksheet is not None:
        return

    if not SHEET_ID or not GOOGLE_CREDS_RAW:
        log.warning("Google Sheets disabled (no GOOGLE_SHEET_ID or GOOGLE_CREDS_JSON)")
        return

    try:
        import gspread
        from google.oauth2.service_account import Credentials
    except Exception as e:
        log.error("gspread/google-auth not available: %s", e)
        return

    try:
        sa_info = json.loads(GOOGLE_CREDS_RAW)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(sa_info, scopes=scopes)
        _gspread = gspread.authorize(creds)
        sh = _gspread.open_by_key(SHEET_ID)
        try:
            _worksheet = sh.worksheet("Leads")
        except Exception:
            _worksheet = sh.sheet1
        log.info("Google Sheets ready: %s", _worksheet.title)
    except Exception as e:
        log.error("Failed to init Google Sheets: %s", e)
        _worksheet = None

def append_lead_row(row_values: list) -> bool:
    _init_sheets_once()
    if _worksheet is None:
        return False
    try:
        _worksheet.append_row(row_values, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        log.error("append_row failed: %s", e)
        return False

# ===================== PROMO/TEXTS =====================
def promo_block() -> str:
    return (
        "üìé –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        "üåê –°–∞–π—Ç ‚Äî –∫–∞—Ç–∞–ª–æ–≥ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "https://cozy.asia\n\n"
        "üì£ –ö–∞–Ω–∞–ª ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–±–æ—Ä–∫–∏\n"
        "https://t.me/cozy_asia\n\n"
        "üìò –ü—Ä–∞–≤–∏–ª–∞/FAQ ‚Äî –≤–∞–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "https://t.me/cozy_asia_rules\n\n"
        "üëâ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–±–æ—Ä—É –∂–∏–ª—å—è? –ù–∞–ø–∏—à–∏—Ç–µ /rent ‚Äî –∑–∞–¥–∞–º 7 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )

START_GREETING = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)

RENT_INTRO = (
    "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7:\n"
    "–∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
)

# ===================== STATE MACHINE /rent =====================
(Q_TYPE, Q_DISTRICT, Q_BUDGET, Q_BEDROOMS, Q_CHECKIN, Q_CHECKOUT, Q_NOTES) = range(7)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(START_GREETING)
    await update.effective_message.reply_text(promo_block())

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text(RENT_INTRO)
    return Q_TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = (update.message.text or "").strip()
    await update.message.reply_text("2/7: —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ß–∞–≤–µ–Ω–≥)")
    return Q_DISTRICT

async def q_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = (update.message.text or "").strip()
    await update.message.reply_text("3/7: –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 50000)")
    return Q_BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    context.user_data["budget"] = "".join(ch for ch in txt if ch.isdigit()) or txt
    await update.message.reply_text("4/7: —Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ? (—á–∏—Å–ª–æ)")
    return Q_BEDROOMS

async def q_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    context.user_data["bedrooms"] = "".join(ch for ch in txt if ch.isdigit()) or txt
    await update.message.reply_text("5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)")
    return Q_CHECKIN

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkin"] = (update.message.text or "").strip()
    await update.message.reply_text("6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkout"] = (update.message.text or "").strip()
    await update.message.reply_text("7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["notes"] = (update.message.text or "").strip()
    ud = context.user_data

    summary = (
        "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"–¢–∏–ø: {ud.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
        f"Check-in: {ud.get('checkin','')}\n"
        f"Check-out: {ud.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {ud.get('notes','')}\n\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(summary)

    try:
        if GROUP_CHAT_ID:
            mention = (
                f"@{update.effective_user.username}"
                if (update.effective_user and update.effective_user.username)
                else f"(ID: {update.effective_user.id if update.effective_user else '‚Äî'})"
            )
            group_text = (
                "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
                f"–ö–ª–∏–µ–Ω—Ç: {mention}\n"
                f"–¢–∏–ø: {ud.get('type','')}\n"
                f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
                f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
                f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
                f"Check-in: {ud.get('checkin','')}\n"
                f"Check-out: {ud.get('checkout','')}\n"
                f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {ud.get('notes','')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
            await context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=group_text)
    except Exception as e:
        log.error("Failed to notify group: %s", e)

    try:
        created = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        chat_id = update.effective_chat.id if update.effective_chat else ""
        username = update.effective_user.username if (update.effective_user and update.effective_user.username) else ""
        row = [
            created, str(chat_id), username,
            ud.get("district",""),
            ud.get("bedrooms",""),
            ud.get("budget",""),
            ud.get("checkin",""),
            ud.get("checkout",""),
            ud.get("type",""),
            ud.get("notes",""),
        ]
        ok = append_lead_row(row)
        if not ok:
            log.warning("Lead not saved to sheet (disabled or error).")
    except Exception as e:
        log.error("Sheet append error: %s", e)

    context.user_data.clear()
    return ConversationHandler.END

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª –∞–Ω–∫–µ—Ç—É. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å /rent –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

# ===================== OpenAI helpers =====================
def _get_openai_client():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç OpenAI –∏–ª–∏ None (–µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç).
    """
    if not OPENAI_API_KEY:
        return None
    try:
        from openai import OpenAI
        client = OpenAI(
            api_key=OPENAI_API_KEY,
            project=OPENAI_PROJECT or None,
            organization=OPENAI_ORG or None,
            timeout=60,           # –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç
            max_retries=2,
        )
        return client
    except Exception as e:
        log.error("Failed to init OpenAI client: %s", e)
        return None

async def _probe_openai():
    """
    –ú–∞–ª–µ–Ω—å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤ –ª–æ–≥–∞—Ö —Å—Ä–∞–∑—É –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ,
    —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∫–ª—é—á/–ø—Ä–æ–µ–∫—Ç/–º–æ–¥–µ–ª—å.
    """
    client = _get_openai_client()
    if not client:
        return
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ –ø—É–ª–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        import asyncio
        def _call():
            return client.chat.completions.create(
                model=OPENAI_MODEL,
                messages=[{"role": "user", "content": "pong"}],
                temperature=0.0,
            )
        resp = await asyncio.get_running_loop().run_in_executor(None, _call)
        txt = (resp.choices[0].message.content or "").strip()
        log.info("OpenAI probe OK: %s", txt[:120])
    except Exception as e:
        # –í—ã—Ç–∞—â–∏–º –º–∞–∫—Å–∏–º—É–º –¥–µ—Ç–∞–ª–µ–π –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        status = getattr(getattr(e, "response", None), "status_code", None)
        body   = None
        try:
            body = getattr(e, "response", None) and e.response.json()
        except Exception:
            pass
        log.error("OpenAI probe FAILED | status=%s | err=%s | body=%s", status, e, body)

# ===================== FREE CHAT =====================
def _looks_like_housing(text: str) -> bool:
    t = text.lower()
    keywords = ["—Å–Ω—è—Ç—å", "–∞—Ä–µ–Ω–¥–∞", "–∞—Ä–µ–Ω–¥", "–≤–∏–ª–ª–∞", "–≤–∏–ª–ª", "–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∂–∏–ª—å—ë", "–∂–∏–ª—å–µ", "—Ä–µ–Ω–¥"]
    return any(k in t for k in keywords)

async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    if text.lower() == "rent":
        return await cmd_rent(update, context)

    client = _get_openai_client()
    if client:
        import asyncio
        try:
            sys_prompt = (
                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia (–°–∞–º—É–∏). –ì–æ–≤–æ—Ä–∏—à—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ –¥–µ–ª—É. "
                "–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏ –∂–∏–ª—å—è ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ /rent. "
                "–í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –¥–∞–π –±–ª–æ–∫ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º:\n\n"
                + promo_block()
            )

            def _call():
                return client.chat.completions.create(
                    model=OPENAI_MODEL,
                    messages=[
                        {"role": "system", "content": sys_prompt},
                        {"role": "user", "content": text},
                    ],
                    temperature=0.6,
                )

            resp = await asyncio.get_running_loop().run_in_executor(None, _call)
            answer = (resp.choices[0].message.content or "").strip()

            if "/rent" not in answer and _looks_like_housing(text):
                answer += "\n\nüëâ –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏ /rent."

            await update.message.reply_text(answer)
            return
        except Exception as e:
            status = getattr(getattr(e, "response", None), "status_code", None)
            body   = None
            try:
                body = getattr(e, "response", None) and e.response.json()
            except Exception:
                pass
            log.error("OpenAI chat error | status=%s | err=%s | body=%s", status, e, body)

    # –§–æ–ª–ª–±—ç–∫ –±–µ–∑ OpenAI
    fallback = "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∂–∏–ª—å—ë–º, –∂–∏–∑–Ω—å—é –Ω–∞ –°–∞–º—É–∏, —Ä–∞–π–æ–Ω–∞–º–∏ –∏ —Ç.–¥.\n\n" + promo_block()
    await update.message.reply_text(fallback)

# ===================== BOOTSTRAP =====================
def build_application() -> Application:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    rent_conv = ConversationHandler(
        entry_points=[CommandHandler("rent", cmd_rent)],
        states={
            Q_TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_district)],
            Q_BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
            Q_CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))
    app.add_handler(rent_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))
    return app

def run_webhook(app: Application):
    url_path = f"webhook/{TELEGRAM_TOKEN}"
    webhook_url = f"{WEBHOOK_BASE.rstrip('/')}/{url_path}"
    log.info("==> start webhook on 0.0.0.0:%s | url=%s", PORT, webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        secret_token=None,
        url_path=url_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

def main():
    _print_openai_cfg()
    app = build_application()
    # –ü—Ä–æ–±–∞ OpenAI —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —Å–º–æ—Ç—Ä–∏ Render Logs
    import asyncio
    asyncio.get_event_loop().run_until_complete(_probe_openai())
    run_webhook(app)

if __name__ == "__main__":
    main()
