import os
import re
import time
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")


# ---------- –ö–û–ù–°–¢–ê–ù–¢–´/ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()

# Webhook –±–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ Render (Primary URL), –ë–ï–ó –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ "/"
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").strip()
if not WEBHOOK_BASE:
    # –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å: Render –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ—Ç –≤–Ω–µ—à–∫—É —Å—é–¥–∞
    WEBHOOK_BASE = os.getenv("RENDER_EXTERNAL_URL", "").strip()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
if WEBHOOK_BASE.endswith("/"):
    WEBHOOK_BASE = WEBHOOK_BASE[:-1]
if WEBHOOK_BASE and not WEBHOOK_BASE.startswith("http"):
    WEBHOOK_BASE = "https://" + WEBHOOK_BASE

WEBHOOK_PATH = "/webhook"  # –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –≤ –ø—É—Ç–∏ ‚Äî —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ
PORT = int(os.getenv("PORT", "10000"))

# –ö—É–¥–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏
MANAGER_CHAT_ID = os.getenv("MANAGER_CHAT_ID", "").strip()  # –ø—Ä–∏–º–µ—Ä: "5978240436"
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "").strip()      # –ø—Ä–∏–º–µ—Ä: "-1002222333444"

# Google Sheets (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
GOOGLE_SHEETS_DB_ID = os.getenv("GOOGLE_SHEETS_DB_ID", "").strip()  # ID —Ç–∞–±–ª–∏—Ü—ã
GOOGLE_SERVICE_JSON = os.getenv("GOOGLE_SERVICE_JSON", "").strip()  # JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
GOOGLE_SHEET_TAB = os.getenv("GOOGLE_SHEET_TAB", "Leads").strip()   # –∏–º—è –ª–∏—Å—Ç–∞

# ---------- –°–°–´–õ–ö–ò COZY ASIA ----------
SITE_URL = "https://cozy.asia"
TG_ALL_LOTS = "https://t.me/SamuiRental"
TG_VILLAS = "https://t.me/arenda_vill_samui"
INSTA_URL = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ ----------
# –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞)
USER_STATE: Dict[int, Dict[str, Any]] = {}

# Conversation states
(
    Q_TYPE,      # —Ç–∏–ø –∂–∏–ª—å—è
    Q_BUDGET,    # –±—é–¥–∂–µ—Ç/–º–µ—Å
    Q_AREA,      # —Ä–∞–π–æ–Ω
    Q_BEDROOMS,  # —Å–ø–∞–ª—å–Ω–∏
    Q_CHECKIN,   # –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞
    Q_CHECKOUT,  # –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
    Q_NOTES,     # —É—Å–ª–æ–≤–∏—è
) = range(7)

# ---------- –£–¢–ò–õ–´ ----------

def is_real_estate_intent(text: str) -> bool:
    """–ì—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Ä–µ—á—å –ø—Ä–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ‚Äî –≤–µ—Ä–Ω—ë–º True."""
    if not text:
        return False
    t = text.lower()
    kw = [
        "–∞—Ä–µ–Ω–¥", "—Å–Ω—è—Ç—å", "—Å–¥–∞—ë", "—Å–¥–∞—é", "–¥–æ–º", "–≤–∏–ª–ª–∞", "–∫–≤–∞—Ä—Ç–∏", "–Ω–µ–¥–≤–∏–∂",
        "–∫—É–ø–∏—Ç—å", "–ø–æ–∫—É–ø–∫", "–ø—Ä–æ–¥–∞—Ç—å", "–ø—Ä–æ–¥–∞–∂", "–ª–æ—Ç", "–∂–∏–ª—å—ë", "–∂–∏–ª—å–µ",
        "apart", "villa", "house", "rent", "rental", "lease", "real estate",
    ]
    return any(k in t for k in kw)


def promo_block() -> str:
    return (
        "üìå –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å:\n"
        f"‚Ä¢ –°–∞–π—Ç: {SITE_URL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_ALL_LOTS}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_VILLAS}\n"
        f"‚Ä¢ Instagram: {INSTA_URL}\n\n"
        "‚úçÔ∏è –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
        "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é –º–æ–∂–Ω–æ **–ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏**."
    )


def promo_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=SITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_ALL_LOTS)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTA_URL)],
    ])


def parse_date_any(s: str) -> Optional[str]:
    """–ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ –∫—É—á—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ–º YYYY-MM-DD –∏–ª–∏ None."""
    if not s:
        return None
    s = s.strip().replace(" ", "")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —è–≤–Ω–æ
    fmts = [
        "%Y-%m-%d", "%d.%m.%Y", "%d-%m-%Y", "%Y.%m.%d",
        "%d/%m/%Y", "%m/%d/%Y", "%Y/%m/%d",
        "%d.%m.%y",  "%d-%m-%y",  "%y.%m.%d", "%y-%m-%d",
        "%d%m%Y",    "%Y%m%d",
    ]
    for f in fmts:
        try:
            dt = datetime.strptime(s, f)
            return dt.strftime("%Y-%m-%d")
        except ValueError:
            pass

    # –ü–æ–ø—ã—Ç–∫–∞ —Å dateutil, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        from dateutil import parser as dateparser  # type: ignore
        dt = dateparser.parse(s, dayfirst=True, yearfirst=False, fuzzy=True)
        return dt.strftime("%Y-%m-%d")
    except Exception:
        return None


def now_iso() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")


def set_user_state(user_id: int, **kwargs):
    st = USER_STATE.get(user_id, {})
    st.update(kwargs)
    USER_STATE[user_id] = st


def get_user_state(user_id: int) -> Dict[str, Any]:
    return USER_STATE.get(user_id, {})


# ---------- OPENAI ----------
def ai_answer_sync(user_text: str, user_name: str = "") -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.
    """
    if not OPENAI_API_KEY:
        # –ë–µ–∑ –∫–ª—é—á–∞ –æ—Ç–≤–µ—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–æ–º
        return (
            "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!\n\n" + promo_block()
        )

    try:
        # openai>=1.40.0
        from openai import OpenAI  # type: ignore
        client = OpenAI(api_key=OPENAI_API_KEY)

        system_prompt = (
            "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia –Ω–∞ –°–∞–º—É–∏. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –ø–æ–≥–æ–¥–∞, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç, –¥–æ—Å—É–≥ –∏ —Ç.–¥. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é (–∞—Ä–µ–Ω–¥–∞/–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞, –¥–æ–º–∞, –≤–∏–ª–ª—ã, –∫–≤–∞—Ä—Ç–∏—Ä—ã, –ª–æ—Ç—ã), "
            "–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —É –Ω–∞—Å, "
            "–ø–æ–∫–∞–∂–∏ —Å—Å—ã–ª–∫–∏ (—Å–∞–π—Ç, –∫–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏, –∫–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º, Instagram) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–∞–Ω–¥—É /rent. "
            "–ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω–∫—É—Ä–∏—Ä—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, —Å–∞–π—Ç—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã. "
            "–ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∞—ë–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã."
        )

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_text},
        ]

        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=messages,
            temperature=0.5,
        )
        txt = (resp.choices[0].message.content or "").strip()
        # –ú—è–≥–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
        if is_real_estate_intent(user_text):
            txt = f"{txt}\n\n{promo_block()}"
        return txt
    except Exception as e:
        log.exception("OpenAI error: %s", e)
        # –§–æ–ª–ª–±—ç–∫
        return (
            "–ü–æ—Ö–æ–∂–µ, –ò–ò —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç, –Ω–æ —è –Ω–∞ —Å–≤—è–∑–∏ –∏ –º–æ–≥—É –ø–æ–º–æ—á—å.\n\n" + promo_block()
        )


# ---------- –ê–ù–ö–ï–¢–ê (ConversationHandler) ----------

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    set_user_state(user.id, in_form=True, form={}, submitted=False)
    await update.message.reply_text(
        "–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n"
        "1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?",
        reply_markup=ReplyKeyboardRemove(),
    )
    return Q_TYPE


async def rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    set_user_state(update.effective_user.id, form={"type": update.message.text})
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return Q_BUDGET


async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    st["form"]["budget"] = update.message.text
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏—Ç—å?")
    return Q_AREA


async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    st["form"]["area"] = update.message.text
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return Q_BEDROOMS


async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    st["form"]["bedrooms"] = update.message.text
    await update.message.reply_text("5/7. –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.12.2025 –∏–ª–∏ 2025-12-01).")
    return Q_CHECKIN


async def rent_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    dt = parse_date_any(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ (–ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).")
        return Q_CHECKIN
    st["form"]["checkin"] = dt
    await update.message.reply_text("6/7. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? –¢–æ–∂–µ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    return Q_CHECKOUT


async def rent_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    dt = parse_date_any(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏ –µ—â—ë —Ä–∞–∑ (–ª—é–±–æ–π –ø—Ä–∏–≤—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).")
        return Q_CHECKOUT
    st["form"]["checkout"] = dt
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES


def _format_lead_card(user: Any, form: Dict[str, Any]) -> str:
    uname = f"@{user.username}" if user and user.username else f"{user.full_name}"
    uid = user.id if user else "‚Äî"
    card = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {uname} (ID: {uid})\n"
        f"–¢–∏–ø: {form.get('type','‚Äî')}\n"
        f"–†–∞–π–æ–Ω: {form.get('area','‚Äî')}\n"
        f"–ë—é–¥–∂–µ—Ç: {form.get('budget','‚Äî')}\n"
        f"–°–ø–∞–ª–µ–Ω: {form.get('bedrooms','‚Äî')}\n"
        f"–ó–∞–µ–∑–¥: {form.get('checkin','‚Äî')}\n"
        f"–í—ã–µ–∑–¥: {form.get('checkout','‚Äî')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {form.get('notes','‚Äî')}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {now_iso()}"
    )
    return card


async def _push_to_sheets(form: Dict[str, Any], user: Any) -> Optional[str]:
    """–ü–∏—à–µ–º –≤ Google Sheets, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ª–∏—Å—Ç–∞/—Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ) –∏–ª–∏ None."""
    if not GOOGLE_SHEETS_DB_ID or not GOOGLE_SERVICE_JSON:
        return None
    try:
        import gspread  # type: ignore
        from google.oauth2.service_account import Credentials  # type: ignore

        service_info = json.loads(GOOGLE_SERVICE_JSON)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(service_info, scopes=scopes)
        gc = gspread.authorize(creds)

        sh = gc.open_by_key(GOOGLE_SHEETS_DB_ID)
        ws = sh.worksheet(GOOGLE_SHEET_TAB)

        row = [
            now_iso(),
            user.id if user else "",
            f"@{user.username}" if user and user.username else (user.full_name if user else ""),
            form.get("type",""),
            form.get("budget",""),
            form.get("area",""),
            form.get("bedrooms",""),
            form.get("checkin",""),
            form.get("checkout",""),
            form.get("notes",""),
        ]
        ws.append_row(row)
        try:
            return f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEETS_DB_ID}"
        except Exception:
            return None
    except Exception as e:
        log.exception("Sheets error: %s", e)
        return None


async def rent_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–Ω–∞–ª –∞–Ω–∫–µ—Ç—ã: —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É/–º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ GPT-—á–∞—Ç—É."""
    user = update.effective_user
    st = get_user_state(user.id)
    st["form"]["notes"] = update.message.text

    # –ê–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç: –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
    st["submitted"] = True
    st["in_form"] = False
    st["last_submission_at"] = time.time()

    form = st["form"]
    card = _format_lead_card(user, form)

    # –í —Ç–∞–±–ª–∏—Ü—É
    sheet_url = await _push_to_sheets(form, user)
    if sheet_url:
        card += f"\n\nüóÇ –¢–∞–±–ª–∏—Ü–∞: {sheet_url}"

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if GROUP_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=card,
            )
        except Exception as e:
            log.warning("Send to group failed: %s", e)
    if MANAGER_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=MANAGER_CHAT_ID,
                text=card,
            )
        except Exception as e:
            log.warning("Send to manager failed: %s", e)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + —Å—Å—ã–ª–∫–∏ + –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.\n\n"
        "–ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ —É –Ω–∞—Å:\n" + promo_block(),
        reply_markup=promo_keyboard(),
        disable_web_page_preview=True,
    )

    # —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–æ–¥—Ç—è–Ω—É—Ç—å ¬´–∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä¬ª, –Ω–æ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º/–ë–î –æ—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫–∏
    return ConversationHandler.END


async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    st = get_user_state(update.effective_user.id)
    st["in_form"] = False
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END


# ---------- –°–í–û–ë–û–î–ù–´–ô –ß–ê–¢ (GPT) ----------

async def free_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è: –æ—Ç–≤–µ—á–∞–µ—Ç GPT –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ."""
    user = update.effective_user
    st = get_user_state(user.id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –∏–≥–Ω–æ—Ä–∏–º —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä
    if st.get("in_form"):
        return

    txt = update.message.text or ""

    # –ê–Ω—Ç–∏-–¥—É–±–ª–∏–∫–∞—Ç –ø–æ—Å–ª–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã: –ø—Ä–æ—Å—Ç–æ —á–∞—Ç–∏–º—Å—è
    answer = await context.application.run_in_threadpool(ai_answer_sync, txt, user.full_name)
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª "–Ω–µ–¥–≤–∏–∂–∏–º—ã–π" –≤–æ–ø—Ä–æ—Å,
    # —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ–±—ã—á–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º –ø—Ä–æ –ø–æ–≥–æ–¥—É –∏ —Ç.–ø.
    if is_real_estate_intent(txt):
        await update.message.reply_text(
            answer,
            reply_markup=promo_keyboard(),
            disable_web_page_preview=True,
        )
    else:
        await update.message.reply_text(
            answer,
            disable_web_page_preview=True,
        )


# ---------- –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    set_user_state(user.id, in_form=False)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    hello = (
        "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
        "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
        "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
        "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
    )
    await update.message.reply_text(hello)
    # –ª—ë–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–æ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞
    await update.message.reply_text(
        "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ.\n\n"
        + promo_block(),
        reply_markup=promo_keyboard(),
        disable_web_page_preview=True,
    )


async def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await rent_cancel(update, context)


async def diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    url = f"{WEBHOOK_BASE}{WEBHOOK_PATH}" if WEBHOOK_BASE else "(not set)"
    env_ok = {
        "BOT_TOKEN": bool(BOT_TOKEN),
        "OPENAI_API_KEY": bool(OPENAI_API_KEY),
        "WEBHOOK_BASE": WEBHOOK_BASE,
        "WEBHOOK_PATH": WEBHOOK_PATH,
        "GROUP_CHAT_ID": GROUP_CHAT_ID or "(none)",
        "MANAGER_CHAT_ID": MANAGER_CHAT_ID or "(none)",
        "SHEETS_ID?": bool(GOOGLE_SHEETS_DB_ID),
        "SVC_JSON?": bool(GOOGLE_SERVICE_JSON),
        "MODEL": OPENAI_MODEL,
    }
    pretty = "\n".join([f"{k}: {v}" for k, v in env_ok.items()])
    await update.message.reply_text(
        f"Webhook URL: {url}\n\n{pretty}"
    )


# ---------- –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ----------

def build_application() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("ENV TELEGRAM_BOT_TOKEN is required")

    app: Application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –ê–Ω–∫–µ—Ç–∞
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            Q_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            Q_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            Q_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            Q_BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            Q_CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkout)],
            Q_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_done)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel_cmd))
    app.add_handler(CommandHandler("diag", diag))

    # –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_chat))

    return app


def main():
    if not WEBHOOK_BASE:
        raise RuntimeError("ENV WEBHOOK_BASE is required (Render Primary URL)")

    app = build_application()

    url = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"
    log.info("==> Starting webhook on 0.0.0.0:%s | url=%r", PORT, url)

    # run_webhook —Å–∞–º –ø–æ—Å—Ç–∞–≤–∏—Ç setWebhook(webhook_url=url)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=url,
        # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ:
        secret_token=None,  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–µ–∫—Ä–µ—Ç ‚Äî –¥–æ–±–∞–≤—å ENV –∏ –ø–µ—Ä–µ–¥–∞–π —Å—é–¥–∞
    )


if __name__ == "__main__":
    main()
