# main.py ‚Äî Cozy Asia Bot (python-telegram-bot v20+, WEBHOOK/Render)
# ============================================================================
# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:
#   0) –ò–º–ø–æ—Ä—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
#   1) –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ + helpers
#   2) –ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
#   3) –ö–ª–∏–µ–Ω—Ç Google Sheets —Å —Ä–µ—Ç—Ä–∞—è–º–∏
#   4) –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (–ª–∏—á–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ + —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞)
#   5) –¢–µ–∫—Å—Ç—ã/–∫–Ω–æ–ø–∫–∏/CTA –∏ ¬´—Å–∞–Ω–∏—Ç–∞—Ä–∏—è¬ª –æ—Ç–≤–µ—Ç–æ–≤ (–±–µ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
#   6) –ê–Ω–∫–µ—Ç–∞ /rent (ConversationHandler)
#   7) –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç + —Ç—Ä–∏–≥–≥–µ—Ä—ã ¬´–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏¬ª
#   8) –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã /start /id /groupid
#   9) Webhook-—Ä–µ–∂–∏–º (Render): –±–∏–Ω–¥–∏–Ω–≥ –Ω–∞ $PORT –∏ URL WEBHOOK_BASE/webhook/<TOKEN>
#  10) Main bootstrap + –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
# ============================================================================
# –¢—Ä–µ–±—É–µ–º—ã–µ ENV:
#   TELEGRAM_BOT_TOKEN                ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
#   WEBHOOK_BASE                      ‚Äî –ø—É–±–ª–∏—á–Ω—ã–π https URL Render-—Å–µ—Ä–≤–∏—Å–∞
#   GOOGLE_SERVICE_ACCOUNT_JSON       ‚Äî JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
#   GOOGLE_SHEETS_DB_ID               ‚Äî ID —Ç–∞–±–ª–∏—Ü—ã
#   GOOGLE_SHEETS_SHEET_NAME          ‚Äî (–æ–ø—Ü.) –∏–º—è –ª–∏—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "Leads")
#   GROUP_CHAT_ID                     ‚Äî (–æ–ø—Ü.) ID —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø—ã (-100‚Ä¶)
#
# requirements.txt (–º–∏–Ω–∏–º—É–º):
#   python-telegram-bot>=20.7
#   gspread>=6.0.0
#   google-auth>=2.31.0
#   requests>=2.32.0
# ============================================================================

from __future__ import annotations

import asyncio
import json
import logging
import os
import random
import time
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import Any, Dict, Iterable, Optional, Tuple

import requests
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# ----------------------------------------------------------------------------
# 0) –õ–û–ì–ò
# ----------------------------------------------------------------------------

LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# ----------------------------------------------------------------------------
# 1) –ö–û–ù–°–¢–ê–ù–¢–´/–ù–ê–°–¢–†–û–ô–ö–ò
# ----------------------------------------------------------------------------

# ‚Äî‚Äî‚Äî –ë—Ä–µ–Ω–¥/—Å—Å—ã–ª–∫–∏ (–Ω–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã)
WEBSITE_URL: str = "https://www.cozy-asiath.com/"
TG_CHANNEL_MAIN: str = "https://t.me/SamuiRental"
TG_CHANNEL_VILLAS: str = "https://t.me/arenda_vill_samui"
INSTAGRAM_URL: str = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"

# ‚Äî‚Äî‚Äî –ú–µ–Ω–µ–¥–∂–µ—Ä: —Å—Å—ã–ª–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –∞–Ω–∫–µ—Ç—ã
MANAGER_TG_URL: str = "https://t.me/cozy_asia"  # @Cozy_asia
MANAGER_CHAT_ID: int = 5978240436               # –ª–∏—á–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

# ‚Äî‚Äî‚Äî –†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å ENV GROUP_CHAT_ID=-100‚Ä¶
GROUP_CHAT_ID: Optional[int] = None
if os.getenv("GROUP_CHAT_ID"):
    try:
        GROUP_CHAT_ID = int(os.getenv("GROUP_CHAT_ID"))
    except Exception:
        log.warning("ENV GROUP_CHAT_ID –∑–∞–¥–∞–Ω, –Ω–æ –Ω–µ int: %r", os.getenv("GROUP_CHAT_ID"))

# ‚Äî‚Äî‚Äî –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è /start (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
START_TEXT: str = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
    "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

# ‚Äî‚Äî‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è ¬´–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏¬ª (–ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç)
REALTY_KEYWORDS = {
    "–∞—Ä–µ–Ω–¥–∞","—Å–¥–∞—Ç—å","—Å–Ω–∏–º—É","—Å–Ω—è—Ç—å","–¥–æ–º","–≤–∏–ª–ª–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–Ω–∞—Ç—ã","—Å–ø–∞–ª—å–Ω–∏",
    "–ø–æ–∫—É–ø–∫–∞","–∫—É–ø–∏—Ç—å","–ø—Ä–æ–¥–∞–∂–∞","–ø—Ä–æ–¥–∞—Ç—å","–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å","–∫–æ–Ω–¥–æ","condo","—Ç–∞—É–Ω—Ö–∞—É—Å",
    "bungalow","bungalo","house","villa","apartment","rent","buy","sale","lease","property",
    "lamai","–ª–∞–º–∞–π","–±–æ–ø—Ö—É—Ç","–º–∞–µ–Ω–∞–º","—á–æ–Ω–≥ –º–æ–Ω","—á–∞–≤–µ–Ω–≥","bophut","maenam","choeng mon","chaweng"
}

# ‚Äî‚Äî‚Äî –§—Ä–∞–∑—ã-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ GPT –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å
BLOCK_PATTERNS = (
    "–º–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–Ω–∞ facebook","–≤ –≥—Ä—É–ø–ø–∞—Ö facebook",
    "–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö","marketplace","airbnb","booking","renthub","fazwaz",
    "dotproperty","list with","contact local agencies","facebook groups",
)

# ‚Äî‚Äî‚Äî –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã /rent
TYPE, BUDGET, AREA, BEDROOMS, NOTES = range(5)

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook/Render
DEFAULT_PORT = 10000


# ----------------------------------------------------------------------------
# Helpers
# ----------------------------------------------------------------------------

def env_required(name: str) -> str:
    """–î–æ—Å—Ç–∞—ë—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ."""
    val = os.getenv(name)
    if not val:
        raise RuntimeError(f"ENV {name} is required but missing")
    return val


def now_str() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M")


def mentions_realty(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in REALTY_KEYWORDS)


def sanitize_competitors(text: str) -> str:
    """–ï—Å–ª–∏ GPT –≤–¥—Ä—É–≥ —Å–æ–≤–µ—Ç—É–µ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ ‚Äî –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –Ω–∞—à CTA."""
    if not text:
        return text
    low = text.lower()
    if any(p in low for p in BLOCK_PATTERNS):
        msg, _ = build_cta_public()
        return "–ß—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, –ª—É—á—à–µ —Å—Ä–∞–∑—É –∫ –Ω–∞–º.\n\n" + msg
    return text


# ----------------------------------------------------------------------------
# 2) –ú–û–î–ï–õ–¨ –ó–ê–Ø–í–ö–ò
# ----------------------------------------------------------------------------

@dataclass
class Lead:
    created_at: str
    user_id: str
    username: str
    first_name: str
    type: str
    area: str
    budget: str
    bedrooms: str
    notes: str
    source: str = "telegram_bot"

    @classmethod
    def from_context(cls, update: Update, form: Dict[str, str]) -> "Lead":
        return cls(
            created_at=now_str(),
            user_id=str(update.effective_user.id),
            username=update.effective_user.username or "",
            first_name=update.effective_user.first_name or "",
            type=form.get("type", ""),
            area=form.get("area", ""),
            budget=form.get("budget", ""),
            bedrooms=form.get("bedrooms", ""),
            notes=form.get("notes", ""),
        )

    def as_row(self) -> list[str]:
        return [
            self.created_at,
            self.user_id,
            self.username,
            self.first_name,
            self.type,
            self.area,
            self.budget,
            self.bedrooms,
            self.notes,
            self.source,
        ]


# ----------------------------------------------------------------------------
# 3) GOOGLE SHEETS CLIENT c —Ä–µ—Ç—Ä–∞—è–º–∏
# ----------------------------------------------------------------------------

class SheetsClient:
    def __init__(self, sheet_id: str, sheet_name: str = "Leads"):
        self.sheet_id = sheet_id
        self.sheet_name = sheet_name
        self._gc = None
        self._ws = None

    def _authorize(self):
        if self._gc:
            return
        import gspread
        from google.oauth2.service_account import Credentials

        svc_json = env_required("GOOGLE_SERVICE_ACCOUNT_JSON")
        info = json.loads(svc_json)
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ],
        )
        self._gc = gspread.authorize(creds)

    def _open_ws(self):
        if self._ws:
            return
        self._authorize()
        sh = self._gc.open_by_key(self.sheet_id)
        try:
            self._ws = sh.worksheet(self.sheet_name)
        except Exception:
            self._ws = sh.add_worksheet(title=self.sheet_name, rows=1000, cols=20)
        # –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π ‚Äî –¥–æ–±–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        vals = self._ws.get_all_values()
        if not vals:
            self._ws.append_row(
                ["created_at","user_id","username","first_name","type","area","budget","bedrooms","notes","source"],
                value_input_option="USER_ENTERED"
            )

    def append_lead(self, lead: Lead, retries: int = 3, backoff: float = 1.0) -> Tuple[bool, Optional[str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, row_url)."""
        self._open_ws()
        for attempt in range(1, retries + 1):
            try:
                self._ws.append_row(lead.as_row(), value_input_option="USER_ENTERED")
                row_url = f"https://docs.google.com/spreadsheets/d/{self.sheet_id}/edit#gid={self._ws.id}"
                return True, row_url
            except Exception as e:
                log.warning("Sheets append failed (attempt %s/%s): %s", attempt, retries, e)
                time.sleep(backoff)
                backoff = min(backoff * 2, 8)
        return False, None


# ----------------------------------------------------------------------------
# 4) –ù–û–¢–ò–§–ò–ö–ê–¢–û–†
# ----------------------------------------------------------------------------

class Notifier:
    def __init__(self, manager_chat_id: Optional[int], group_chat_id: Optional[int]):
        self.manager_chat_id = manager_chat_id
        self.group_chat_id = group_chat_id

    async def notify_new_lead(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        lead: Lead,
        row_url: Optional[str],
    ) -> None:
        text = (
            "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–±–µ–∑_username'} "
            f"(ID: {update.effective_user.id})\n"
            f"–¢–∏–ø: {lead.type or '‚Äî'}\n"
            f"–†–∞–π–æ–Ω: {lead.area or '‚Äî'}\n"
            f"–ë—é–¥–∂–µ—Ç: {lead.budget or '‚Äî'}\n"
            f"–°–ø–∞–ª–µ–Ω: {lead.bedrooms or '‚Äî'}\n"
            f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {lead.notes or '‚Äî'}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {lead.created_at}"
        )
        if row_url:
            text += f"\nüóÇ –¢–∞–±–ª–∏—Ü–∞: {row_url}"

        targets = [cid for cid in (self.manager_chat_id, self.group_chat_id) if cid]
        for chat_id in targets:
            try:
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    disable_web_page_preview=True
                )
            except Exception as e:
                log.warning("Notify failed for %s: %s", chat_id, e)


# ----------------------------------------------------------------------------
# 5) CTA / –∫–Ω–æ–ø–∫–∏ / —Ç–µ–∫—Å—Ç—ã
# ----------------------------------------------------------------------------

def build_cta_public() -> Tuple[str, InlineKeyboardMarkup]:
    kb = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEBSITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_CHANNEL_MAIN)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_CHANNEL_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL)],
    ]
    msg = (
        "üèùÔ∏è –ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å:\n"
        f"‚Ä¢ –°–∞–π—Ç: {WEBSITE_URL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_CHANNEL_MAIN}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_CHANNEL_VILLAS}\n"
        f"‚Ä¢ Instagram: {INSTAGRAM_URL}\n\n"
        "‚úçÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞—è–≤–∫–∏ –≤ /rent ‚Äî "
        "—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    return msg, InlineKeyboardMarkup(kb)


def build_cta_with_manager() -> Tuple[str, InlineKeyboardMarkup]:
    msg, kb = build_cta_public()
    if MANAGER_TG_URL:
        kb.inline_keyboard.append([InlineKeyboardButton("üë§ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=MANAGER_TG_URL)])
        msg += "\n\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç –Ω–∏–∂–µ."
    return msg, kb


# ----------------------------------------------------------------------------
# 6) –ê–ù–ö–ï–¢–ê /rent
# ----------------------------------------------------------------------------

class RentFlow:
    """–î–∏–∞–ª–æ–≥ –ø–æ–¥–±–æ—Ä–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ Sheets –∏ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""

    def __init__(self, sheets: SheetsClient, notifier: Notifier):
        self.sheets = sheets
        self.notifier = notifier

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"] = {}
        await update.message.reply_text(
            "–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/5. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?"
        )
        return TYPE

    async def set_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"]["type"] = (update.message.text or "").strip()
        await update.message.reply_text("2/5. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
        return BUDGET

    async def set_budget(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"]["budget"] = (update.message.text or "").strip()
        await update.message.reply_text("3/5. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
        return AREA

    async def set_area(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"]["area"] = (update.message.text or "").strip()
        await update.message.reply_text("4/5. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
        return BEDROOMS

    async def set_bedrooms(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"]["bedrooms"] = (update.message.text or "").strip()
        await update.message.reply_text("5/5. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
        return NOTES

    async def finish(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        context.user_data["form"]["notes"] = (update.message.text or "").strip()
        form = context.user_data["form"]
        lead = Lead.from_context(update, form)

        ok, row_url = self.sheets.append_lead(lead)
        if not ok:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets")

        # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ (—Ä–∞–∑—Ä–µ—à–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        context.user_data["rental_form_completed"] = True

        # —à–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É/–≤ –≥—Ä—É–ø–ø—É
        await self.notifier.notify_new_lead(update, context, lead, row_url=row_url)

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Å—Å—ã–ª–∫–∏ + –º–µ–Ω–µ–¥–∂–µ—Ä
        msg, kb = build_cta_with_manager()
        await update.message.reply_text(
            "–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n" + msg,
            reply_markup=kb,
            disable_web_page_preview=True
        )
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
        return ConversationHandler.END


# ----------------------------------------------------------------------------
# 7) –°–í–û–ë–û–î–ù–´–ô –ß–ê–¢
# ----------------------------------------------------------------------------

async def call_gpt(user_text: str) -> str:
    """
    –ó–∞–≥–ª—É—à–∫–∞: –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–∏ —Å–≤–æ–π LLM.
    –ü–æ–ª–∏—Ç–∏–∫–∞ Cozy Asia: –Ω–µ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞/FB-–≥—Ä—É–ø–ø—ã/–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã.
    """
    return "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å ‚Äî –∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ."

async def free_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.effective_message.text or ""
    completed = bool(context.user_data.get("rental_form_completed", False))

    if mentions_realty(text):
        msg, kb = (build_cta_with_manager() if completed else build_cta_public())
        await update.effective_message.reply_text(
            msg, reply_markup=kb, disable_web_page_preview=True
        )
        return

    reply = sanitize_competitors(await call_gpt(text))
    await update.effective_message.reply_text(reply, disable_web_page_preview=True)


# ----------------------------------------------------------------------------
# 8) –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´
# ----------------------------------------------------------------------------

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à Chat ID: {update.effective_chat.id}\n–í–∞—à User ID: {update.effective_user.id}"
    )

async def cmd_groupid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Group chat ID: {update.effective_chat.id}")


# ----------------------------------------------------------------------------
# 9) WEBHOOK (Render)
# ----------------------------------------------------------------------------

def preflight_release_webhook(token: str):
    """
    –ù–∞ –≤—Å—è–∫–∏–π: —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–π webhook/–æ—á–µ—Ä–µ–¥—å, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π.
    –î–ª—è webhook —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
    """
    base = f"https://api.telegram.org/bot{token}"
    try:
        requests.post(f"{base}/deleteWebhook", params={"drop_pending_updates": True}, timeout=10)
        log.info("deleteWebhook -> OK")
    except Exception as e:
        log.warning("deleteWebhook error: %s", e)


# ----------------------------------------------------------------------------
# 10) MAIN
# ----------------------------------------------------------------------------

def build_application() -> Tuple[Application, RentFlow]:
    token = env_required("TELEGRAM_BOT_TOKEN")

    # Google Sheets –∫–ª–∏–µ–Ω—Ç
    sheet_id = env_required("GOOGLE_SHEETS_DB_ID")
    sheet_name = os.getenv("GOOGLE_SHEETS_SHEET_NAME", "Leads")
    sheets = SheetsClient(sheet_id=sheet_id, sheet_name=sheet_name)

    # –ù–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    notifier = Notifier(manager_chat_id=MANAGER_CHAT_ID, group_chat_id=GROUP_CHAT_ID)

    # RentFlow
    flow = RentFlow(sheets=sheets, notifier=notifier)

    # Telegram application
    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("groupid", cmd_groupid))

    # –ê–Ω–∫–µ—Ç–∞ /rent
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", flow.start)],
        states={
            TYPE:      [MessageHandler(filters.TEXT & ~filters.COMMAND, flow.set_type)],
            BUDGET:    [MessageHandler(filters.TEXT & ~filters.COMMAND, flow.set_budget)],
            AREA:      [MessageHandler(filters.TEXT & ~filters.COMMAND, flow.set_area)],
            BEDROOMS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, flow.set_bedrooms)],
            NOTES:     [MessageHandler(filters.TEXT & ~filters.COMMAND, flow.finish)],
        },
        fallbacks=[CommandHandler("cancel", flow.cancel)],
    )
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî —Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥/–¥–∏–∞–ª–æ–≥–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text_handler))

    return app, flow


def main():
    token = env_required("TELEGRAM_BOT_TOKEN")
    base_url = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL")
    if not base_url:
        raise RuntimeError("WEBHOOK_BASE (–∏–ª–∏ RENDER_EXTERNAL_URL) –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –ø—É–±–ª–∏—á–Ω—ã–π https URL Render-—Å–µ—Ä–≤–∏—Å–∞.")

    preflight_release_webhook(token)

    app, _ = build_application()

    port = int(os.getenv("PORT", str(DEFAULT_PORT)))  # Render –¥–∞—ë—Ç $PORT
    url_path = token                                   # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å = —Ç–æ–∫–µ–Ω
    webhook_url = f"{base_url.rstrip('/')}/webhook/{url_path}"

    log.info("Starting webhook on 0.0.0.0:%s | url=%s", port, webhook_url)

    # –ü–æ–¥–Ω–∏–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä webhook (PTB —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç aiohttp)
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{url_path}",
        webhook_url=webhook_url,
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
    )


if __name__ == "__main__":
    main()
