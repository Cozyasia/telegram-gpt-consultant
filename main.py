import os
import json
import base64
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

import dateparser
import gspread
from google.oauth2.service_account import Credentials

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, ContextTypes, CommandHandler,
    MessageHandler, ConversationHandler, filters, CallbackContext
)

# ============== –õ–û–ì–ò ==============
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger("cozyasia-bot")

# ============== ENV ==============
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").strip()
PORT = int(os.getenv("PORT", "10000"))

GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID") or os.getenv("GROUP_ID") or os.getenv("GROUP__CHAT_ID")
GROUP_CHAT_ID = int(GROUP_CHAT_ID) if GROUP_CHAT_ID else None

# –†–µ—Å—É—Ä—Å—ã (–∫–Ω–æ–ø–∫–∏)
WEBSITE_URL = os.getenv("WEBSITE_URL", "https://cozy.asia")
TG_LOTS_URL = os.getenv("TG_LOTS_URL", "https://t.me/SamuiRental")
TG_VILLAS_URL = os.getenv("TG_VILLAS_URL", "https://t.me/arenda_vill_samui")
INSTAGRAM_URL = os.getenv("INSTAGRAM_URL", "https://www.instagram.com/cozy.asia")

# Google Sheets
G_SHEET_ID = os.getenv("GOOGLE_SHEETS_LEADS_ID", "").strip()
G_SHEET_TAB = os.getenv("GOOGLE_SHEETS_LEADS_TAB", "Leads")
G_SA_RAW = (
    os.getenv("GOOGLE_CREDS_JSON") or
    os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON") or
    ""
)

SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

def _parse_service_account(raw: str) -> Optional[Dict[str, Any]]:
    if not raw:
        return None
    # –ü—Ä—è–º–æ–π JSON
    try:
        return json.loads(raw)
    except Exception:
        pass
    # base64
    try:
        dec = base64.b64decode(raw).decode("utf-8")
        return json.loads(dec)
    except Exception:
        pass
    # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ -> –¥–≤–æ–π–Ω—ã–µ
    try:
        return json.loads(raw.replace("'", '"'))
    except Exception:
        return None

def _get_gclient():
    try:
        info = _parse_service_account(G_SA_RAW)
        if not info:
            raise RuntimeError("Service account JSON not parsed")
        creds = Credentials.from_service_account_info(info, scopes=SCOPES)
        return gspread.authorize(creds)
    except Exception as e:
        logger.exception(f"[SHEETS] init error: {e}")
        return None

def write_lead_to_sheet(row: Dict[str, Any]) -> bool:
    if not G_SHEET_ID:
        logger.info("[SHEETS] skipped: no GOOGLE_SHEETS_LEADS_ID")
        return False
    gc = _get_gclient()
    if not gc:
        return False
    try:
        sh = gc.open_by_key(G_SHEET_ID)
        ws = sh.worksheet(G_SHEET_TAB)
    except Exception:
        try:
            ws = sh.add_worksheet(title=G_SHEET_TAB, rows="1000", cols="20")
        except Exception as e:
            logger.exception(f"[SHEETS] open sheet error: {e}")
            return False
    try:
        values = [
            row.get("created_at", ""),
            row.get("chat_id", ""),
            row.get("username", ""),
            row.get("location", ""),
            row.get("bedrooms", ""),
            row.get("budget", ""),
            row.get("people", ""),
            row.get("pets", ""),
            row.get("checkin", ""),
            row.get("checkout", ""),
            row.get("type", ""),
            row.get("notes", "")
        ]
        ws.append_row(values, value_input_option="USER_ENTERED")
        logger.info("[SHEETS] row appended")
        return True
    except Exception as e:
        logger.exception(f"[SHEETS] append error: {e}")
        return False

# ============== OPENAI (—á–µ—Ä–µ–∑ HTTPX –≤ SDK v1) ==============
# –¥–µ–ª–∞–µ–º –ª—ë–≥–∫—É—é –æ–±—ë—Ä—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å –ª–∏—à–Ω–µ–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
class AIGateway:
    def __init__(self, api_key: str, model: str):
        from openai import OpenAI
        self.client = OpenAI(api_key=api_key) if api_key else None
        self.model = model

    async def ask(self, user_text: str, user_id: int) -> str:
        if not self.client:
            # –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
            return ("–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –°–∞–º—É–∏: —Å–µ–∑–æ–Ω—ã, —Ä–∞–π–æ–Ω—ã, –ø–ª—è–∂–∏, –≥–¥–µ —Ç–∏—à–µ/–≤–µ—Ç–µ—Ä, "
                    "–∞ —Ç–∞–∫–∂–µ –ø–æ–º–æ—á—å —Å –∂–∏–ª—å—ë–º. –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ /rent.\n\n"
                    "–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n‚Ä¢ –°–∞–π—Ç: {w}\n‚Ä¢ –í—Å–µ –ª–æ—Ç—ã: {a}\n‚Ä¢ –í–∏–ª–ª—ã: {b}\n‚Ä¢ Instagram: {c}"
                    ).format(w=WEBSITE_URL, a=TG_LOTS_URL, b=TG_VILLAS_URL, c=INSTAGRAM_URL)

        system = (
            "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –°–∞–º—É–∏ (–ø–æ–≥–æ–¥–∞, —Å–µ–∑–æ–Ω—ã, —Ä–∞–π–æ–Ω—ã, –ø–ª—è–∂–∏, –±—ã—Ç). "
            "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –∂–∏–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —è–≤–Ω–æ –ø—Ä–æ –∞—Ä–µ–Ω–¥—É/–ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ /rent "
            "(–±—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä), –Ω–æ –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥. "
            "–í –∫–æ–Ω—Ü–µ –∏–Ω–æ–≥–¥–∞ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –¥–æ–±–∞–≤–ª—è–π –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Å–∞–π—Ç, –∫–∞–Ω–∞–ª—ã)."
        )
        try:
            resp = await asyncio.to_thread(
                self.client.chat.completions.create,
                model=self.model,
                messages=[
                    {"role": "system", "content": system},
                    {"role": "user", "content": user_text}
                ],
                temperature=0.5,
            )
            return resp.choices[0].message.content.strip()
        except Exception as e:
            logger.exception(f"[OPENAI] error: {e}")
            fallback = ("–ü–æ–∫–∞ –Ω–µ –º–æ–≥—É —Å–ø—Ä–æ—Å–∏—Ç—å —É –º–æ–¥–µ–ª–∏. –ù–æ —è –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å: "
                        "—Å–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ —Å–µ–∑–æ–Ω—ã/—Ä–∞–π–æ–Ω—ã/–ø–ª—è–∂–∏. –î–ª—è –ø–æ–¥–±–æ—Ä–∞ –∂–∏–ª—å—è ‚Äî /rent.\n"
                        f"–°–∞–π—Ç: {WEBSITE_URL}")
            return fallback

AI = AIGateway(OPENAI_API_KEY, OPENAI_MODEL)

# ============== UI ============
def resources_kb() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEBSITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_LOTS_URL)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_VILLAS_URL)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL)],
    ]
    return InlineKeyboardMarkup(kb)

WELCOME_TEXT = (
    "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n\n"
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cosy Asia Real Estate Bot¬ª\n\n"
    "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n"
    "üó£Ô∏è –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
    "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
    "üè† –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
    "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
    "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
    "üõ† –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É /rent.\n"
    "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)

# ============== –ê–ù–ö–ï–¢–ê (Conversation) ==============
TYPE, LOCATION, BEDROOMS, BUDGET, CHECKIN, CHECKOUT, NOTES = range(7)

def _clean_int(text: str) -> Optional[int]:
    try:
        return int("".join(ch for ch in text if ch.isdigit()))
    except Exception:
        return None

def _parse_date(text: str) -> Optional[str]:
    if not text:
        return None
    dt = dateparser.parse(text, settings={"DATE_ORDER": "DMY"})
    return dt.strftime("%Y-%m-%d") if dt else None

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_TEXT, reply_markup=resources_kb())

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"] = {}
    await update.message.reply_text(
        "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7:\n"
        "–ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
    )
    return TYPE

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = (update.message.text or "").strip()
    context.user_data["rent"]["type"] = t
    await update.message.reply_text("2/7: –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ —Ö–æ—Ç–∏—Ç–µ –∂–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ë–æ–ø—Ö—É—Ç, –ß–∞–≤–µ–Ω–≥)")
    return LOCATION

async def ask_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = (update.message.text or "").strip()
    context.user_data["rent"]["location"] = loc
    await update.message.reply_text("3/7: –°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ? (—á–∏—Å–ª–æ)")
    return BEDROOMS

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    b = _clean_int(update.message.text or "")
    context.user_data["rent"]["bedrooms"] = b or (update.message.text or "").strip()
    await update.message.reply_text("4/7: –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)? (—á–∏—Å–ª–æ)")
    return BUDGET

async def ask_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = _clean_int(update.message.text or "")
    context.user_data["rent"]["budget"] = budget or (update.message.text or "").strip()
    await update.message.reply_text("5/7: –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)")
    return CHECKIN

async def ask_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["checkin"] = _parse_date(update.message.text or "") or (update.message.text or "").strip()
    await update.message.reply_text("6/7: –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return CHECKOUT

async def ask_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["checkout"] = _parse_date(update.message.text or "") or (update.message.text or "").strip()
    await update.message.reply_text("7/7: –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞, —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –∏ —Ç. –ø.)")
    return NOTES

async def finish_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["notes"] = (update.message.text or "").strip()

    data = context.user_data.get("rent", {}).copy()
    # –î–æ–ø. –ø–æ–ª—è
    data["created_at"] = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    data["chat_id"] = update.effective_chat.id
    data["username"] = (update.effective_user.username or "")
    data.setdefault("people", "")
    data.setdefault("pets", "")
    lead_pretty = (
        "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"–¢–∏–ø: {data.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {data.get('location','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
        f"Check-in: {data.get('checkin','')}\n"
        f"Check-out: {data.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {data.get('notes','')}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(lead_pretty)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    if GROUP_CHAT_ID:
        try:
            user_link = f"@{data['username']}" if data["username"] else f"(ID: {data['chat_id']})"
            text = (
                "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
                f"–ö–ª–∏–µ–Ω—Ç: {user_link} (ID: {data['chat_id']})\n"
                f"–¢–∏–ø: {data.get('type','')}\n"
                f"–†–∞–π–æ–Ω: {data.get('location','')}\n"
                f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
                f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms','')}\n"
                f"Check-in: {data.get('checkin','')}\n"
                f"Check-out: {data.get('checkout','')}\n"
                f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {data.get('notes','')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M')} UTC"
            )
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=text)
        except Exception as e:
            logger.exception(f"[GROUP] notify error: {e}")

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    wrote = write_lead_to_sheet({
        "created_at": data.get("created_at",""),
        "chat_id": data.get("chat_id",""),
        "username": data.get("username",""),
        "location": data.get("location",""),
        "bedrooms": data.get("bedrooms",""),
        "budget": data.get("budget",""),
        "people": data.get("people",""),
        "pets": data.get("pets",""),
        "checkin": data.get("checkin",""),
        "checkout": data.get("checkout",""),
        "type": data.get("type",""),
        "notes": data.get("notes",""),
    })
    logger.info(f"[SHEETS] wrote={wrote}")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã ‚Äî –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    context.user_data.pop("rent", None)
    return ConversationHandler.END

async def cancel_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("rent", None)
    await update.message.reply_text("–û–∫–µ–π, –∞–Ω–∫–µ—Ç—É –∑–∞–∫—Ä—ã–ª. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ üôÇ")
    return ConversationHandler.END

# ====== –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç —Å –ò–ò ======
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text or ""
    answer = await AI.ask(msg, update.effective_user.id)
    # –ù–µ–±–æ–ª—å—à–∞—è –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏ —Å—Å—ã–ª–∫–∏ –Ω–µ —Å–ø–∞–º–∏–º –∫–∞–∂–¥—ã–π —Ä–∞–∑
    await update.message.reply_text(answer, reply_markup=resources_kb())

# ============== MAIN ==============
def build_application() -> Application:
    app: Application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Conversation –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º message handler
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", cmd_rent)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_bedrooms)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_checkin)],
            CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_checkout)],
            CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_notes)],
            NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish_form)],
        },
        fallbacks=[CommandHandler("cancel", cancel_form)],
        name="rent_form",
        persistent=False,
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(conv)

    # –æ–±—â–∏–π —á–∞—Ç ‚Äî –ø–æ—Å–ª–µ conv, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–±–∏–≤–∞–ª –∞–Ω–∫–µ—Ç—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))

    return app

async def run_webhook(app: Application):
    if not WEBHOOK_BASE:
        # fallback: polling (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–ª–∞–¥–∫–∏)
        logger.warning("WEBHOOK_BASE not set ‚Äî falling back to polling")
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        await idle_forever()
        return

    webhook_url = f"{WEBHOOK_BASE.rstrip('/')}/webhook"
    logger.info(f"==> run_webhook port={PORT} url='{webhook_url}'")
    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

async def idle_forever():
    # –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ polling
    while True:
        await asyncio.sleep(3600)

def main():
    app = build_application()
    try:
        asyncio.run(run_webhook(app))
    except RuntimeError as e:
        # –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´Cannot close a running event loop¬ª –ø—Ä–∏ –≥–æ—Ä—è—á–µ–º —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        logger.warning(f"RuntimeError caught: {e}")
        loop = asyncio.get_event_loop()
        loop.run_until_complete(run_webhook(app))

if __name__ == "__main__":
    main()
