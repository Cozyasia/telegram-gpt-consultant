import os
import json
import logging
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# ===== OpenAI =====
try:
    from openai import OpenAI
    OPENAI_CLIENT = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
except Exception:  # –Ω–µ –≤–∞–ª–∏–º –≤–µ—Å—å –±–æ—Ç, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
    OPENAI_CLIENT = None
    OPENAI_MODEL = None

# ===== Google Sheets =====
import gspread
from google.oauth2 import service_account

# ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")

# Render –¥–∞—ë—Ç RENDER_EXTERNAL_URL, –Ω–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å WEBHOOK_BASE –≤—Ä—É—á–Ω—É—é
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL")
if not WEBHOOK_BASE:
    raise RuntimeError("ENV WEBHOOK_BASE or RENDER_EXTERNAL_URL is required")
WEBHOOK_BASE = WEBHOOK_BASE.rstrip("/")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "/webhook").strip()  # –ø–æ —Ç–≤–æ–∏–º —Å–∫—Ä–∏–Ω–∞–º –ø—É—Ç—å –∏–º–µ–Ω–Ω–æ /webhook
PORT = int(os.getenv("PORT", "10000"))

# –¢–∞–±–ª–∏—Ü–∞/–≥—Ä—É–ø–ø–∞
GOOGLE_CREDS_JSON = os.getenv("GOOGLE_CREDS_JSON", "").strip()
SPREADSHEET_ID = os.getenv("GOOGLE_SPREADSHEET_ID", "").strip()
LEADS_SHEET_NAME = os.getenv("LEADS_SHEET_NAME", "Leads")
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä "-490897045913" (—á–∏—Å–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ –æ–∫)

# ===== –•–µ–ª–ø–µ—Ä—ã =====
def _gsheet_client():
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Google –ø–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–º—É GOOGLE_CREDS_JSON."""
    if not GOOGLE_CREDS_JSON or not SPREADSHEET_ID:
        return None, "GOOGLE_CREDS_JSON or GOOGLE_SPREADSHEET_ID is empty"
    try:
        info = json.loads(GOOGLE_CREDS_JSON)
        creds = service_account.Credentials.from_service_account_info(
            info,
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ],
        )
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SPREADSHEET_ID)
        ws = sh.worksheet(LEADS_SHEET_NAME)
        return ws, None
    except Exception as e:
        return None, f"Google auth/open error: {e}"

def _append_lead_row(row_values):
    ws, err = _gsheet_client()
    if err:
        log.warning("Sheets unavailable: %s", err)
        return False, err
    try:
        ws.append_row(row_values, value_input_option="USER_ENTERED")
        return True, None
    except Exception as e:
        log.warning("Sheets append error: %s", e)
        return False, str(e)

async def _notify_group(context: ContextTypes.DEFAULT_TYPE, text: str):
    if not GROUP_CHAT_ID:
        return
    try:
        await context.bot.send_message(
            chat_id=int(GROUP_CHAT_ID),
            text=text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
    except Exception as e:
        log.warning("Group notify error: %s", e)

async def _ask_openai(prompt: str) -> str:
    if not OPENAI_CLIENT or not OPENAI_MODEL:
        # –æ—Ñ—Ñ–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        return "–Ø –Ω–∞ —Å–≤—è–∑–∏! –ü–æ–∫–∞ —á—Ç–æ –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ OpenAI, –Ω–æ –ø–æ–¥—Å–∫–∞–∂—É –ø–æ –±–∞–∑–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –æ –°–∞–º—É–∏."
    try:
        resp = OPENAI_CLIENT.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system",
                 "content": (
                     "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia –ø–æ –°–∞–º—É–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
                     "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É—Ç–æ—á–Ω–∏—Ç—å."
                 )},
                {"role": "user", "content": prompt},
            ],
            temperature=0.3,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.warning("OpenAI error: %s", e)
        return "–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

# ===== –¢–µ–∫—Å—Ç—ã =====
WELCOME = (
    "<b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>\n"
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cozy Asia Real Estate Bot¬ª\n\n"
    "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n"
    "üó£ –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
    "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
    "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
    "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
    "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
    "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è ‚Äî –Ω–∞–ø–∏—à–∏ /rent"
)

# ===== –ê–Ω–∫–µ—Ç–∞ /rent =====
TYPE, AREA, BEDROOMS, BUDGET, CHECKIN, CHECKOUT, NOTES = range(7)

def _keyboard(options):
    return ReplyKeyboardMarkup([[o] for o in options], resize_keyboard=True, one_time_keyboard=True)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME, parse_mode=ParseMode.HTML)

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª. –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def rent_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"] = {}
    await update.message.reply_text(
        "1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ",
        reply_markup=_keyboard(["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º", "–í–∏–ª–ª–∞"]),
    )
    return TYPE

async def rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7: —Ä–∞–π–æ–Ω? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ß–∞–≤–µ–Ω–≥ –∏ —Ç.–ø.)", reply_markup=ReplyKeyboardRemove())
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["area"] = update.message.text.strip()
    await update.message.reply_text("3/7: —Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ? (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 2)")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["bedrooms"] = update.message.text.strip()
    await update.message.reply_text("4/7: –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö? (—á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 50000)")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["budget"] = update.message.text.strip()
    await update.message.reply_text("5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç.–ø.)")
    return CHECKIN

# –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –¥–∞—Ç: –æ—Ç–¥–∞—ë–º YYYY-MM-DD, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
import dateparser

def _to_date(s: str) -> str:
    try:
        dt = dateparser.parse(s, settings={"DATE_ORDER": "DMY"})
        if dt:
            return dt.date().isoformat()
    except Exception:
        pass
    return s.strip()

async def rent_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["checkin"] = _to_date(update.message.text)
    await update.message.reply_text("6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return CHECKOUT

async def rent_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["checkout"] = _to_date(update.message.text)
    await update.message.reply_text("7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return NOTES

async def rent_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rent"]["notes"] = update.message.text.strip()
    data = context.user_data["rent"]
    user = update.effective_user

    # 1) –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ)
    text_user = (
        "üìù <b>–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.</b>\n\n"
        f"–¢–∏–ø: {data.get('type')}\n"
        f"–†–∞–π–æ–Ω: {data.get('area')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget')}\n"
        f"Check-in: {data.get('checkin')}\n"
        f"Check-out: {data.get('checkout')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {data.get('notes') or '‚Äî'}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(text_user, parse_mode=ParseMode.HTML, reply_markup=ReplyKeyboardRemove())

    # 2) –ó–∞–ø–∏—Å—å –≤ Google Sheets
    created_at = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    row = [
        created_at,
        str(update.effective_chat.id),
        (user.username or "‚Äî"),
        data.get("area") or "‚Äî",
        data.get("bedrooms") or "‚Äî",
        data.get("budget") or "‚Äî",
        "",  # people (–≤ —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç—ã–º)
        "",  # pets
        data.get("checkin") or "‚Äî",
        data.get("checkout") or "‚Äî",
        data.get("type") or "‚Äî",
        data.get("notes") or "‚Äî",
    ]
    ok, err = _append_lead_row(row)
    if not ok:
        log.warning("Lead wasn't written to sheet: %s", err)

    # 3) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    uname = f"@{user.username}" if user.username else "‚Äî"
    group_text = (
        "<b>üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç: {uname} (ID: <code>{user.id}</code>)\n"
        f"–¢–∏–ø: {data.get('type')}\n"
        f"–†–∞–π–æ–Ω: {data.get('area')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms')}\n"
        f"Check-in: {data.get('checkin')}\n"
        f"Check-out: {data.get('checkout')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {data.get('notes') or '‚Äî'}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {created_at} UTC"
    )
    await _notify_group(context, group_text)

    # –æ—á–∏—â–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    context.user_data.pop("rent", None)
    return ConversationHandler.END

# ===== –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç (–≤–Ω–µ –∞–Ω–∫–µ—Ç—ã) =====
async def free_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    if not text.strip():
        return
    reply = await _ask_openai(text.strip())
    await update.message.reply_text(reply)

# ===== –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è =====
def build_application() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # /start /cancel
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))

    # Conversation /rent
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_entry)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkin)],
            CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkout)],
            NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_finish)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
        per_message=False,
    )
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ü–û–°–õ–ï –∞–Ω–∫–µ—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∞ –∏–º–µ–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_chat))

    return app

def main():
    app = build_application()

    webhook_url = f"{WEBHOOK_BASE}{WEBHOOK_PATH}"
    log.info("==> run_webhook port=%s url=%s", PORT, webhook_url)

    # run_webhook —Å–∞–º –ø–æ–¥–Ω–∏–º–µ—Ç aiohttp —Å–µ—Ä–≤–µ—Ä, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –≤–µ–±—Ö—É–∫ –∏ –±—É–¥–µ—Ç –∫—Ä—É—Ç–∏—Ç—å—Å—è
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url,
        url_path=WEBHOOK_PATH.lstrip("/"),  # —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –ª–æ–≤–∏—Ç—å /webhook
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
