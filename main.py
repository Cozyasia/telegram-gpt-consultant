import os
import re
import json
import base64
import logging
import asyncio
from datetime import datetime
from typing import Dict, Any, List, Optional

from dateutil import parser as dateparser

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters,
)

# --------- –õ–û–ì–ò ---------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# --------- –ö–û–ù–°–¢–ê–ù–¢–´/ENV ---------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# –í–ê–ñ–ù–û: —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ë–ï–ó –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ ‚Äî —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π https URL —Å–µ—Ä–≤–∏—Å–∞ Render
# –ø—Ä–∏–º–µ—Ä: https://telegram-gpt-consultant-d4yn.onrender.com
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")

MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID", "0") or 0)     # 5978240436
WORKGROUP_CHAT_ID = int(os.getenv("WORKGROUP_CHAT_ID", "0") or 0) # –Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890

GOOGLE_SHEETS_DB_ID = os.getenv("GOOGLE_SHEETS_DB_ID", "").strip()
GOOGLE_SERVICE_JSON_B64 = os.getenv("GOOGLE_SERVICE_JSON_B64", "").strip()

# –°—Å—ã–ª–∫–∏ Cozy Asia
SITE_URL = "https://cozy.asia"
TG_CHANNEL_LOTS = "https://t.me/SamuiRental"
TG_CHANNEL_VILLAS = "https://t.me/arenda_vill_samui"
INSTAGRAM_URL = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"

# GPT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
GPT_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
GPT_SYSTEM = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia –Ω–∞ –°–∞–º—É–∏. "
    "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∫–ª–∏–º–∞—Ç–∞, –±—ã—Ç–∞, —Ä–∞–π–æ–Ω–æ–≤, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ ‚Äî –æ—Ç–≤–µ—á–∞–π —Å–∞–º. "
    "–ï—Å–ª–∏ –≤–∏–¥–∏—à—å —è–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (–∞—Ä–µ–Ω–¥–∞/–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ –¥–æ–º–æ–≤, –≤–∏–ª–ª, –∫–≤–∞—Ä—Ç–∏—Ä, –ª–æ—Ç—ã, —Ü–µ–Ω—ã), "
    "—Ç–æ –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Å—É—Ç–∏ –∏ –¥–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ /rent —É Cozy Asia (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤)."
)

# --------- GOOGLE SHEETS (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---------
_gspread = None
def _init_gspread():
    global _gspread
    if _gspread is not None:
        return _gspread
    if not (GOOGLE_SHEETS_DB_ID and GOOGLE_SERVICE_JSON_B64):
        return None
    try:
        import gspread
        from google.oauth2.service_account import Credentials
        creds_dict = json.loads(base64.b64decode(GOOGLE_SERVICE_JSON_B64).decode("utf-8"))
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = gspread.authorize(creds)
        _gspread = client.open_by_key(GOOGLE_SHEETS_DB_ID).sheet1
        log.info("Google Sheets connected.")
        return _gspread
    except Exception as e:
        log.warning("Google Sheets init failed: %s", e)
        return None

def gs_append_row(values: List[Any]):
    sh = _init_gspread()
    if not sh:
        return
    try:
        sh.append_row(values, value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning("GS append error: %s", e)

# --------- GPT (OpenAI) ---------
_client = None
def _get_openai_client():
    global _client
    if _client is None and OPENAI_API_KEY:
        from openai import OpenAI
        _client = OpenAI(api_key=OPENAI_API_KEY)
    return _client

async def gpt_answer(prompt: str) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–µ—Ä–≥–∞–µ–º OpenAI. –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç,
    —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ ¬´–ø–∞–¥–∞–ª¬ª –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–ª –æ–±—ä—è—Å–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å.
    """
    client = _get_openai_client()
    if not client:
        return ("–°–µ–π—á–∞—Å —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. "
                "–ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–∞–∂–º–∏—Ç–µ /rent –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ.")

    def _call():
        try:
            resp = client.chat.completions.create(
                model=GPT_MODEL,
                messages=[
                    {"role": "system", "content": GPT_SYSTEM},
                    {"role": "user", "content": prompt},
                ],
                temperature=0.4,
                max_tokens=600,
            )
            return resp.choices[0].message.content.strip()
        except Exception as e:
            log.warning("OpenAI error: %s", e)
            return ""

    text = await asyncio.to_thread(_call)
    if not text:
        text = ("–£ –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ò–ò-–æ—Ç–≤–µ—Ç–æ–º. "
                "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /rent –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
    return text

# --------- –ü–†–û–ú–û-–ë–õ–û–ö ---------
def promo_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=SITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_CHANNEL_LOTS)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_CHANNEL_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL)],
    ])

PROMO_TEXT = (
    "üìù –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
    "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)

REALTY_PATTERNS = re.compile(
    r"(–¥–æ–º|–≤–∏–ª(–ª–∞|–ª—ã)|–∫–≤–∞—Ä—Ç–∏—Ä|–∞—Ä–µ–Ω–¥|—Å–Ω—è—Ç—å|—Å–¥–∞(—á|—ë)|–∫—É–ø–∏—Ç—å|–ø—Ä–æ–¥–∞—Ç—å|–ª–æ—Ç|—Ü–µ–Ω–∞|–±—é–¥–∂–µ—Ç|—Ç–∞—É–Ω—Ö–∞—É—Å)",
    re.IGNORECASE
)

# --------- –ê–ù–ö–ï–¢–ê ---------
(
    ST_TYPE,
    ST_BUDGET,
    ST_AREA,
    ST_BEDS,
    ST_CHECKIN,
    ST_CHECKOUT,
    ST_NOTES,
) = range(7)

def _parse_date_any(s: str) -> Optional[str]:
    try:
        dt = dateparser.parse(s, dayfirst=True, yearfirst=False, fuzzy=True)
        if not dt:
            return None
        return dt.strftime("%Y-%m-%d")
    except Exception:
        return None

def _msg_application_card(user_mention: str, data: Dict[str, Any], lots_count: int) -> str:
    return (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: {user_mention}\n"
        f"–¢–∏–ø: {data.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {data.get('area','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('beds','')}\n"
        f"–ó–∞–µ–∑–¥: {data.get('checkin','')}\n"
        f"–í—ã–µ–∑–¥: {data.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {data.get('notes','')}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}\n"
        f"–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤: {lots_count}\n"
        f"–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {TG_CHANNEL_LOTS} | {TG_CHANNEL_VILLAS}"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.set_my_commands([
        BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"),
        BotCommand("rent", "–ü–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å—ë"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
    ])
    text = (
        "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
        "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
        "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
        "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
    )
    await update.message.reply_text(text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("form", None)
    context.user_data.pop("form_done", None)
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END

# -- –ê–Ω–∫–µ—Ç–∞: —à–∞–≥–∏ --
async def rent_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"] = {}
    return await rent_ask_type(update, context)

async def rent_ask_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return ST_TYPE

async def rent_get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return ST_BUDGET

async def rent_get_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["budget"] = update.message.text.strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return ST_AREA

async def rent_get_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["area"] = update.message.text.strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return ST_BEDS

async def rent_get_beds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["beds"] = update.message.text.strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.12.2025).")
    return ST_CHECKIN

async def rent_get_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dt = _parse_date_any(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ-–¥—Ä—É–≥–æ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-01).")
        return ST_CHECKIN
    context.user_data["form"]["checkin"] = dt
    await update.message.reply_text("6/7. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞? (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return ST_CHECKOUT

async def rent_get_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dt = _parse_date_any(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ-–¥—Ä—É–≥–æ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2026-01-15).")
        return ST_CHECKOUT
    context.user_data["form"]["checkout"] = dt
    await update.message.reply_text(
        "7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)"
    )
    return ST_NOTES

async def rent_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["notes"] = update.message.text.strip()
    data = context.user_data["form"].copy()
    context.user_data["form_done"] = True  # —Ñ–ª–∞–≥ ‚Äî –∞–Ω–∫–µ—Ç—É –∑–∞–∫–æ–Ω—á–∏–ª–∏

    # ¬´–ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤¬ª (—Å–µ–π—á–∞—Å ‚Äî –∑–∞–≥–ª—É—à–∫–∞; –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –∏ –¥–∞–µ–º –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã)
    lots_count = 0

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≤ –≥—Ä—É–ø–ø—É
    mention = f"@{update.effective_user.username}" if update.effective_user.username else f"{update.effective_user.full_name}"
    card = _msg_application_card(mention, data, lots_count)

    if MANAGER_CHAT_ID:
        try:
            await context.bot.send_message(MANAGER_CHAT_ID, card)
        except Exception as e:
            log.warning("Notify manager failed: %s", e)
    if WORKGROUP_CHAT_ID:
        try:
            await context.bot.send_message(WORKGROUP_CHAT_ID, card)
        except Exception as e:
            log.warning("Notify workgroup failed: %s", e)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    try:
        gs_append_row([
            datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            update.effective_user.id,
            update.effective_user.username or "",
            data.get("type",""), data.get("area",""), data.get("budget",""),
            data.get("beds",""), data.get("checkin",""), data.get("checkout",""),
            data.get("notes",""),
        ])
    except Exception as e:
        log.warning("GS write failed: %s", e)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        "–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
        "–°–∫–æ—Ä–æ –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
        f"–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º —Å–µ–π—á–∞—Å –Ω–∞—à—ë–ª {lots_count} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ—Ç–æ–≤.\n"
        "–ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_CHANNEL_LOTS}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_CHANNEL_VILLAS}\n"
        f"‚Ä¢ Instagram: {INSTAGRAM_URL}"
    )
    await update.message.reply_text(text, reply_markup=promo_keyboard())
    return ConversationHandler.END

# --------- –°–í–û–ë–û–î–ù–û–ï –û–ë–©–ï–ù–ò–ï ---------
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∞–Ω–∫–µ—Ç—É ‚Äî –ø—Ä–æ—Å—Ç–æ —á–∞—Ç–∏–º—Å—è (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏)
    # ¬´–ó–∞—è–≤–∫–∞¬ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –≤–Ω—É—Ç—Ä–∏ rent_finish.
    try:
        reply = await gpt_answer(text)
    except Exception as e:
        log.warning("free_text gpt error: %s", e)
        reply = "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!"

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –¥–æ–ø–æ–ª–Ω–∏–º –ø—Ä–æ–º–æ-–±–ª–æ–∫–æ–º (–Ω–æ —á—É–∂–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ–º)
    if REALTY_PATTERNS.search(text):
        reply += "\n\n" + PROMO_TEXT

        await update.message.reply_text(reply, reply_markup=promo_keyboard())
    else:
        await update.message.reply_text(reply)

# --------- –°–¢–ê–†–¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---------
async def setup_webhook(app: Application):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫. –í v21 —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ü–£–¢–¨ '/'.
    –ü–æ—ç—Ç–æ–º—É webhook_url –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–æ–≤–Ω–æ WEBHOOK_BASE –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö '/webhook'.
    """
    if not WEBHOOK_BASE:
        log.warning("WEBHOOK_BASE is empty -> fallback to polling.")
        return False

    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        await app.bot.delete_webhook(drop_pending_updates=True)
        await asyncio.sleep(0.2)

        webhook_url = WEBHOOK_BASE  # –ø—É—Ç—å —Ç–æ–ª—å–∫–æ '/', –±–µ–∑ /webhook
        await app.bot.set_webhook(url=webhook_url, allowed_updates=Update.ALL_TYPES)
        log.info("Webhook set to: %s", webhook_url)
        return True
    except Exception as e:
        log.error("set_webhook failed: %s", e)
        return False

def build_application() -> Application:
    if not TELEGRAM_TOKEN:
        raise RuntimeError("ENV TELEGRAM_TOKEN is required")

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # /start, /cancel
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("cancel", cancel))

    # –ê–Ω–∫–µ—Ç–∞ /rent
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_entry)],
        states={
            ST_TYPE:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_type)],
            ST_BUDGET:  [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_budget)],
            ST_AREA:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_area)],
            ST_BEDS:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_beds)],
            ST_CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_checkin)],
            ST_CHECKOUT:[MessageHandler(filters.TEXT & ~filters.COMMAND, rent_get_checkout)],
            ST_NOTES:   [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_finish)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    application.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏ —Ä–∞–Ω–µ–µ)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))

    return application

async def run():
    app = build_application()
    ok = await setup_webhook(app)

    if ok:
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä PTB (—Å–ª—É—à–∞–µ—Ç '/')
        port = int(os.getenv("PORT", "10000"))
        log.info("==> Starting webhook server on 0.0.0.0:%s | url=%s", port, WEBHOOK_BASE)
        await app.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=WEBHOOK_BASE,
        )
    else:
        # –§–æ–ª–ª–±–µ–∫ ‚Äî polling (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        log.warning("Falling back to polling mode.")
        await app.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    try:
        asyncio.run(run())
    except (KeyboardInterrupt, SystemExit):
        pass

if __name__ == "__main__":
    main()
