import os
import logging
import asyncio
from typing import Iterable, List, Dict

import requests
from telegram import Update
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger("cozyasia-bot")

# ---------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ----------
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]                       # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
CHANNEL_ID = os.environ.get("CHANNEL_ID")                      # '@–∏–º—è_–∫–∞–Ω–∞–ª–∞' –∏–ª–∏ '-100...'
ADMIN_IDS = {int(x) for x in os.getenv("ADMIN_IDS", "").replace(" ", "").split(",") if x}

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")                   # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OPENAI_TIMEOUT = int(os.getenv("OPENAI_TIMEOUT", "30"))

# ---------- –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ò–ò ----------
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî Cozy Asia Consultant, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —á—ë—Ç–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ/–ø–æ–∫—É–ø–∫–µ "
    "–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –°–∞–º—É–∏ (–¢–∞–∏–ª–∞–Ω–¥). –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
    "–î–∞–π –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ: —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ä–∞–π–æ–Ω—ã, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –º–æ—Ä—è, —Å—Ä–æ–∫–∏, –¥–µ–ø–æ–∑–∏—Ç—ã, –∫–æ–º–∏—Å—Å–∏–∏. "
    "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –∑–∞–¥–∞–π 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. "
    "–ò–∑–±–µ–≥–∞–π –≤–æ–¥—ã, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –Ω–µ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
)

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ----------
def is_admin(user_id: int) -> bool:
    # –µ—Å–ª–∏ ADMIN_IDS –ø—É—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∏–º –≤—Å–µ–º
    return (not ADMIN_IDS) or (user_id in ADMIN_IDS)

def chunk_text(text: str, limit: int = 4096):
    for i in range(0, len(text), limit):
        yield text[i:i+limit]

def _chat_completion(messages: List[Dict]) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ Chat Completions API (—á–µ—Ä–µ–∑ requests)."""
    if not OPENAI_API_KEY:
        raise RuntimeError("OPENAI_API_KEY is not set")
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENAI_MODEL,
        "messages": messages,
        "temperature": 0.3,
        "max_tokens": 500,
    }
    resp = requests.post(
        "https://api.openai.com/v1/chat/completions",
        headers=headers,
        json=payload,
        timeout=OPENAI_TIMEOUT,
    )
    resp.raise_for_status()
    data = resp.json()
    return (data["choices"][0]["message"]["content"] or "").strip()

async def ai_answer(prompt: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –ø–æ–≤–µ—Ä—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ HTTP."""
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": prompt},
    ]
    return await asyncio.to_thread(_chat_completion, messages)

# ---------- –•–ï–ù–î–õ–ï–†–´ /start, /post, —Ñ–æ—Ç–æ-–≤-–∫–∞–Ω–∞–ª ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /post <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω CHANNEL_ID)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —É–ª–µ—Ç–∏—Ç –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—á—É –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Cozy Asia"
    )

async def post_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not is_admin(update.effective_user.id):
        await update.message.reply_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if not CHANNEL_ID:
        await update.message.reply_text("‚ùóÔ∏èCHANNEL_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render.")
        return

    text = " ".join(context.args).strip()
    if not text and update.message and update.message.reply_to_message:
        src = update.message.reply_to_message
        text = (src.text or src.caption or "").strip()

    if not text:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /post <—Ç–µ–∫—Å—Ç> (–∏–ª–∏ –æ—Ç–≤–µ—Ç—å /post –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
        return

    sent = 0
    for chunk in chunk_text(text):
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=chunk,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False,
        )
        sent += 1
    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ({sent} —Å–æ–æ–±—â.).")

async def photo_to_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not is_admin(update.effective_user.id):
        return
    if not CHANNEL_ID or not update.message:
        return
    try:
        if update.message.photo:
            file_id = update.message.photo[-1].file_id
            caption = update.message.caption or ""
            await context.bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
        elif update.message.document and update.message.document.mime_type and update.message.document.mime_type.startswith("image/"):
            file_id = update.message.document.file_id
            caption = update.message.caption or ""
            await context.bot.send_document(
                chat_id=CHANNEL_ID,
                document=file_id,
                caption=caption,
                parse_mode=ParseMode.HTML,
            )
            await update.message.reply_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª")
        await update.message.reply_text(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# ---------- –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† –¢–ï–ö–°–¢–ê (–ò–ò-–û–¢–í–ï–¢) ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    user_text = update.message.text.strip()

    # –∏–Ω–¥–∏–∫–∞—Ü–∏—è "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    except Exception:
        pass

    if not OPENAI_API_KEY:
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã —è –æ—Ç–≤–µ—á–∞–ª –∫–∞–∫ –ò–ò-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –¥–æ–±–∞–≤—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é OPENAI_API_KEY –≤ Render ‚Üí Environment, "
            "–∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å."
        )
        return

    try:
        reply = await ai_answer(user_text)
    except requests.exceptions.HTTPError as e:
        logger.exception("OpenAI HTTP error")
        code = getattr(e.response, "status_code", "?")
        await update.message.reply_text(f"‚ùóÔ∏èOpenAI HTTP error ({code}). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    except Exception as e:
        logger.exception("OpenAI error")
        await update.message.reply_text(f"‚ùóÔ∏è–û—à–∏–±–∫–∞ –ò–ò: {e}")
        return

    for chunk in chunk_text(reply):
        await update.message.reply_text(chunk)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:", exc_info=context.error)

# ---------- –¢–û–ß–ö–ê –í–•–û–î–ê ----------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã ‚Äî —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∏—á–∫–∏
    app.add_handler(CommandHandler("start", start, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("post", post_to_channel, filters=filters.ChatType.PRIVATE))

    # –§–æ—Ç–æ ‚Üí –∫–∞–Ω–∞–ª (–ª–∏—á–∫–∞)
    app.add_handler(MessageHandler(filters.PHOTO & filters.ChatType.PRIVATE, photo_to_channel))
    app.add_handler(MessageHandler(filters.Document.IMAGE & filters.ChatType.PRIVATE, photo_to_channel))

    # –¢–µ–∫—Å—Ç ‚Üí –æ—Ç–≤–µ—Ç –ò–ò (–≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.add_error_handler(error_handler)

    logger.info("üöÄ Starting polling‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
