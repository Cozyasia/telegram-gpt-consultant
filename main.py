# main.py
# Cozy Asia Bot ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ (–≤–µ–±—Ö—É–∫ –¥–ª—è Render)
# –¢—Ä–µ–±—É–µ–º—ã–µ ENV:
# TELEGRAM_TOKEN, WEBHOOK_BASE (–Ω–∞–ø—Ä–∏–º–µ—Ä https://<service>.onrender.com),
# WEBHOOK_PATH (–Ω–∞–ø—Ä–∏–º–µ—Ä /webhook), PORT (–Ω–∞–ø—Ä–∏–º–µ—Ä 10000),
# GROUP_CHAT_ID (—á–∏—Å–ª–æ, –∏–¥ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º),
# GOOGLE_CREDS_JSON (–ø–æ–ª–Ω—ã–π JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É),
# GOOGLE_SHEET_ID –∏–ª–∏ GOOGLE_SHEET_URL (–ª—é–±–æ–π –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö)

import os
import json
import asyncio
from datetime import datetime
from typing import Optional, Tuple

import gspread
from google.oauth2.service_account import Credentials

from dateutil import parser as dateparser  # —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–≤–æ—ë–º –ø—Ä–æ–µ–∫—Ç–µ
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ==========================
# –¢–ï–ö–°–¢–´: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥
# ==========================

START_TEXT = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/rent</b> ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ "
    "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

BRAND_BLOCK = (
    "üîó <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ Cozy Asia</b>\n"
    "üåê –°–∞–π—Ç: <a href=\"https://cozy.asia\">cozy.asia</a>\n"
    "üì£ –ö–∞–Ω–∞–ª –æ –≤–∏–ª–ª–∞—Ö –∏ –∂–∏–∑–Ω–∏ –Ω–∞ –°–∞–º—É–∏: <a href=\"https://t.me/cozy_asia\">@cozy_asia</a>\n"
    "üìú –ì–∞–π–¥—ã –∏ –ø—Ä–∞–≤–∏–ª–∞: <a href=\"https://t.me/cozy_asia_rules\">@cozy_asia_rules</a>\n"
    "üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: <a href=\"https://t.me/cozy_asia_manager\">@cozy_asia_manager</a>\n\n"
    "‚ú≥Ô∏è –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–±–æ—Ä—É ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ <b>/rent</b>."
)

CTA_SHORT = (
    "üß≠ –ù—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è? –ù–∞–ø–∏—à–∏—Ç–µ <b>/rent</b> ‚Äî –∑–∞–ø—É—â—É –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É "
    "–∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)

# ==========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# ==========================

RENT_FIELDS = [
    ("type",      "1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? <i>(–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)</i>"),
    ("area",      "2/7: —Ä–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è –Ω–∞ –°–∞–º—É–∏ <i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ë–æ–ø—É—Ç‚Ä¶)</i>"),
    ("bedrooms",  "3/7: —Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ?"),
    ("budget",    "4/7: –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–∑–∞ –º–µ—Å—è—Ü)"),
    ("checkin",   "5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ <i>(–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025‚Ä¶)</i>"),
    ("checkout",  "6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ <i>(–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)</i>"),
    ("notes",     "7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è <i>(–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞‚Ä¶)</i>"),
]

def env(name: str, default: Optional[str] = None) -> str:
    v = os.getenv(name, default)
    if v is None:
        raise RuntimeError(f"ENV {name} is required")
    return v

def try_parse_date(text: str) -> str:
    try:
        dt = dateparser.parse(text, dayfirst=True)
        if dt:
            return dt.strftime("%Y-%m-%d")
    except Exception:
        pass
    return text.strip()

# ==========================
# GOOGLE SHEETS
# ==========================

_gs_client = None
_gs_worksheet = None

def gs_init_once() -> None:
    """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã (–æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å)."""
    global _gs_client, _gs_worksheet
    if _gs_client and _gs_worksheet:
        return

    creds_json_raw = env("GOOGLE_CREDS_JSON")
    # –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ ¬´–æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π JSON¬ª, —Ç–∞–∫ –∏ —Å \n ‚Äî –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É —Ç–µ–±—è –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å
    creds_info = json.loads(creds_json_raw)

    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    credentials = Credentials.from_service_account_info(creds_info, scopes=scopes)
    _gs_client = gspread.authorize(credentials)

    sheet_id = os.getenv("GOOGLE_SHEET_ID")
    sheet_url = os.getenv("GOOGLE_SHEET_URL")
    if sheet_id:
        sh = _gs_client.open_by_key(sheet_id)
    elif sheet_url:
        sh = _gs_client.open_by_url(sheet_url)
    else:
        raise RuntimeError("ENV GOOGLE_SHEET_ID or GOOGLE_SHEET_URL is required")

    # –≤–∫–ª–∞–¥–∫–∞ Leads (—Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç)
    try:
        _gs_worksheet = sh.worksheet("Leads")
    except gspread.exceptions.WorksheetNotFound:
        _gs_worksheet = sh.add_worksheet(title="Leads", rows=1000, cols=20)
        _gs_worksheet.append_row([
            "created_at", "chat_id", "username",
            "type", "area", "bedrooms", "budget",
            "checkin", "checkout", "notes"
        ])

def gs_append_lead(row: list) -> None:
    gs_init_once()
    _gs_worksheet.append_row(row, value_input_option="USER_ENTERED")

# ==========================
# –•–ï–ù–î–õ–ï–†–´
# ==========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id=chat_id, text=START_TEXT, parse_mode=ParseMode.HTML, disable_web_page_preview=True
    )
    await context.bot.send_message(
        chat_id=chat_id, text=BRAND_BLOCK, parse_mode=ParseMode.HTML, disable_web_page_preview=True
    )

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["rent"] = {"step": 0, "data": {}}
    await update.message.reply_text(RENT_FIELDS[0][1], parse_mode=ParseMode.HTML)

def is_in_rent(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return "rent" in context.user_data and isinstance(context.user_data["rent"], dict)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (update.message.text or "").strip()

    # –í –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã
    if is_in_rent(context):
        rent = context.user_data["rent"]
        step = rent.get("step", 0)
        data = rent.get("data", {})

        key, prompt = RENT_FIELDS[step]
        value = text

        # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—ã
        if key in ("checkin", "checkout"):
            value = try_parse_date(value)

        data[key] = value
        rent["data"] = data
        step += 1

        if step < len(RENT_FIELDS):
            rent["step"] = step
            context.user_data["rent"] = rent
            await update.message.reply_text(RENT_FIELDS[step][1], parse_mode=ParseMode.HTML)
            return

        # –∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -> —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
        context.user_data.pop("rent", None)
        await finalize_rent(update, context, data)
        return

    # –°–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –≤—ã–≤–æ–¥–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π CTA + –±—Ä–µ–Ω–¥-–±–ª–æ–∫
    await update.message.reply_text(CTA_SHORT, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    await update.message.reply_text(BRAND_BLOCK, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def finalize_rent(update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict) -> None:
    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        created_at = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        chat_id = update.effective_chat.id
        username = (update.effective_user.username or "‚Äî")
        row = [
            created_at, str(chat_id), username,
            data.get("type", ""), data.get("area", ""), data.get("bedrooms", ""),
            data.get("budget", ""), data.get("checkin", ""), data.get("checkout", ""),
            data.get("notes", "")
        ]
        gs_append_lead(row)
        saved_ok = True
    except Exception as e:
        saved_ok = False

    # 2) –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ä–µ–∑—é–º–µ –∑–∞—è–≤–∫–∏)
    card = (
        "üìù <b>–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.</b>\n\n"
        f"–¢–∏–ø: {data.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {data.get('area','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
        f"Check-in: {data.get('checkin','')}\n"
        f"Check-out: {data.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {data.get('notes','')}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(card, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    # 3) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    try:
        group_id = int(env("GROUP_CHAT_ID"))
        uname = update.effective_user.username
        mention = f"@{uname}" if uname else "@‚Äî"
        created_utc = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

        group_msg = (
            "üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia</b>\n"
            f"–ö–ª–∏–µ–Ω—Ç: {mention} (ID: {update.effective_user.id})\n"
            f"–¢–∏–ø: {data.get('type','')}\n"
            f"–†–∞–π–æ–Ω: {data.get('area','')}\n"
            f"–ë—é–¥–∂–µ—Ç: <a href=\"https://t.me/{uname}\">{data.get('budget','')}</a>\n" if uname else
            f"–ë—é–¥–∂–µ—Ç: {data.get('budget','')}\n"
        )
        group_msg += (
            f"–°–ø–∞–ª–µ–Ω: {data.get('bedrooms','')}\n"
            f"Check-in: {data.get('checkin','')}\n"
            f"Check-out: {data.get('checkout','')}\n"
            f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {data.get('notes','')}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {created_utc}"
        )

        await context.bot.send_message(
            chat_id=group_id,
            text=group_msg,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    except Exception:
        pass

# ==========================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö (WEBHOOK)
# ==========================

def build_application() -> Application:
    token = env("TELEGRAM_TOKEN")
    app: Application = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rent", cmd_rent))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    return app

def run_webhook(app: Application) -> None:
    base = env("WEBHOOK_BASE").rstrip("/")
    path = env("WEBHOOK_PATH", "/webhook")
    port = int(env("PORT", "10000"))
    webhook_url = f"{base}{path}"

    # run_webhook —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –≤–µ–±—Ö—É–∫–∞
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url=webhook_url,
        webhook_path=path,
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
    )

if __name__ == "__main__":
    application = build_application()
    run_webhook(application)
