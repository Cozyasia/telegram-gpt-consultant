# main.py ‚Äî Cozy Asia Bot (ptb v20+, webhook/Render)
# -----------------------------------------------------------------------------
# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
# - /start (–Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ)
# - /rent –∞–Ω–∫–µ—Ç–∞: type ‚Üí budget ‚Üí area ‚Üí bedrooms ‚Üí checkin ‚Üí checkout ‚Üí notes
#   -> –∑–∞–ø–∏—Å—å –≤ Google Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
#   -> –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É (deep search)
#   -> —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (+—Å—Å—ã–ª–∫–∞ –Ω–∞ —à–∏—Ç, +—Å—Å—ã–ª–∫–∏-–ø–æ–¥–±–æ—Ä–∫–∏)
# - –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ OpenAI: –æ–±—â–µ–Ω–∏–µ –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã, –Ω–æ –ø—Ä–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
#   ‚Äî –º—è–≥–∫–æ –≤–µ–¥—ë–º –∫ /rent –∏ –≤–∞—à–∏–º —Ä–µ—Å—É—Ä—Å–∞–º; –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
# - –°–ª—É–∂–µ–±–Ω—ã–µ: /id /groupid /diag
# - Webhook –¥–ª—è Render: 0.0.0.0:$PORT, URL = WEBHOOK_BASE/webhook/<BOT_TOKEN>

from __future__ import annotations
import os, json, logging, time, urllib.parse
from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Tuple

import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, MessageHandler, filters
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(level=LOG_LEVEL,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s")
log = logging.getLogger("cozyasia-bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–ê–®–ò –°–°–´–õ–ö–ò/–ö–û–ù–¢–ê–ö–¢–´
WEBSITE_URL       = "https://www.cozy-asiath.com/"
TG_CHANNEL_MAIN   = "https://t.me/SamuiRental"
TG_CHANNEL_VILLAS = "https://t.me/arenda_vill_samui"
INSTAGRAM_URL     = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"
MAIN_CH_USERNAME  = "SamuiRental"
VILLAS_CH_USERNAME= "arenda_vill_samui"

MANAGER_TG_URL  = "https://t.me/cozy_asia"   # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã
MANAGER_CHAT_ID = 5978240436                 # –ª–∏—á–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

GROUP_CHAT_ID: Optional[int] = None          # —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞
_env_group = os.getenv("GROUP_CHAT_ID")
if _env_group:
    try:
        GROUP_CHAT_ID = int(_env_group)
    except Exception:
        log.warning("GROUP_CHAT_ID –∏–∑ ENV –Ω–µ int: %r", _env_group)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–ï–ö–°–¢–´
START_TEXT = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
    "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

REALTY_KEYWORDS = {
    "–∞—Ä–µ–Ω–¥–∞","—Å–¥–∞—Ç—å","—Å–Ω–∏–º—É","—Å–Ω—è—Ç—å","–¥–æ–º","–≤–∏–ª–ª–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–Ω–∞—Ç—ã","—Å–ø–∞–ª—å–Ω–∏",
    "–ø–æ–∫—É–ø–∫–∞","–∫—É–ø–∏—Ç—å","–ø—Ä–æ–¥–∞–∂–∞","–ø—Ä–æ–¥–∞—Ç—å","–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å","–∫–æ–Ω–¥–æ","condo","—Ç–∞—É–Ω—Ö–∞—É—Å",
    "bungalow","bungalo","house","villa","apartment","rent","buy","sale","lease","property",
    "lamai","–ª–∞–º–∞–π","–±–æ–ø—Ö—É—Ç","–º–∞–µ–Ω–∞–º","—á–æ–Ω–≥ –º–æ–Ω","—á–∞–≤–µ–Ω–≥","bophut","maenam","choeng mon","chaweng"
}

BLOCK_PATTERNS = (
    "–º–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–Ω–∞ facebook","–≤ –≥—Ä—É–ø–ø–∞—Ö facebook",
    "–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö","marketplace","airbnb","booking","renthub","fazwaz",
    "dotproperty","list with","contact local agencies","facebook groups",
)

TYPE, BUDGET, AREA, BEDROOMS, CHECKIN, CHECKOUT, NOTES = range(7)
DEFAULT_PORT = 10000

def now_str() -> str:
    return datetime.now().strftime("%Y-%m-%d %H:%M")

def env_required(name: str) -> str:
    val = os.getenv(name)
    if not val:
        raise RuntimeError(f"ENV {name} is required but missing")
    return val

def mentions_realty(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in REALTY_KEYWORDS)

def sanitize_competitors(text: str) -> str:
    if not text:
        return text
    low = text.lower()
    if any(p in low for p in BLOCK_PATTERNS):
        msg, _ = build_cta_public()
        return "–ß—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, –ª—É—á—à–µ —Å—Ä–∞–∑—É –∫ –Ω–∞–º.\n\n" + msg
    return text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ CTA
def build_cta_public() -> tuple[str, InlineKeyboardMarkup]:
    kb = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEBSITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_CHANNEL_MAIN)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_CHANNEL_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL)],
    ]
    msg = (
        "üèùÔ∏è –ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å:\n"
        f"‚Ä¢ –°–∞–π—Ç: {WEBSITE_URL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_CHANNEL_MAIN}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_CHANNEL_VILLAS}\n"
        f"‚Ä¢ Instagram: {INSTAGRAM_URL}\n\n"
        "‚úçÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞—è–≤–∫–∏ –≤ /rent ‚Äî "
        "—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    return msg, InlineKeyboardMarkup(kb)

def build_cta_with_manager() -> tuple[str, InlineKeyboardMarkup]:
    msg, kb = build_cta_public()
    kb.inline_keyboard.append([InlineKeyboardButton("üë§ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=MANAGER_TG_URL)])
    msg += "\n\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç –Ω–∏–∂–µ."
    return msg, kb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–∏–ø-–ø–æ–∏—Å–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º (–±–µ–∑ —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
def build_channel_search_links(area: str, bedrooms: str, budget: str) -> list[tuple[str, str]]:
    q = " ".join(x for x in [area, f"{bedrooms} —Å–ø–∞–ª—å–Ω" if bedrooms else "", budget] if x).strip()
    qenc = urllib.parse.quote(q) if q else ""
    links = []
    if MAIN_CH_USERNAME:
        links.append((f"–ü–æ–¥–±–æ—Ä–∫–∞ –≤ {MAIN_CH_USERNAME}", f"https://t.me/s/{MAIN_CH_USERNAME}?q={qenc}"))
    if VILLAS_CH_USERNAME:
        links.append((f"–ü–æ–¥–±–æ—Ä–∫–∞ –≤ {VILLAS_CH_USERNAME}", f"https://t.me/s/{VILLAS_CH_USERNAME}?q={qenc}"))
    return links

def format_links_md(pairs: list[tuple[str,str]]) -> str:
    if not pairs: return "‚Äî"
    return "\n".join([f"‚Ä¢ {title}: {url}" for title, url in pairs])

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ú–æ–¥–µ–ª—å –∑–∞—è–≤–∫–∏
@dataclass
class Lead:
    created_at: str
    user_id: str
    username: str
    first_name: str
    type: str
    area: str
    budget: str
    bedrooms: str
    checkin: str
    checkout: str
    notes: str
    source: str = "telegram_bot"

    @classmethod
    def from_context(cls, update: Update, form: dict) -> "Lead":
        return cls(
            created_at=now_str(),
            user_id=str(update.effective_user.id),
            username=update.effective_user.username or "",
            first_name=update.effective_user.first_name or "",
            type=form.get("type",""),
            area=form.get("area",""),
            budget=form.get("budget",""),
            bedrooms=form.get("bedrooms",""),
            checkin=form.get("checkin",""),
            checkout=form.get("checkout",""),
            notes=form.get("notes",""),
        )

    def as_row(self) -> list[str]:
        return [
            self.created_at, self.user_id, self.username, self.first_name,
            self.type, self.area, self.budget, self.bedrooms,
            self.checkin, self.checkout, self.notes, self.source
        ]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
class SheetsClient:
    def __init__(self, sheet_id: Optional[str], sheet_name: str = "Leads"):
        self.sheet_id = sheet_id
        self.sheet_name = sheet_name
        self._gc = None
        self._ws = None

    def _ready(self) -> bool:
        return bool(self.sheet_id)

    def _authorize(self):
        if self._gc: return
        import gspread
        from google.oauth2.service_account import Credentials
        svc_json = env_required("GOOGLE_SERVICE_ACCOUNT_JSON")
        info = json.loads(svc_json)
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ],
        )
        self._gc = gspread.authorize(creds)

    def _open_ws(self):
        if self._ws: return
        self._authorize()
        sh = self._gc.open_by_key(self.sheet_id)
        try:
            self._ws = sh.worksheet(self.sheet_name)
        except Exception:
            self._ws = sh.add_worksheet(title=self.sheet_name, rows=1000, cols=26)
        if not self._ws.get_all_values():
            self._ws.append_row(
                ["created_at","user_id","username","first_name","type","area","budget",
                 "bedrooms","checkin","checkout","notes","source","proposed_links"],
                value_input_option="USER_ENTERED"
            )

    def append_lead(self, lead: Lead, proposed_links_text: str) -> Tuple[bool, Optional[str]]:
        if not self._ready():
            log.warning("Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (GOOGLE_SHEETS_DB_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å.")
            return False, None
        try:
            self._open_ws()
            row = lead.as_row() + [proposed_links_text]
            self._ws.append_row(row, value_input_option="USER_ENTERED")
            row_url = f"https://docs.google.com/spreadsheets/d/{self.sheet_id}/edit#gid={self._ws.id}"
            return True, row_url
        except Exception as e:
            log.exception("Sheets append failed: %s", e)
            return False, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def notify_staff(update: Update, context: ContextTypes.DEFAULT_TYPE,
                       lead: Lead, row_url: Optional[str], proposed_pairs: list[tuple[str,str]]):
    links_text = format_links_md(proposed_pairs)
    text = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–±–µ–∑_username'} "
        f"(ID: {update.effective_user.id})\n"
        f"–¢–∏–ø: {lead.type or '‚Äî'}\n"
        f"–†–∞–π–æ–Ω: {lead.area or '‚Äî'}\n"
        f"–ë—é–¥–∂–µ—Ç: {lead.budget or '‚Äî'}\n"
        f"–°–ø–∞–ª–µ–Ω: {lead.bedrooms or '‚Äî'}\n"
        f"–ó–∞–µ–∑–¥: {lead.checkin or '‚Äî'}  |  –í—ã–µ–∑–¥: {lead.checkout or '‚Äî'}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {lead.notes or '‚Äî'}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {lead.created_at}\n\n"
        f"üîé –ü–æ–¥–±–æ—Ä–∫–∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º:\n{links_text}"
    )
    if row_url:
        text += f"\nüóÇ –¢–∞–±–ª–∏—Ü–∞: {row_url}"

    for chat_id in (MANAGER_CHAT_ID, GROUP_CHAT_ID):
        if not chat_id: continue
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
        except Exception as e:
            log.warning("Notify failed for %s: %s", chat_id, e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ OpenAI (—Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç)
from openai import OpenAI, APIConnectionError, RateLimitError, APIStatusError

SYSTEM_PROMPT = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia. –û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—â–µ—Å—Ç–≤—É. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –°–∞–º—É–∏ ‚Äî "
    "–º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ /rent –∏ –¥–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã. "
    "–ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–≤–µ—Ç—É–π –¥—Ä—É–≥–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞, –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã –∏–ª–∏ FB-–≥—Ä—É–ø–ø—ã. "
    "–ù–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã (–ø–æ–≥–æ–¥–∞, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç, –≥–¥–µ –ø–æ–µ—Å—Ç—å, —à–∫–æ–ª—ã, –≤–∏–∑—ã –∏ —Ç.–¥.) –æ—Ç–≤–µ—á–∞–π —Å–≤–æ–±–æ–¥–Ω–æ."
)

_openai_client: Optional[OpenAI] = None
def _get_openai() -> OpenAI:
    global _openai_client
    if _openai_client is None:
        key = os.getenv("OPENAI_API_KEY")
        if not key:
            log.error("OPENAI_API_KEY is missing in ENV")
            raise RuntimeError("OPENAI_API_KEY missing")
        _openai_client = OpenAI(api_key=key)
        log.info("OpenAI client initialized")
    return _openai_client

async def call_gpt(user_text: str) -> str:
    try:
        client = _get_openai()
        resp = client.responses.create(
            model="gpt-4o-mini",
            input=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": user_text.strip()},
            ],
            max_output_tokens=400,
            timeout=20,
        )
        text = (resp.output_text or "").strip()
        return sanitize_competitors(text)
    except (RateLimitError, APIStatusError, APIConnectionError) as e:
        log.warning("OpenAI API error: %s", e)
    except Exception as e:
        log.exception("OpenAI unexpected error: %s", e)
    return "–ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–ù–ö–ï–¢–ê /rent
def _valid_date(s: str) -> bool:
    try:
        datetime.strptime(s.strip(), "%Y-%m-%d")
        return True
    except Exception:
        return False

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"] = {}
    await update.message.reply_text("–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return TYPE

async def rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["type"] = (update.message.text or "").strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["budget"] = (update.message.text or "").strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["area"] = (update.message.text or "").strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["bedrooms"] = (update.message.text or "").strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ **–∑–∞–µ–∑–¥–∞** (YYYY-MM-DD)?")
    return CHECKIN

async def rent_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    val = (update.message.text or "").strip()
    if not _valid_date(val):
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-11-05).")
        return CHECKIN
    context.user_data["form"]["checkin"] = val
    await update.message.reply_text("6/7. –î–∞—Ç–∞ **–≤—ã–µ–∑–¥–∞** (YYYY-MM-DD)?")
    return CHECKOUT

async def rent_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    val = (update.message.text or "").strip()
    if not _valid_date(val):
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-12-03).")
        return CHECKOUT
    context.user_data["form"]["checkout"] = val
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return NOTES

async def rent_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["notes"] = (update.message.text or "").strip()
    form = context.user_data["form"]
    lead = Lead.from_context(update, form)

    # –ü–æ–¥–±–æ—Ä–∫–∏ –ø–æ –≤–∞—à–∏–º –∫–∞–Ω–∞–ª–∞–º (deep search)
    proposed_pairs = build_channel_search_links(form.get("area",""), form.get("bedrooms",""), form.get("budget",""))
    proposed_text_for_sheet = format_links_md(proposed_pairs)

    # –ó–∞–ø–∏—Å—å –≤ Sheets (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    sheets: SheetsClient = context.application.bot_data.get("sheets")
    row_url = None
    if isinstance(sheets, SheetsClient):
        ok, row_url = sheets.append_lead(lead, proposed_text_for_sheet)
        if not ok:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ Google Sheets")

    # –û—Ç–º–µ—Ç–∫–∞ ‚Äî —Ñ–æ—Ä–º—É –ø—Ä–æ—à—ë–ª (–æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ CTA)
    context.user_data["rental_form_completed"] = True

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –≤ –≥—Ä—É–ø–ø—É (—Å —Å—Å—ã–ª–∫–∞–º–∏ –∏ —à–∏—Ç–æ–º)
    await notify_staff(update, context, lead, row_url=row_url, proposed_pairs=proposed_pairs)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Å—Å—ã–ª–∫–∏ + –º–µ–Ω–µ–¥–∂–µ—Ä
    human_links = "\n".join([f"‚Ä¢ {t}: {u}" for t,u in proposed_pairs]) or "‚Äî"
    msg_user, kb = build_cta_with_manager()
    msg_user = (
        "–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n\n"
        "üîé –Ø —É–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ–ª, —á—Ç–æ –µ—Å—Ç—å –Ω–∞ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö. –í–æ—Ç –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n"
        f"{human_links}\n\n" + msg_user
    )
    await update.message.reply_text(msg_user, reply_markup=kb, disable_web_page_preview=True)
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
async def free_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.effective_message.text or ""
    completed = bool(context.user_data.get("rental_form_completed", False))

    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–≤–Ω–æ ¬´–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å¬ª ‚Äî –≤–µ–¥—ë–º –≤ –Ω–∞—à—É –≤–æ—Ä–æ–Ω–∫—É
    if mentions_realty(text):
        msg, kb = (build_cta_with_manager() if completed else build_cta_public())
        await update.effective_message.reply_text(msg, reply_markup=kb, disable_web_page_preview=True)
        return

    # –õ—é–±—ã–µ –ù–ï–î–ï–í–ï–ñ–ò–ú–û–°–¢–ù–´–ï –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π GPT-–æ—Ç–≤–µ—Ç
    reply = await call_gpt(text)
    await update.effective_message.reply_text(reply, disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à Chat ID: {update.effective_chat.id}\n–í–∞—à User ID: {update.effective_user.id}"
    )

async def cmd_groupid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Group chat ID: {update.effective_chat.id}")

async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    openai_set = bool(os.getenv("OPENAI_API_KEY"))
    sheets_id = os.getenv("GOOGLE_SHEETS_DB_ID") or "‚Äî"
    group_id = os.getenv("GROUP_CHAT_ID") or str(GROUP_CHAT_ID or "‚Äî")
    txt = (
        "üîé –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ OPENAI_API_KEY: {'OK' if openai_set else 'MISSING'}\n"
        f"‚Ä¢ GOOGLE_SHEETS_DB_ID: {sheets_id}\n"
        f"‚Ä¢ GROUP_CHAT_ID: {group_id}\n"
        f"‚Ä¢ WEBHOOK_BASE: {os.getenv('WEBHOOK_BASE') or os.getenv('RENDER_EXTERNAL_URL') or '‚Äî'}"
    )
    await update.message.reply_text(txt)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Webhook utils
def preflight_release_webhook(token: str):
    base = f"https://api.telegram.org/bot{token}"
    try:
        requests.post(f"{base}/deleteWebhook", params={"drop_pending_updates": True}, timeout=10)
        log.info("deleteWebhook -> OK")
    except Exception as e:
        log.warning("deleteWebhook error: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Bootstrap
def build_application() -> Application:
    token = env_required("TELEGRAM_BOT_TOKEN")

    sheet_id = os.getenv("GOOGLE_SHEETS_DB_ID")
    sheet_name = os.getenv("GOOGLE_SHEETS_SHEET_NAME", "Leads")
    sheets = SheetsClient(sheet_id=sheet_id, sheet_name=sheet_name)

    app = ApplicationBuilder().token(token).build()
    app.bot_data["sheets"] = sheets

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("groupid", cmd_groupid))
    app.add_handler(CommandHandler("diag", cmd_diag))

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            AREA:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkin)],
            CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkout)],
            NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_finish)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
    )
    app.add_handler(conv)

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text_handler))
    return app

def main():
    token = env_required("TELEGRAM_BOT_TOKEN")
    base_url = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL")
    if not base_url:
        raise RuntimeError("WEBHOOK_BASE (–∏–ª–∏ RENDER_EXTERNAL_URL) –Ω–µ –∑–∞–¥–∞–Ω.")
    preflight_release_webhook(token)

    app = build_application()

    port = int(os.getenv("PORT", str(DEFAULT_PORT)))
    url_path = token
    webhook_url = f"{base_url.rstrip('/')}/webhook/{url_path}"

    log.info("Starting webhook on 0.0.0.0:%s | url=%s", port, webhook_url)
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{url_path}",
        webhook_url=webhook_url,
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
