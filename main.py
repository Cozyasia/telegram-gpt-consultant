# main.py
import os
import json
import logging
import datetime as dt
from typing import Dict, Any, Optional

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ConversationHandler, CallbackContext, filters
)

# ====== OpenAI ======
try:
    from openai import OpenAI
except Exception:
    OpenAI = None  # —á—Ç–æ–±—ã –ª–æ–≥–∏—á–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ –ø–æ–¥—Ç—è–Ω—É–ª—Å—è

# ====== Google Sheets ======
import gspread

# ====== –î–∞—Ç—ã (–º—è–≥–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥) ======
try:
    # –Ω–∞–º–Ω–æ–≥–æ –Ω–∞–¥—ë–∂–Ω–µ–µ ‚Äî —É–º–µ–µ—Ç "01.12.2025", "2026/01/01", "1 Jan 2026", –∏ —Ç.–ø.
    import dateutil.parser as dparser
    _HAS_DATEUTIL = True
except Exception:
    _HAS_DATEUTIL = False

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("cozyasia-bot")

# ----------------- ENV -----------------
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")

BASE_URL         = os.getenv("BASE_URL") or os.getenv("WEBHOOK_BASE")
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "/webhook")
PORT             = int(os.getenv("PORT", "10000"))
GROUP_CHAT_ID    = int(os.getenv("GROUP_CHAT_ID", "0"))

OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY") or os.getenv("OPENAI_APIKEY") or os.getenv("OPENAI_KEY")
OPENAI_PROJECT   = os.getenv("OPENAI_PROJECT")
OPENAI_MODEL     = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

GS_JSON          = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
GS_SHEET_ID      = os.getenv("GOOGLE_SHEETS_DB_ID")
LEADS_SHEET_NAME = os.getenv("GOOGLE_SHEETS_LEADS_SHEET", "Leads")

# ----------------- OpenAI –∫–ª–∏–µ–Ω—Ç -----------------
def get_openai_client() -> Optional[Any]:
    if not OpenAI or not OPENAI_API_KEY:
        return None
    try:
        if OPENAI_PROJECT:
            return OpenAI(api_key=OPENAI_API_KEY, project=OPENAI_PROJECT)
        return OpenAI(api_key=OPENAI_API_KEY)
    except Exception as e:
        logger.exception("OpenAI init failed: %s", e)
        return None

oa_client = get_openai_client()

# ----------------- Google Sheets -----------------
def _get_ws():
    if not GS_JSON:
        raise RuntimeError("ENV GOOGLE_SERVICE_ACCOUNT_JSON is required")
    if not GS_SHEET_ID:
        raise RuntimeError("ENV GOOGLE_SHEETS_DB_ID is required")

    try:
        creds_info = json.loads(GS_JSON)
    except json.JSONDecodeError:
        raise RuntimeError("GOOGLE_SERVICE_ACCOUNT_JSON: invalid JSON")

    gc = gspread.service_account_from_dict(creds_info)
    sh = gc.open_by_key(GS_SHEET_ID)

    try:
        ws = sh.worksheet(LEADS_SHEET_NAME)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=LEADS_SHEET_NAME, rows=2000, cols=20)
        ws.append_row([
            "created_at", "chat_id", "username",
            "location", "bedrooms", "budget",
            "people", "pets",
            "check_in", "check_out",
            "notes", "type"
        ])
    return ws

def _ensure_headers(ws, wanted_headers):
    current = ws.row_values(1)
    to_add  = [h for h in wanted_headers if h not in current]
    if to_add:
        ws.update([current + to_add], '1:1')

def save_lead_to_sheet(lead: Dict[str, Any]) -> None:
    ws = _get_ws()
    wanted_headers = [
        "created_at", "chat_id", "username",
        "location", "bedrooms", "budget",
        "people", "pets",
        "check_in", "check_out",
        "notes", "type"
    ]
    _ensure_headers(ws, wanted_headers)
    headers = ws.row_values(1)
    row = []
    for h in headers:
        val = lead.get(h, "")
        if isinstance(val, (dt.date, dt.datetime)):
            val = val.strftime("%Y-%m-%d")
        row.append(val)
    ws.append_row(row, value_input_option="USER_ENTERED")

# ----------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ -----------------
def friendly_links_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url="https://cozy.asia")],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url="https://t.me/SamuiRental")],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url="https://t.me/arenda_vill_samui")],
        [InlineKeyboardButton("üì∑ Instagram", url="https://www.instagram.com/cozy.asia")]
    ])

PROMO_TEXT = (
    "üîß –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
    "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ (–¥–æ–º–∞/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã/–≤–∏–ª–ª—ã) –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º. "
    "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π.\n\n"
    "‚Ä¢ –°–∞–π—Ç: https://cozy.asia\n"
    "‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: https://t.me/SamuiRental\n"
    "‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: https://t.me/arenda_vill_samui\n"
    "‚Ä¢ Instagram: https://www.instagram.com/cozy.asia"
)

def parse_date_loose(text: str) -> Optional[str]:
    text = (text or "").strip()
    if not text:
        return None
    if _HAS_DATEUTIL:
        try:
            d = dparser.parse(text, dayfirst=True, yearfirst=False, fuzzy=True)
            return d.strftime("%Y-%m-%d")
        except Exception:
            pass
    # –§–æ–ª–ª–±–µ–∫ ‚Äî –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    fmts = [
        "%Y-%m-%d", "%d.%m.%Y", "%d-%m-%Y", "%d/%m/%Y",
        "%Y.%m.%d", "%Y/%m/%d", "%m/%d/%Y", "%m-%d-%Y",
        "%d.%m.%y", "%d-%m-%y", "%Y.%m.%d", "%Y/%m/%d",
        "%Y%m%d"
    ]
    for f in fmts:
        try:
            d = dt.datetime.strptime(text, f)
            return d.strftime("%Y-%m-%d")
        except Exception:
            continue
    return None

# ----------------- –°–¢–ï–ô–¢–´ –ê–ù–ö–ï–¢–´ -----------------
(Q_TYPE, Q_BUDGET, Q_AREA, Q_BEDROOMS, Q_CHECKIN, Q_CHECKOUT, Q_NOTES) = range(7)

def start_text() -> str:
    return (
        "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
        "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
        "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
        "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
    )

# ----------------- –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î -----------------
async def on_start(update: Update, context: CallbackContext):
    await update.effective_chat.send_message(start_text())
    await update.effective_chat.send_message(PROMO_TEXT, reply_markup=friendly_links_keyboard())

async def on_cancel(update: Update, context: CallbackContext):
    context.user_data.pop("lead", None)
    context.user_data["in_form"] = False
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")

# --- –ê–Ω–∫–µ—Ç–∞ ---
async def rent_start(update: Update, context: CallbackContext):
    context.user_data["lead"] = {}
    context.user_data["in_form"] = True
    await update.message.reply_text("–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return Q_TYPE

async def q_type(update: Update, context: CallbackContext):
    context.user_data["lead"]["type"] = update.message.text.strip().title()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return Q_BUDGET

async def q_budget(update: Update, context: CallbackContext):
    context.user_data["lead"]["budget"] = "".join(ch for ch in update.message.text if ch.isdigit()) or update.message.text
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return Q_AREA

async def q_area(update: Update, context: CallbackContext):
    context.user_data["lead"]["location"] = update.message.text.strip().title()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return Q_BEDROOMS

async def q_bedrooms(update: Update, context: CallbackContext):
    context.user_data["lead"]["bedrooms"] = "".join(ch for ch in update.message.text if ch.isdigit()) or update.message.text
    await update.message.reply_text("5/7. –î–∞—Ç–∞ **–∑–∞–µ–∑–¥–∞**? –ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä., 01.12.2025).")
    return Q_CHECKIN

async def q_checkin(update: Update, context: CallbackContext):
    parsed = parse_date_loose(update.message.text)
    if not parsed:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚Äî –º–æ–∂–Ω–æ 01.12.2025 –∏–ª–∏ 2025-12-01.")
        return Q_CHECKIN
    context.user_data["lead"]["check_in"] = parsed
    await update.message.reply_text("6/7. –î–∞—Ç–∞ **–≤—ã–µ–∑–¥–∞**?")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: CallbackContext):
    parsed = parse_date_loose(update.message.text)
    if not parsed:
        await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚Äî –º–æ–∂–Ω–æ 01.01.2026 –∏–ª–∏ 2026-01-01.")
        return Q_CHECKOUT
    context.user_data["lead"]["check_out"] = parsed
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: CallbackContext):
    context.user_data["lead"]["notes"] = update.message.text.strip()

    # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é –∑–∞—è–≤–∫—É
    u = update.effective_user
    lead = context.user_data["lead"]
    lead_full = {
        "created_at": dt.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
        "chat_id": str(u.id),
        "username": (u.username or "").strip(),
        "location": lead.get("location", ""),
        "bedrooms": lead.get("bedrooms", ""),
        "budget": lead.get("budget", ""),
        "people": "",  # –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –¥–æ–±–∞–≤—å –≤–æ–ø—Ä–æ—Å
        "pets": "",
        "check_in": lead.get("check_in", ""),
        "check_out": lead.get("check_out", ""),
        "notes": lead.get("notes", ""),
        "type": lead.get("type", "")
    }

    # 1) –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    if GROUP_CHAT_ID != 0:
        text = (
            "üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia*\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{u.username or '‚Äî'} (ID: {u.id})\n"
            f"–¢–∏–ø: {lead_full['type'] or '‚Äî'}\n"
            f"–†–∞–π–æ–Ω: {lead_full['location'] or '‚Äî'}\n"
            f"–ë—é–¥–∂–µ—Ç: {lead_full['budget'] or '‚Äî'}\n"
            f"–°–ø–∞–ª–µ–Ω: {lead_full['bedrooms'] or '‚Äî'}\n"
            f"Check-in: {lead_full['check_in'] or '‚Äî'}  |  Check-out: {lead_full['check_out'] or '‚Äî'}\n"
            f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {lead_full['notes'] or '‚Äî'}\n"
            f"–°–æ–∑–¥–∞–Ω–æ: {lead_full['created_at']} UTC"
        )
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=text,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.exception("Failed to notify group: %s", e)

    # 2) –ü–∏—à–µ–º –≤ Google Sheet
    try:
        save_lead_to_sheet(lead_full)
    except Exception as e:
        logger.exception("Failed to save lead to sheet: %s", e)

    # 3) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        "–ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ ‚úÖ –Ø –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî –æ–Ω –≤ –∫—É—Ä—Å–µ –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è.\n"
        "–°–µ–π—á–∞—Å –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n\n" + PROMO_TEXT,
        reply_markup=friendly_links_keyboard()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∞–Ω–∫–µ—Ç—ã; –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω–∞
    context.user_data["in_form"] = False
    context.user_data["form_completed"] = True
    return ConversationHandler.END

# ----------------- GPT: —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ -----------------
SYSTEM_PROMPT = (
    "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –°–∞–º—É–∏ –∏ –∂–∏–ª—å—é –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, "
    "–¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏–∫—É (–∫–ª–∏–º–∞—Ç, —Å–µ–∑–æ–Ω—ã, –≤–µ—Ç—Ä–∞ –ø–æ –ø–ª—è–∂–∞–º, –≥–¥–µ —à—Ç–∏–ª—å, —Ä–∞–π–æ–Ω—ã, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, "
    "–ª–æ–≥–∏—Å—Ç–∏–∫–∞, —à–∫–æ–ª–∞/—Å–∞–¥, —Å–µ—Ä—Ñ/–∫–∞–π—Ç –∏ —Ç.–ø.).\n\n"
    "–ü—Ä–∞–≤–∏–ª–∞ —Ä–µ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞:\n"
    "‚Äî –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –≤–µ–¥—ë—Ç –∫ –∞—Ä–µ–Ω–¥–µ/–ø–æ–∫—É–ø–∫–µ/–ø–æ–∏—Å–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—É–∂–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. "
    "–í–µ–∂–ª–∏–≤–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –≤ —Ä–µ—Å—É—Ä—Å—ã Cozy Asia: —Å–∞–π—Ç, 2 —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞, Instagram –∏ –∞–Ω–∫–µ—Ç—É /rent. "
    "‚Äî –ü—Ä–∏ –ª—é–±–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø–æ–¥–±–æ—Ä–∞ –∂–∏–ª—å—è –¥–æ–±–∞–≤–ª—è–π –∫–æ—Ä–æ—Ç–∫–∏–π CTA: '–ª—É—á—à–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å /rent ‚Äî –ø–æ–¥–±–µ—Ä—É –ª–æ—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É'.\n"
)

async def gpt_reply(text: str, history: Optional[list] = None) -> str:
    if not oa_client:
        # —Ñ–æ–ª–ª–±–µ–∫: –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç + CTA
        return (
            "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–≥–æ–¥–æ–π, –≤–µ—Ç—Ä–∞–º–∏ –ø–æ –ø–ª—è–∂–∞–º, —Ä–∞–π–æ–Ω–∞–º–∏ –∏ –∂–∏–ª—å—ë–º.\n\n" + PROMO_TEXT
        )
    try:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        if history:
            messages.extend(history)
        messages.append({"role": "user", "content": text})

        resp = oa_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=messages,
            temperature=0.5
        )
        out = resp.choices[0].message.content.strip()
        # –î–æ–±–∞–≤–∏–º –∫–æ—Ä–æ—Ç–∫–∏–π CTA –º—è–≥–∫–æ –∏ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤–æ
        return out + "\n\n" + "üëâ –ï—Å–ª–∏ —Ä–µ—á—å –æ –∂–∏–ª—å–µ: –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å /rent ‚Äî —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    except Exception as e:
        logger.exception("OpenAI error: %s", e)
        return (
            "–Ø –Ω–∞ —Å–≤—è–∑–∏. –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
            "–ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ.\n\n" + PROMO_TEXT
        )

# –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –≤–Ω–µ –∞–Ω–∫–µ—Ç—ã ‚Üí GPT
async def on_text(update: Update, context: CallbackContext):
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî –∏–≥–Ω–æ—Ä–∏–º –∏ –∂–¥—ë–º ConversationHandler
    if context.user_data.get("in_form"):
        await update.message.reply_text("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–≤—Ç–æ—Ä–∏–º –≤–æ–ø—Ä–æ—Å?")
        return

    reply = await gpt_reply(update.message.text, history=None)
    await update.message.reply_text(reply, reply_markup=friendly_links_keyboard())

# ----------------- MAIN / WEBHOOK -----------------
def build_application() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            Q_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_area)],
            Q_BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
            Q_CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", on_cancel)],
        allow_reentry=True
    )

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("cancel", on_cancel))
    app.add_handler(conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    return app

def main():
    app = build_application()

    if not BASE_URL:
        raise RuntimeError("ENV BASE_URL (–∏–ª–∏ WEBHOOK_BASE) is required")

    base = BASE_URL.rstrip("/")
    path = WEBHOOK_PATH.rstrip("/")
    secret = TELEGRAM_TOKEN  # –¥–µ–ª–∞–µ–º –ø—É—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    full_url = f"{base}{path}/{secret}"

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å—Ç–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä PTB
    logger.info("==> Starting webhook on 0.0.0.0:%s | url=%s", PORT, full_url)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=full_url,
        secret_token=None,  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
