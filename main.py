# -*- coding: utf-8 -*-
"""
Cozy Asia Bot ‚Äî –µ–¥–∏–Ω—ã–π main.py (PTB v21)
- Webhook (Render) –ò–õ–ò polling –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è asyncio).
- GPT small talk –≤–Ω–µ –æ–ø—Ä–æ—Å–∞ (/rent) ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å OPENAI_API_KEY.
- –ê–Ω–∫–µ—Ç–∞ /rent: —Ä–∞–π–æ–Ω ‚Üí —Å–ø–∞–ª—å–Ω–∏ ‚Üí –±—é–¥–∂–µ—Ç ‚Üí –ª—é–¥–∏ ‚Üí –ø–∏—Ç–æ–º—Ü—ã ‚Üí –±–∞—Å—Å–µ–π–Ω ‚Üí —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –∏–º—è ‚Üí –ø–æ–∂–µ–ª–∞–Ω–∏—è.
- –ó–∞–ø–∏—Å—å –ª–∏–¥–∞ –≤ Google Sheets (–ª–∏—Å—Ç 'Leads'), –ª–æ—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –≤ 'Listings'.

ENV (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞):
  TELEGRAM_BOT_TOKEN   (–æ–±—è–∑.)
  BASE_URL             (–¥–ª—è Render, –Ω–∞–ø—Ä. https://telegram-gpt-consultant-xxxx.onrender.com)
  WEBHOOK_PATH         (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /webhook)
  PUBLIC_CHANNEL       (—é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @)
  GREETING_MESSAGE     (–Ω–µ–æ–±—è–∑.)
  MANAGER_CHAT_ID      (–Ω–µ–æ–±—è–∑., int)
  OPENAI_API_KEY       (–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ GPT)
  GPT_MODEL            (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o-mini)

  GOOGLE_SHEET_ID      (–¥–ª—è Sheets)
  GOOGLE_CREDS_JSON    (–ø–æ–ª–Ω—ã–π JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞)
  LOG_LEVEL            (INFO/DEBUG)
"""

import os
import re
import json
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

import requests
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, ConversationHandler,
    MessageHandler, ContextTypes, filters
)

# ---------- –õ–û–ì–ò ----------
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
)
log = logging.getLogger("cozy_bot")

# ---------- ENV ----------
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
BASE_URL = os.environ.get("BASE_URL", "").rstrip("/")
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/webhook")
PUBLIC_CHANNEL = os.environ.get("PUBLIC_CHANNEL", "").lstrip("@").strip()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GREETING_MESSAGE
DEFAULT_GREETING = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cosy Asia Real Estate Bot¬ª\n\n"
    "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n"
    "üó£Ô∏è –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
    "‚ùì –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
    "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, –ø–æ–≥–æ–¥—É –Ω–∞ –≤—Ä–µ–º—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è\n"
    "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –≤—Å—ë, —á—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ üèùÔ∏è\n\n"
    "‚ú® –Ø –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ª—É—á—à–µ–µ –∂–∏–ª—å—ë –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –°–∞–º—É–∏ –∫–∞–∫ –¥–æ–º–∞ üèñÔ∏è\n"
    "–ü–æ–º–æ–≥—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏ /rent ‚Äî –∑–∞–¥–∞–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
)
GREETING_MESSAGE = os.environ.get("GREETING_MESSAGE", DEFAULT_GREETING)

MANAGER_CHAT_ID = os.environ.get("MANAGER_CHAT_ID", "").strip() or None

OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "").strip()
GPT_MODEL = os.environ.get("GPT_MODEL", "gpt-4o-mini")

GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON", "").strip()

# ---------- Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
gspread = None
sheet_works = False
ws_leads = None
ws_listings = None

LEADS_SHEET = "Leads"
LEAD_COLUMNS = [
    "created_at", "chat_id", "username",
    "location", "bedrooms", "budget",
    "people", "pets", "pool", "workspace",
    "phone", "name", "notes"
]

LISTINGS_SHEET = "Listings"
LISTING_COLUMNS = [
    "listing_id", "created_at", "title", "description", "location", "bedrooms",
    "bathrooms", "price_month", "pets_allowed", "utilities", "electricity_rate",
    "water_rate", "area_m2", "pool", "furnished", "link", "images", "tags", "raw_text"
]

def _ensure_ws(sh, title: str, headers: List[str]):
    if title in [w.title for w in sh.worksheets()]:
        ws = sh.worksheet(title)
        try:
            first_row = ws.row_values(1)
            if first_row != headers:
                ws.update('1:1', [headers])
        except Exception:
            pass
        return ws
    ws = sh.add_worksheet(title=title, rows="1000", cols=str(len(headers)))
    ws.append_row(headers)
    return ws

def setup_gsheets_if_possible() -> None:
    global gspread, sheet_works, ws_leads, ws_listings
    if not GOOGLE_SHEET_ID or not GOOGLE_CREDS_JSON:
        log.info("Sheets: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é.")
        return
    try:
        import gspread  # type: ignore
        from google.oauth2.service_account import Credentials  # type: ignore
        creds_dict = json.loads(GOOGLE_CREDS_JSON)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        client = gspread.authorize(creds)
        sh = client.open_by_key(GOOGLE_SHEET_ID)
        ws_leads = _ensure_ws(sh, LEADS_SHEET, LEAD_COLUMNS)
        ws_listings = _ensure_ws(sh, LISTINGS_SHEET, LISTING_COLUMNS)
        sheet_works = True
        log.info("Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω—ã: '%s' –∏ '%s'", LEADS_SHEET, LISTINGS_SHEET)
    except Exception as e:
        log.exception("Sheets: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: %s", e)
        sheet_works = False

def leads_append(row: Dict[str, Any]) -> None:
    if not sheet_works or ws_leads is None:
        return
    try:
        ws_leads.append_row([row.get(c, "") for c in LEAD_COLUMNS], value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning("Sheets: –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å –ª–∏–¥: %s", e)

def listings_append(row: Dict[str, Any]) -> None:
    if not sheet_works or ws_listings is None:
        return
    try:
        ws_listings.append_row([row.get(c, "") for c in LISTING_COLUMNS], value_input_option="USER_ENTERED")
    except Exception as e:
        log.warning("Sheets: –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ—Ç: %s", e)

# ---------- –ü–∞–º—è—Ç—å –ª–æ—Ç–æ–≤ (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π) ----------
IN_MEMORY_LISTINGS: List[Dict[str, Any]] = []

# ---------- –ü–∞—Ä—Å–µ—Ä –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ ----------
REGION_WORDS = [
    "lamai", "lama√Ø", "lamay", "–ª–∞–º–∞–π",
    "bophut", "bo phut", "–±–æ–ø—Ö—É—Ç",
    "chaweng", "—á–∞–≤–µ–Ω–≥",
    "maenam", "–º–∞–µ–Ω–∞–º",
    "ban rak", "bangrak", "bang rak", "–±–∞–Ω—Ä–∞–∫", "–±–∞–Ω–≥—Ä–∞–∫",
    "choeng mon", "—á–æ–µ–Ω–≥ –º–æ–Ω", "—á–æ—ç–Ω–≥ –º–æ–Ω",
    "lipanoi", "lipa noi", "–ª–∏–ø–∞ –Ω–æ–π",
    "taling ngam", "—Ç–∞–ª–∏–Ω–≥ –Ω—å–≥–∞–º", "—Ç–∞–ª–∏–Ω–Ω–≥–∞–º"
]

def parse_listing_from_text(text: str, msg_link: str, listing_id: str) -> Dict[str, Any]:
    t = text.lower()
    location = ""
    for w in REGION_WORDS:
        if w in t:
            location = w
            break

    # bedrooms
    m = re.search(r"(\d+)\s*(—Å–ø–∞–ª—å–Ω|bed(room)?s?)", t)
    bedrooms = m.group(1) if m else ""

    # bathrooms
    mb = re.search(r"(\d+)\s*(–≤–∞–Ω–Ω|bath(room)?s?)", t)
    bathrooms = mb.group(1) if mb else ""

    # price
    mp = re.search(r"(\d[\d\s]{3,})(?:\s*(?:baht|–±–∞—Ç|‡∏ø|b|thb))?", t)
    price = re.sub(r"\s", "", mp.group(1)) if mp else ""

    pets_allowed = "unknown"
    if "–±–µ–∑ –ø–∏—Ç–æ–º—Ü" in t or "no pets" in t:
        pets_allowed = "no"
    elif "—Å –ø–∏—Ç–æ–º—Ü" in t or "pets ok" in t or "pet friendly" in t:
        pets_allowed = "yes"

    pool = "yes" if ("pool" in t or "–±–∞—Å—Å–µ–π–Ω" in t) else "no"
    furnished = "yes" if ("furnished" in t or "–º–µ–±–µ–ª" in t) else "unknown"

    mt = re.search(r"^([^\n]{10,80})", text.strip())
    title = mt.group(1) if mt else ""

    row = {
        "listing_id": listing_id,
        "created_at": datetime.utcnow().isoformat(timespec="seconds"),
        "title": title,
        "description": text[:2000],
        "location": location,
        "bedrooms": bedrooms,
        "bathrooms": bathrooms,
        "price_month": price,
        "pets_allowed": pets_allowed,
        "utilities": "unknown",
        "electricity_rate": "",
        "water_rate": "",
        "area_m2": "",
        "pool": pool,
        "furnished": furnished,
        "link": msg_link,
        "images": "",
        "tags": "",
        "raw_text": text,
    }
    return row

# ---------- –ü–æ–¥–±–æ—Ä –∏–∑ –ø–∞–º—è—Ç–∏ ----------
def suggest_listings(area: str, bedrooms: int, budget: int) -> List[Dict[str, Any]]:
    area_l = (area or "").lower()
    res = []
    for it in IN_MEMORY_LISTINGS:
        ok_area = area_l in (it.get("location") or "").lower() if area_l else True
        try:
            bd = int(it.get("bedrooms") or 0)
        except Exception:
            bd = 0
        try:
            pr = int(it.get("price_month") or 0)
        except Exception:
            pr = 0
        if ok_area and (bd >= bedrooms or bd == 0) and (pr <= budget or pr == 0):
            res.append(it)
    res.sort(key=lambda x: int(x.get("price_month") or "99999999"))
    return res[:5]

# ---------- GPT small talk ----------
def gpt_reply(text: str, system_hint: str = "") -> Optional[str]:
    if not OPENAI_API_KEY:
        return None
    try:
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": GPT_MODEL,
            "messages": [
                {"role": "system", "content": system_hint or "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –Ω–∞ –°–∞–º—É–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role": "user", "content": text},
            ]
        }
        r = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload, timeout=30)
        r.raise_for_status()
        data = r.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        log.warning("GPT error: %s", e)
        return None

# ---------- –î–∏–∞–ª–æ–≥ /rent ----------
(
    AREA, BEDROOMS, BUDGET, PEOPLE, PETS, POOL, WORKSPACE, PHONE, NAME, NOTES
) = range(10)

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–∫–∞–∂–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ /start (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç")
    await update.message.reply_text(GREETING_MESSAGE)

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üó∫Ô∏è –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ —Ö–æ—Ç–∏—Ç–µ –∂–∏—Ç—å? (–ú–∞–µ–Ω–∞–º, –ë–æ–ø—Ö—É—Ç, –ß–∞–≤–µ–Ω–≥, –õ–∞–º–∞–π ...)")
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["location"] = update.message.text.strip()
    await update.message.reply_text("üõèÔ∏è –°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ?")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = re.search(r"\d+", update.message.text)
    context.user_data["bedrooms"] = int(m.group()) if m else 1
    await update.message.reply_text("üí∞ –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –º–µ—Å—è—Ü (–±–∞—Ç)?")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = re.search(r"\d+", update.message.text.replace(" ", ""))
    context.user_data["budget"] = int(m.group()) if m else 0
    await update.message.reply_text("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å?")
    return PEOPLE

async def rent_people(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = re.search(r"\d+", update.message.text)
    context.user_data["people"] = int(m.group()) if m else 1
    await update.message.reply_text("üêæ –° –ø–∏—Ç–æ–º—Ü–∞–º–∏? (–¥–∞/–Ω–µ—Ç)")
    return PETS

async def rent_pets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    t = update.message.text.lower()
    context.user_data["pets"] = "yes" if "–¥–∞" in t or "yes" in t else ("no" if "–Ω–µ—Ç" in t or "no" in t else "unknown")
    await update.message.reply_text("üèä –ù—É–∂–µ–Ω –±–∞—Å—Å–µ–π–Ω? (–¥–∞/–Ω–µ—Ç)")
    return POOL

async def rent_pool(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    t = update.message.text.lower()
    context.user_data["pool"] = "yes" if "–¥–∞" in t or "yes" in t else ("no" if "–Ω–µ—Ç" in t or "no" in t else "unknown")
    await update.message.reply_text("üíª –ù—É–∂–Ω–∞ —Ä–∞–±–æ—á–∞—è –∑–æ–Ω–∞/—Å—Ç–æ–ª? (–¥–∞/–Ω–µ—Ç)")
    return WORKSPACE

async def rent_workspace(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    t = update.message.text.lower()
    context.user_data["workspace"] = "yes" if "–¥–∞" in t or "yes" in t else ("no" if "–Ω–µ—Ç" in t or "no" in t else "unknown")
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):")
    return PHONE

async def rent_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["phone"] = update.message.text.strip()
    await update.message.reply_text("üë§ –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
    return NAME

async def rent_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("üìù –ï—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–∫—Ä–∞—Ç–∫–æ)")
    return NOTES

async def rent_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["notes"] = update.message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
    u = update.effective_user
    lead = {
        "created_at": datetime.utcnow().isoformat(timespec="seconds"),
        "chat_id": str(update.effective_chat.id),
        "username": (u.username or u.full_name or "").strip(),
        "location": context.user_data.get("location", ""),
        "bedrooms": str(context.user_data.get("bedrooms", "")),
        "budget": str(context.user_data.get("budget", "")),
        "people": str(context.user_data.get("people", "")),
        "pets": context.user_data.get("pets", ""),
        "pool": context.user_data.get("pool", ""),
        "workspace": context.user_data.get("workspace", ""),
        "phone": context.user_data.get("phone", ""),
        "name": context.user_data.get("name", ""),
        "notes": context.user_data.get("notes", ""),
    }
    leads_append(lead)

    # –°–æ–æ–±—â–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if MANAGER_CHAT_ID:
        try:
            msg = (
                "–ù–æ–≤—ã–π –ª–∏–¥:\n"
                f"–ò–º—è: {lead['name']}\n–¢–µ–ª: {lead['phone']}\n–Æ–∑–µ—Ä: @{u.username or '-'}\n"
                f"–†–∞–π–æ–Ω: {lead['location']} | –°–ø–∞–ª—å–Ω–∏: {lead['bedrooms']} | –ë—é–¥–∂–µ—Ç: {lead['budget']}\n"
                f"–õ—é–¥–∏: {lead['people']} | –ü–∏—Ç–æ–º—Ü—ã: {lead['pets']} | –ë–∞—Å—Å–µ–π–Ω: {lead['pool']} | –†–∞–±.–º–µ—Å—Ç–æ: {lead['workspace']}\n"
                f"–ü–æ–∂–µ–ª–∞–Ω–∏—è: {lead['notes']}"
            )
            await context.bot.send_message(chat_id=int(MANAGER_CHAT_ID), text=msg)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: %s", e)

    # –ü–æ–¥–±–µ—Ä—ë–º –∏–∑ –ø–∞–º—è—Ç–∏
    area = lead["location"]
    try:
        bedrooms = int(lead["bedrooms"] or 0)
    except Exception:
        bedrooms = 0
    try:
        budget = int(lead["budget"] or 0)
    except Exception:
        budget = 0

    offers = suggest_listings(area, bedrooms, budget)
    if offers:
        lines = ["–ù–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"]
        for o in offers:
            lines.append(
                f"‚Ä¢ {o.get('title') or '–õ–æ—Ç'} ‚Äî —Å–ø–∞–ª—å–Ω–∏: {o.get('bedrooms') or '?'}; "
                f"—Ü–µ–Ω–∞: {o.get('price_month') or '?'}; —Ä–∞–π–æ–Ω: {o.get('location') or '?'}\n{o.get('link') or ''}"
            )
        await update.message.reply_text("\n\n".join(lines))
    else:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! üôå –Ø –ø–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è.")

    await update.message.reply_text("–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /rent")
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–≤–µ–¥–∏—Ç–µ /rent —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞ ----------
async def on_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.channel_post:
        return
    msg = update.channel_post
    uname = (msg.chat.username or "").lower()
    if PUBLIC_CHANNEL and uname != PUBLIC_CHANNEL.lower():
        return
    text = (msg.text or msg.caption or "").strip()
    if not text:
        return
    link = msg.link or (f"https://t.me/{msg.chat.username}/{msg.message_id}" if msg.chat.username else "")
    listing_id = f"{msg.chat.id}_{msg.message_id}"
    item = parse_listing_from_text(text, link, listing_id)
    IN_MEMORY_LISTINGS.append(item)
    listings_append(item)
    log.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ—Ç %s –∏–∑ –∫–∞–Ω–∞–ª–∞ @%s", listing_id, msg.chat.username)

# ---------- –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç —Å GPT ----------
async def smalltalk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (update.message.text or "").strip()
    if not text:
        return
    reply = gpt_reply(text)
    if reply:
        await update.message.reply_text(reply)
    else:
        await update.message.reply_text("–Ø –≤–∞—Å —Å–ª—ã—à—É. –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ –∞—Ä–µ–Ω–¥–µ: /rent üòä")

# ---------- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
def build_application() -> Application:
    app: Application = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start_cmd))

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            PEOPLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_people)],
            PETS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_pets)],
            POOL: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_pool)],
            WORKSPACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_workspace)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_phone)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_name)],
            NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_notes)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    app.add_handler(MessageHandler(filters.ChatType.CHANNEL & filters.TEXT, on_channel_post))

    # Small talk: –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç, –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–µ-–∫–æ–º–∞–Ω–¥—ã
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, smalltalk))

    return app

# ---------- –ó–∞–ø—É—Å–∫ (–ë–ï–ó await!) ----------
def run_webhook_blocking(app: Application) -> None:
    webhook_url = f"{BASE_URL}{WEBHOOK_PATH if WEBHOOK_PATH.startswith('/') else '/'+WEBHOOK_PATH}"
    log.info("Webhook URL: %s", webhook_url)
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "10000")),
        url_path=WEBHOOK_PATH.lstrip("/"),
        webhook_url=webhook_url,
        allowed_updates=["message", "channel_post", "callback_query"],
        drop_pending_updates=True,
    )

def run_polling_blocking(app: Application) -> None:
    app.run_polling(
        allowed_updates=["message", "channel_post", "callback_query"],
        drop_pending_updates=True,
    )

def main() -> None:
    setup_gsheets_if_possible()
    app = build_application()
    if BASE_URL:
        log.info("–°—Ç–∞—Ä—Ç—É–µ–º –≤ —Ä–µ–∂–∏–º–µ WEBHOOK‚Ä¶")
        run_webhook_blocking(app)
    else:
        log.info("–°—Ç–∞—Ä—Ç—É–µ–º –≤ —Ä–µ–∂–∏–º–µ POLLING‚Ä¶")
        run_polling_blocking(app)

if __name__ == "__main__":
    main()
