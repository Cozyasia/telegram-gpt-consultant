import os
import logging
import asyncio

from fastapi import FastAPI, Request, Response
from fastapi.responses import PlainTextResponse

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ==== –õ–û–ì–ò ====
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("cozyasia-bot")

# ==== ENV ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
PORT = int(os.getenv("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE.startswith("https://"):
    raise RuntimeError("ENV WEBHOOK_BASE must start with https://")

# ==== OpenAI ====
try:
    from openai import OpenAI
    oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    oai = None
    log.warning("OpenAI SDK not available: %s", e)

# ==== Telegram Application (PTB v21) ====
application: Application = Application.builder().token(TELEGRAM_TOKEN).build()

# --------- Handlers ---------
WELCOME = (
    "‚úÖ –Ø –∑–¥–µ—Å—å!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –°–∞–º—É–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
    "–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ: –ø–æ–≥–æ–¥–∞, —Ä–∞–π–æ–Ω—ã, –ø–ª—è–∂–∏, –≤–µ—Ç—Ä–∞ –∏ —Ç. –ø."
)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(WELCOME)

# –ü—Ä–æ—Å—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π /rent ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–ª.
# (–ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞; —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É –º–æ–∂–µ—à—å –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ.)
async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
    )

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia (–°–∞–º—É–∏). –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –ø–æ —Å—É—Ç–∏. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∞—Ä–µ–Ω–¥–æ–π/–ø–æ–∫—É–ø–∫–æ–π/–≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É /rent "
    "–∏ —É–∫–∞–∂–∏, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è. –ù–µ —Å–æ–≤–µ—Ç—É–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞."
)

async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (update.effective_message.text or "").strip()
    if not text:
        return

    # –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –¥–∞–π –≤–µ–∂–ª–∏–≤—ã–π —Ñ–æ–ª–±—ç–∫, –∞ –±–æ—Ç –Ω–µ –º–æ–ª—á–∏—Ç.
    if not oai or not OPENAI_API_KEY:
        await update.effective_message.reply_text(
            "–Ø –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –ø–æ–≥–æ–¥—É, –ø–ª—è–∂–∏ –∏ —Ä–∞–π–æ–Ω—ã. "
            "–î–ª—è –∑–∞—è–≤–æ–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /rent."
        )
        return

    try:
        # OpenAI Responses API (SDK v1.x)
        resp = oai.chat.completions.create(
            model=os.getenv("OPENAI_MODEL", "gpt-4o-mini"),
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text},
            ],
            temperature=0.5,
        )
        answer = resp.choices[0].message.content.strip()
    except Exception as e:
        log.exception("OpenAI error: %s", e)
        answer = (
            "–ü–æ—Ö–æ–∂–µ, –≤–Ω–µ—à–Ω–∏–π –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. "
            "–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ –°–∞–º—É–∏ ‚Äî —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, –ø–ª—è–∂–∏, –≤–µ—Ç—Ä–∞. "
            "–ê –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è ‚Äî –∂–º–∏—Ç–µ /rent, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É."
        )

    await update.effective_message.reply_text(answer)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(CommandHandler("rent", cmd_rent))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))

# ==== FastAPI + Webhook –º–∞—Ä—à—Ä—É—Ç—ã ====
api = FastAPI(title="Cozy Asia Bot")

@api.get("/", response_class=PlainTextResponse)
async def health() -> str:
    return "OK"

@api.post(f"/webhook/{{token}}")
async def telegram_webhook(token: str, request: Request) -> Response:
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –∞–ø–¥–µ–π—Ç—ã –¢–û–õ–¨–ö–û –Ω–∞ —Ç–æ—á–Ω—ã–π —Ç–æ–∫–µ–Ω
    if token != TELEGRAM_TOKEN:
        return Response(status_code=403)

    try:
        data = await request.json()
    except Exception:
        return Response(status_code=400)

    update = Update.de_json(data, application.bot)
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ø–¥–µ–π—Ç –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏) ‚Äî –Ω–∞–¥—ë–∂–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ
    await application.process_update(update)
    return Response(status_code=200)

# ==== –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ====
async def setup_webhook():
    url = f"{WEBHOOK_BASE}/webhook/{TELEGRAM_TOKEN}"
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url)
    log.info("Webhook set to %s", url)

@api.on_event("startup")
async def on_startup():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PTB
    await application.initialize()
    await application.start()
    await setup_webhook()
    log.info("Application started")

@api.on_event("shutdown")
async def on_shutdown():
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ PTB
    try:
        await application.stop()
        await application.shutdown()
    except Exception:
        pass
    log.info("Application stopped")

# ==== –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ Render, –Ω–æ —É–¥–æ–±–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤) ====
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:api", host="0.0.0.0", port=PORT, log_level="info")
