import os
import logging
from datetime import datetime

from fastapi import FastAPI, Request, Response
from fastapi.responses import PlainTextResponse

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# =================== –õ–û–ì–ò ===================
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("cozyasia-bot")

# =================== ENV ===================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE = os.getenv("WEBHOOK_BASE", "").rstrip("/")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
PORT = int(os.getenv("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE.startswith("https://"):
    raise RuntimeError("ENV WEBHOOK_BASE must start with https://")

# =================== OpenAI ===================
try:
    from openai import OpenAI
    oai = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    oai = None
    log.warning("OpenAI SDK not available: %s", e)

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Cozy Asia (–°–∞–º—É–∏). –û—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ –ø–æ —Å—É—Ç–∏ –ø—Ä–æ –°–∞–º—É–∏: —Å–µ–∑–æ–Ω—ã, —Ä–∞–π–æ–Ω—ã, –ø–ª—è–∂–∏, –≤–µ—Ç—Ä–∞, –±—ã—Ç. "
    "–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä —É—Ö–æ–¥–∏—Ç –∫ –∞—Ä–µ–Ω–¥–µ/–ø–æ–∫—É–ø–∫–µ/–≤–∞—Ä–∏–∞–Ω—Ç–∞–º ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É /rent –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è. "
    "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ."
)

# =================== Telegram Application ===================
application: Application = Application.builder().token(TELEGRAM_TOKEN).build()

# =================== –¢–µ–∫—Å—Ç—ã ===================
WELCOME = (
    "‚úÖ –Ø –∑–¥–µ—Å—å!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –°–∞–º—É–∏ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
    "–¢–∞–∫–∂–µ –º–æ–≥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ: –ø–æ–≥–æ–¥–∞, —Ä–∞–π–æ–Ω—ã, –ø–ª—è–∂–∏, –≤–µ—Ç—Ä–∞ –∏ —Ç. –ø."
)

# =================== –ê–ù–ö–ï–¢–ê ===================
# –°–æ—Å—Ç–æ—è–Ω–∏—è (1..7)
TYPE, AREA, BEDROOMS, BUDGET, CHECKIN, CHECKOUT, NOTES = range(7)

def _reset_form(user_data: dict):
    user_data["rent_active"] = False
    user_data.pop("form", None)

async def rent_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã
    context.user_data["rent_active"] = True
    context.user_data["form"] = {}
    await update.effective_message.reply_text(
        "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
    )
    return TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["type"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("2/7: –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –∂–∏—Ç—å?")
    return AREA

async def q_area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["area"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("3/7: –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return BEDROOMS

async def q_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["bedrooms"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("4/7: –ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö –≤ –º–µ—Å—è—Ü?")
    return BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["budget"] = update.effective_message.text.strip()
    await update.effective_message.reply_text("5/7: –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)")
    return CHECKIN

def _parse_date(s: str) -> str:
    # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    s = s.strip().replace("/", ".").replace("-", ".")
    parts = s.split(".")
    try:
        if len(parts) == 3:
            d, m, y = parts
            if len(y) == 2:
                y = "20" + y
            dt = datetime(int(y), int(m), int(d))
            return dt.strftime("%Y-%m-%d")
    except Exception:
        pass
    # –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω–æ–µ
    return s

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["checkin"] = _parse_date(update.effective_message.text)
    await update.effective_message.reply_text("6/7: –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["checkout"] = _parse_date(update.effective_message.text)
    await update.effective_message.reply_text("7/7: –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç. –ø.)")
    return NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["form"]["notes"] = update.effective_message.text.strip()
    form = context.user_data.get("form", {})
    # –ò—Ç–æ–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    summary = (
        "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"–¢–∏–ø: {form.get('type','-')}\n"
        f"–†–∞–π–æ–Ω: {form.get('area','-')}\n"
        f"–°–ø–∞–ª–µ–Ω: {form.get('bedrooms','-')}\n"
        f"–ë—é–¥–∂–µ—Ç: {form.get('budget','-')}\n"
        f"Check-in: {form.get('checkin','-')}\n"
        f"Check-out: {form.get('checkout','-')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {form.get('notes','-')}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.effective_message.reply_text(summary)

    # –¢—É—Ç –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É/Google Sheets –∏ —Ç.–ø.
    # (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞)
    _reset_form(context.user_data)
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    _reset_form(context.user_data)
    await update.effective_message.reply_text("–û–∫, –∞–Ω–∫–µ—Ç—É –æ—Å—Ç–∞–Ω–æ–≤–∏–ª. –ì–æ—Ç–æ–≤ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é.")
    return ConversationHandler.END

# =================== GPT-–ß–ê–¢ ===================
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(WELCOME)

async def chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ ‚Äî GPT –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è
    if context.user_data.get("rent_active"):
        return

    text = (update.effective_message.text or "").strip()
    if not text:
        return

    if not oai or not OPENAI_API_KEY:
        await update.effective_message.reply_text(
            "–Ø –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –ø–æ–≥–æ–¥—É, –ø–ª—è–∂–∏ –∏ —Ä–∞–π–æ–Ω—ã. "
            "–î–ª—è –∑–∞—è–≤–æ–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /rent."
        )
        return

    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": text},
            ],
            temperature=0.5,
        )
        answer = resp.choices[0].message.content.strip()
    except Exception as e:
        log.exception("OpenAI error: %s", e)
        answer = (
            "–ü–æ—Ö–æ–∂–µ, –≤–Ω–µ—à–Ω–∏–π –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ. "
            "–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ –°–∞–º—É–∏ ‚Äî —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å, –ø–ª—è–∂–∏, –≤–µ—Ç—Ä–∞. "
            "–ê –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è ‚Äî –∂–º–∏—Ç–µ /rent, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É."
        )

    await update.effective_message.reply_text(answer)

# =================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –•–≠–ù–î–õ–ï–†–û–í ===================
# ConversationHandler –î–û–õ–ñ–ï–ù –°–¢–û–Ø–¢–¨ –ü–ï–†–ï–î –æ–±—â–∏–º chat_handler,
# —á—Ç–æ–±—ã –≤–æ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã –∏–º–µ–Ω–Ω–æ –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è.
rent_conv = ConversationHandler(
    entry_points=[CommandHandler("rent", rent_entry)],
    states={
        TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
        AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_area)],
        BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
        BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
        CHECKIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
        CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
        NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
    },
    fallbacks=[CommandHandler("cancel", rent_cancel)],
    name="rent_conversation",
    persistent=False,
)

application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(rent_conv)
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat_handler))

# =================== FASTAPI + WEBHOOK ===================
api = FastAPI(title="Cozy Asia Bot")

@api.get("/", response_class=PlainTextResponse)
async def health() -> str:
    return "OK"

@api.post(f"/webhook/{{token}}")
async def telegram_webhook(token: str, request: Request) -> Response:
    if token != TELEGRAM_TOKEN:
        return Response(status_code=403)

    try:
        data = await request.json()
    except Exception:
        return Response(status_code=400)

    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return Response(status_code=200)

async def setup_webhook():
    url = f"{WEBHOOK_BASE}/webhook/{TELEGRAM_TOKEN}"
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.bot.set_webhook(url)
    log.info("Webhook set to %s", url)

@api.on_event("startup")
async def on_startup():
    await application.initialize()
    await application.start()
    await setup_webhook()
    log.info("Application started")

@api.on_event("shutdown")
async def on_shutdown():
    try:
        await application.stop()
        await application.shutdown()
    except Exception:
        pass
    log.info("Application stopped")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:api", host="0.0.0.0", port=PORT, log_level="info")
