# main.py
import os
import json
import logging
from datetime import datetime

from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

# ===================== LOGGING & ENV =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
TELEGRAM_TOKEN   = os.environ.get("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE     = os.environ.get("WEBHOOK_BASE", "").strip()   # https://<service>.onrender.com
PORT             = int(os.environ.get("PORT", "10000"))

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
GROUP_CHAT_ID    = os.environ.get("GROUP_CHAT_ID", "").strip()  # -100xxxxxxxxxx
SHEET_ID         = os.environ.get("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS_RAW = os.environ.get("GOOGLE_CREDS_JSON", "").strip()

# OpenAI
OPENAI_API_KEY   = os.environ.get("OPENAI_API_KEY", "").strip()
OPENAI_MODEL     = os.environ.get("OPENAI_MODEL", "gpt-4o-mini").strip()
OPENAI_PROJECT   = os.environ.get("OPENAI_PROJECT", "").strip()  # –¥–ª—è sk-proj-* –∫–ª—é—á–µ–π –º–æ–∂–Ω–æ –ø—É—Å—Ç—ã–º ‚Äî SDK —Å–∞–º –ø–æ–π–º—ë—Ç
OPENAI_BASE      = os.environ.get("OPENAI_BASE", "").strip()     # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π endpoint/proxy

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE or not WEBHOOK_BASE.startswith("http"):
    raise RuntimeError("ENV WEBHOOK_BASE must be like https://xxx.onrender.com")

GPT_ENABLED = bool(OPENAI_API_KEY)
if not GPT_ENABLED:
    log.warning("OPENAI_API_KEY is not set -> free chat will use fallback answers")

# ===================== GOOGLE SHEETS (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è) =====================
_gspread = None
_worksheet = None

def _init_sheets_once():
    global _gspread, _worksheet
    if _worksheet is not None:
        return
    if not SHEET_ID or not GOOGLE_CREDS_RAW:
        log.warning("Google Sheets disabled (no GOOGLE_SHEET_ID or GOOGLE_CREDS_JSON)")
        return
    try:
        import gspread
        from google.oauth2.service_account import Credentials
    except Exception as e:
        log.error("gspread/google-auth import error: %s", e)
        return

    try:
        sa_info = json.loads(GOOGLE_CREDS_RAW)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(sa_info, scopes=scopes)
        _gspread = gspread.authorize(creds)
        sh = _gspread.open_by_key(SHEET_ID)
        try:
            _worksheet = sh.worksheet("Leads")
        except Exception:
            _worksheet = sh.sheet1
        log.info("Google Sheets ready: %s", _worksheet.title)
    except Exception as e:
        log.error("Failed to init Google Sheets: %s", e)
        _worksheet = None

def append_lead_row(row_values: list) -> bool:
    _init_sheets_once()
    if _worksheet is None:
        return False
    try:
        _worksheet.append_row(row_values, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        log.error("append_row failed: %s", e)
        return False

# ===================== –¢–ï–ö–°–¢–´ =====================
def promo_block() -> str:
    return (
        "üìé –ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        "üåê –°–∞–π—Ç ‚Äî –∫–∞—Ç–∞–ª–æ–≥ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "https://cozy.asia\n\n"
        "üì£ –ö–∞–Ω–∞–ª ‚Äî –Ω–æ–≤–æ—Å—Ç–∏ –∏ –ø–æ–¥–±–æ—Ä–∫–∏\n"
        "https://t.me/cozy_asia\n\n"
        "üìò –ü—Ä–∞–≤–∏–ª–∞/FAQ ‚Äî –≤–∞–∂–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
        "https://t.me/cozy_asia_rules\n\n"
        "üëâ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–±–æ—Ä—É –∂–∏–ª—å—è? –ù–∞–ø–∏—à–∏—Ç–µ /rent ‚Äî –∑–∞–¥–∞–º 7 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )

START_GREETING = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, —Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. "
    "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

RENT_INTRO = (
    "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7:\n"
    "–∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
)

# ===================== STATE MACHINE /rent =====================
(Q_TYPE, Q_DISTRICT, Q_BUDGET, Q_BEDROOMS, Q_CHECKIN, Q_CHECKOUT, Q_NOTES) = range(7)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(START_GREETING)
    await update.effective_message.reply_text(promo_block())

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text(RENT_INTRO)
    return Q_TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = (update.message.text or "").strip()
    await update.message.reply_text("2/7: —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ß–∞–≤–µ–Ω–≥)")
    return Q_DISTRICT

async def q_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = (update.message.text or "").strip()
    await update.message.reply_text("3/7: –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 50000)")
    return Q_BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    context.user_data["budget"] = "".join(ch for ch in txt if ch.isdigit()) or txt
    await update.message.reply_text("4/7: —Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ? (—á–∏—Å–ª–æ)")
    return Q_BEDROOMS

async def q_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    context.user_data["bedrooms"] = "".join(ch for ch in txt if ch.isdigit()) or txt
    await update.message.reply_text("5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)")
    return Q_CHECKIN

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkin"] = (update.message.text or "").strip()
    await update.message.reply_text("6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkout"] = (update.message.text or "").strip()
    await update.message.reply_text("7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["notes"] = (update.message.text or "").strip()
    ud = context.user_data

    summary = (
        "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"–¢–∏–ø: {ud.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
        f"Check-in: {ud.get('checkin','')}\n"
        f"Check-out: {ud.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {ud.get('notes','')}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(summary)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    try:
        if GROUP_CHAT_ID:
            mention = (
                f"@{update.effective_user.username}"
                if (update.effective_user and update.effective_user.username)
                else f"(ID: {update.effective_user.id if update.effective_user else '‚Äî'})"
            )
            group_text = (
                "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
                f"–ö–ª–∏–µ–Ω—Ç: {mention}\n"
                f"–¢–∏–ø: {ud.get('type','')}\n"
                f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
                f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
                f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
                f"Check-in: {ud.get('checkin','')}\n"
                f"Check-out: {ud.get('checkout','')}\n"
                f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {ud.get('notes','')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
            await context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=group_text)
    except Exception as e:
        log.error("Failed to notify group: %s", e)

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        created = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        chat_id = update.effective_chat.id if update.effective_chat else ""
        username = update.effective_user.username if (update.effective_user and update.effective_user.username) else ""
        row = [
            created, str(chat_id), username,
            ud.get("district",""), ud.get("bedrooms",""), ud.get("budget",""),
            ud.get("checkin",""), ud.get("checkout",""),
            ud.get("type",""), ud.get("notes",""),
        ]
        ok = append_lead_row(row)
        if not ok:
            log.warning("Lead not saved to sheet (disabled or error).")
    except Exception as e:
        log.error("Sheet append error: %s", e)

    context.user_data.clear()
    return ConversationHandler.END

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª –∞–Ω–∫–µ—Ç—É. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å /rent –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

# ===================== GPT (single place) =====================
async def ask_gpt(prompt: str) -> str:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –±—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–º –≤—ã—à–µ).
    """
    from openai import OpenAI
    kwargs = {"api_key": OPENAI_API_KEY}
    if OPENAI_PROJECT:
        kwargs["project"] = OPENAI_PROJECT
    if OPENAI_BASE:
        kwargs["base_url"] = OPENAI_BASE

    client = OpenAI(**kwargs)
    log.info("GPT request -> model=%s len(prompt)=%d", OPENAI_MODEL, len(prompt))

    resp = client.chat.completions.create(
        model=OPENAI_MODEL,
        messages=[
            {"role": "system", "content":
                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia (–æ. –°–∞–º—É–∏). –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ –¥–µ–ª—É. "
                "–í—Å–µ–≥–¥–∞ –º—è–≥–∫–æ –≤–µ–¥–∏ –∫ –∞–Ω–∫–µ—Ç–µ /rent, –µ—Å–ª–∏ —Ä–µ—á—å –ø—Ä–æ –∞—Ä–µ–Ω–¥—É/–ø–æ–∫—É–ø–∫—É. "
                "–í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º –≤—ã–≤–æ–¥–∏:\n\n" + promo_block()
            },
            {"role": "user", "content": prompt},
        ],
        temperature=0.6,
        timeout=30,  # —Å–µ–∫
    )
    answer = resp.choices[0].message.content or ""
    return answer.strip()

# ===================== FREE CHAT =====================
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ /rent –ø–æ —Å–ª–æ–≤—É 'rent'
    if text.lower() == "rent":
        return await cmd_rent(update, context)

    if GPT_ENABLED:
        try:
            answer = await ask_gpt(text)
            # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ /rent, –Ω–æ –∑–∞–ø—Ä–æ—Å —è–≤–Ω–æ –ø—Ä–æ –∂–∏–ª—å—ë ‚Äî –¥–æ–±–∞–≤–∏–º —Å—Ç—Ä–æ–∫—É
            if "/rent" not in answer and any(
                k in text.lower() for k in ["—Å–Ω—è—Ç—å", "–∞—Ä–µ–Ω–¥–∞", "–≤–∏–ª–ª–∞", "–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∂–∏–ª—å—ë", "–∂–∏–ª—å–µ", "–∫—É–ø–∏—Ç—å"]
            ):
                answer += "\n\nüëâ –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /rent."
            await update.message.reply_text(answer)
            return
        except Exception as e:
            # –≤–∞–∂–Ω—ã–π –ª–æ–≥ ‚Äî —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –≤ Render Logs –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–∞–¥–µ–Ω–∏–∏ GPT
            log.error("OpenAI call failed: %r", e)

    # –§–æ–ª–±—ç–∫ –±–µ–∑ GPT –ª–∏–±–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    fallback = "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∂–∏–ª—å—ë–º, –∂–∏–∑–Ω—å—é –Ω–∞ –°–∞–º—É–∏, —Ä–∞–π–æ–Ω–∞–º–∏ –∏ —Ç.–¥.\n\n" + promo_block()
    await update.message.reply_text(fallback)

# ===================== BOOTSTRAP =====================
def build_application() -> Application:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    rent_conv = ConversationHandler(
        entry_points=[CommandHandler("rent", cmd_rent)],
        states={
            Q_TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_district)],
            Q_BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
            Q_CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))
    app.add_handler(rent_conv)
    # —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º –ü–û–°–õ–ï rent_conv
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))
    return app

def run_webhook(app: Application):
    """
    PTB 21.6: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞.
    url_path –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –æ—Ç–¥–∞—ë–º –≤ setWebhook.
    """
    url_path = f"webhook/{TELEGRAM_TOKEN}"
    webhook_url = f"{WEBHOOK_BASE.rstrip('/')}/{url_path}"
    log.info("==> start webhook on 0.0.0.0:%s | url=%s", PORT, webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

def main():
    app = build_application()
    run_webhook(app)

if __name__ == "__main__":
    main()
