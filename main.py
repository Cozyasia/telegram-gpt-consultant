# -*- coding: utf-8 -*-
"""
Cozy Asia Bot ‚Äî –µ–¥–∏–Ω—ã–π main.py (PTB 21.x)

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞):
  TELEGRAM_BOT_TOKEN   ‚Äî —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–æ–±—è–∑.)
  BASE_URL             ‚Äî –≤–Ω–µ—à–Ω–∏–π URL Render –±–µ–∑ —Å–ª–µ—à–∞ –Ω–∞ –∫–æ–Ω—Ü–µ (–Ω–∞–ø—Ä. https://your-app.onrender.com)
  WEBHOOK_PATH         ‚Äî –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /webhook
  PUBLIC_CHANNEL       ‚Äî —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ –±–µ–∑ @ (–Ω–∞–ø—Ä. samuirental)
  GREETING_MESSAGE     ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–Ω–µ–æ–±—è–∑.)
  MANAGER_CHAT_ID      ‚Äî chat_id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –º–æ–∂–Ω–æ 0/–ø—É—Å—Ç–æ)
  GOOGLE_SHEET_ID      ‚Äî ID —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –ø–∏—Å–∞—Ç—å –≤ Sheets)
  GOOGLE_CREDS_JSON    ‚Äî JSON —Å–µ—Ä–≤–∏—Å-–∞–∫–∫–∞—É–Ω—Ç–∞ (—Ü–µ–ª–∏–∫–æ–º, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π)
  LOG_LEVEL            ‚Äî INFO/DEBUG/‚Ä¶
"""

import os
import re
import json
import asyncio
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional

from telegram import Update, Bot
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL, logging.INFO),
    format="%(asctime)s %(levelname)s %(name)s %(message)s",
)
log = logging.getLogger("cozy_bot")

# ---------- ENV ----------
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"].strip()
BASE_URL = os.environ.get("BASE_URL", "").rstrip("/")            # –ø—É—Å—Ç–æ => –ª–æ–∫–∞–ª—å–Ω—ã–π polling
WEBHOOK_PATH = os.environ.get("WEBHOOK_PATH", "/webhook")
PUBLIC_CHANNEL = os.environ.get("PUBLIC_CHANNEL", "").lstrip("@").strip()

GREETING_MESSAGE = os.environ.get(
    "GREETING_MESSAGE",
    "–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia üå¥\n–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏—â–µ—à—å (—Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç, —Å–ø–∞–ª—å–Ω–∏, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏ –∏ —Ç.–¥.) "
    "–∏–ª–∏ –Ω–∞–∂–º–∏ /rent ‚Äî –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –±–∞–∑—ã.",
)

MANAGER_CHAT_ID: Optional[int]
_man = os.environ.get("MANAGER_CHAT_ID", "").strip()
MANAGER_CHAT_ID = int(_man) if _man.isdigit() else None

GOOGLE_SHEET_ID = os.environ.get("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON", "").strip()

# ---------- Google Sheets (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
gspread = None
sheet_ok = False
ws_listings = None
ws_requests = None

LISTINGS_SHEET_NAME = "Listings"
LISTINGS_COLS = [
    "listing_id", "created_at", "title", "description", "location", "bedrooms",
    "bathrooms", "price_month", "pets_allowed", "utilities", "electricity_rate",
    "water_rate", "area_m2", "pool", "furnished", "link", "images", "tags", "raw_text"
]

REQUESTS_SHEET_NAME = "Requests"
REQUESTS_COLS = [
    "request_id", "created_at", "user_id", "username",
    "area", "bedrooms", "budget", "pets", "guests", "notes", "matched_count"
]

def setup_gsheets() -> None:
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ."""
    global gspread, sheet_ok, ws_listings, ws_requests
    if not (GOOGLE_SHEET_ID and GOOGLE_CREDS_JSON):
        log.info("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    try:
        import gspread  # type: ignore
        from google.oauth2.service_account import Credentials  # type: ignore

        creds = json.loads(GOOGLE_CREDS_JSON)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        gc = gspread.authorize(
            Credentials.from_service_account_info(creds, scopes=scopes)
        )
        sh = gc.open_by_key(GOOGLE_SHEET_ID)

        # Listings
        titles = [w.title for w in sh.worksheets()]
        if LISTINGS_SHEET_NAME in titles:
            ws_listings = sh.worksheet(LISTINGS_SHEET_NAME)
        else:
            ws_listings = sh.add_worksheet(
                title=LISTINGS_SHEET_NAME, rows="1000", cols=str(len(LISTINGS_COLS))
            )
            ws_listings.append_row(LISTINGS_COLS)

        # Requests
        titles = [w.title for w in sh.worksheets()]
        if REQUESTS_SHEET_NAME in titles:
            ws_requests = sh.worksheet(REQUESTS_SHEET_NAME)
        else:
            ws_requests = sh.add_worksheet(
                title=REQUESTS_SHEET_NAME, rows="1000", cols=str(len(REQUESTS_COLS))
            )
            ws_requests.append_row(REQUESTS_COLS)

        sheet_ok = True
        log.info("Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω: –ª–∏—Å—Ç—ã '%s' –∏ '%s'.", LISTINGS_SHEET_NAME, REQUESTS_SHEET_NAME)
    except Exception as e:
        sheet_ok = False
        log.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets: %s", e)

def append_listings_row(row: Dict[str, Any]) -> None:
    """–ó–∞–ø–∏—Å—å –ª–æ—Ç–∞ –≤ –ª–∏—Å—Ç Listings + –≤ –ø–∞–º—è—Ç—å."""
    IN_MEMORY_LISTINGS.append(row)
    if sheet_ok and ws_listings:
        try:
            ws_listings.append_row([row.get(c, "") for c in LISTINGS_COLS], value_input_option="USER_ENTERED")
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ—Ç –≤ Sheets: %s", e)

def append_request_row(row: Dict[str, Any]) -> None:
    """–ó–∞–ø–∏—Å—å –∑–∞—è–≤–∫–∏ –≤ –ª–∏—Å—Ç Requests."""
    if sheet_ok and ws_requests:
        try:
            ws_requests.append_row([row.get(c, "") for c in REQUESTS_COLS], value_input_option="USER_ENTERED")
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É –≤ Sheets: %s", e)

# ---------- –ü–∞–º—è—Ç—å —Å –ª–æ—Ç–∞–º–∏ ----------
IN_MEMORY_LISTINGS: List[Dict[str, Any]] = []

# ---------- –ü–∞—Ä—Å–µ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ ----------
REGION_WORDS = [
    "lamai","lama√Ø","lamay","–ª–∞–º–∞–π",
    "bophut","bo phut","–±–æ–ø—Ö—É—Ç",
    "chaweng","—á–∞–≤–µ–Ω–≥",
    "maenam","–º–∞–µ–Ω–∞–º",
    "ban rak","bangrak","bang rak","–±–∞–Ω—Ä–∞–∫","–±–∞–Ω–≥—Ä–∞–∫",
    "choeng mon","—á–æ–µ–Ω–≥ –º–æ–Ω","—á–æ—ç–Ω–≥ –º–æ–Ω",
    "lipa noi","lipanoi","–ª–∏–ø–∞ –Ω–æ–π",
    "taling ngam","—Ç–∞–ª–∏–Ω–≥ –Ω—å–≥–∞–º","—Ç–∞–ª–∏–Ω–Ω–≥–∞–º"
]

def parse_listing_text(text: str, msg_link: str, listing_id: str) -> Dict[str, Any]:
    t = text.lower()

    # location
    location = ""
    for w in REGION_WORDS:
        if w in t:
            location = w
            break

    # bedrooms
    bedrooms = ""
    m = re.search(r"(\d+)\s*(—Å–ø–∞–ª—å–Ω|bed(room)?s?)", t)
    if m:
        bedrooms = m.group(1)

    # bathrooms
    bathrooms = ""
    mb = re.search(r"(\d+)\s*(–≤–∞–Ω–Ω|bath(room)?s?)", t)
    if mb:
        bathrooms = mb.group(1)

    # monthly price
    price = ""
    mp = re.search(r"(\d[\d\s]{3,})(?:\s*(?:baht|–±–∞—Ç|‡∏ø|b|thb))?", t)
    if mp:
        price = re.sub(r"\s+", "", mp.group(1))

    pets = "unknown"
    if "–±–µ–∑ –ø–∏—Ç–æ–º—Ü" in t or "no pets" in t:
        pets = "no"
    elif "—Å –ø–∏—Ç–æ–º—Ü" in t or "pets ok" in t or "pet friendly" in t:
        pets = "yes"

    pool = "yes" if ("pool" in t or "–±–∞—Å—Å–µ–π–Ω" in t) else "no"
    furnished = "yes" if ("furnished" in t or "–º–µ–±–µ–ª" in t) else "unknown"

    title = ""
    mt = re.search(r"^([^\n]{10,80})", text.strip())
    if mt:
        title = mt.group(1)

    return {
        "listing_id": listing_id,
        "created_at": datetime.utcnow().isoformat(timespec="seconds"),
        "title": title,
        "description": text[:2000],
        "location": location,
        "bedrooms": bedrooms,
        "bathrooms": bathrooms,
        "price_month": price,
        "pets_allowed": pets,
        "utilities": "unknown",
        "electricity_rate": "",
        "water_rate": "",
        "area_m2": "",
        "pool": pool,
        "furnished": furnished,
        "link": msg_link,
        "images": "",
        "tags": "",
        "raw_text": text,
    }

# ---------- –ü–æ–¥–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ----------
def suggest_listings(area: str, bedrooms: int, budget: int) -> List[Dict[str, Any]]:
    area_l = (area or "").lower().strip()
    res: List[Dict[str, Any]] = []
    for it in IN_MEMORY_LISTINGS:
        ok_area = True if not area_l else area_l in (it.get("location") or "").lower()
        try:
            bd = int(it.get("bedrooms") or 0)
        except Exception:
            bd = 0
        try:
            pr = int(it.get("price_month") or 0)
        except Exception:
            pr = 0
        if ok_area and (bd >= bedrooms or bd == 0) and (budget == 0 or pr == 0 or pr <= budget):
            res.append(it)
    res.sort(key=lambda x: int(x.get("price_month") or 10**9))
    return res[:5]

# ---------- –î–∏–∞–ª–æ–≥ /rent ----------
AREA, BEDROOMS, BUDGET, PETS, GUESTS, NOTES = range(6)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(GREETING_MESSAGE)

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–∫, –æ—Ç–º–µ–Ω–∏–ª. –ï—Å–ª–∏ —á—Ç–æ ‚Äî /rent –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
    return ConversationHandler.END

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ù–∞—á–Ω—ë–º. –ö–∞–∫–æ–π —Ä–∞–π–æ–Ω –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–∞–µ–Ω–∞–º, –ë–æ–ø—Ö—É—Ç, –ß–∞–≤–µ–Ω–≥, –õ–∞–º–∞–π)"
    )
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["area"] = (update.message.text or "").strip()
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ?")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = re.search(r"\d+", (update.message.text or ""))
    context.user_data["bedrooms"] = int(m.group()) if m else 1
    await update.message.reply_text("–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤ –º–µ—Å—è—Ü (–±–∞—Ç)?")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    s = (update.message.text or "").replace(" ", "")
    m = re.search(r"\d+", s)
    context.user_data["budget"] = int(m.group()) if m else 0
    await update.message.reply_text("–° –ø–∏—Ç–æ–º—Ü–∞–º–∏? (–¥–∞/–Ω–µ—Ç)")
    return PETS

async def rent_pets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    txt = (update.message.text or "").strip().lower()
    context.user_data["pets"] = "yes" if txt in ("–¥–∞","yes","y","+") else ("no" if txt in ("–Ω–µ—Ç","no","n","-") else "unknown")
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—Ç—å?")
    return GUESTS

async def rent_guests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    m = re.search(r"\d+", (update.message.text or ""))
    context.user_data["guests"] = int(m.group()) if m else 1
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –±–∞—Å—Å–µ–π–Ω, –≤–∏–¥ –Ω–∞ –º–æ—Ä–µ, —Ä—è–¥–æ–º —Å —à–∫–æ–ª–æ–π).")
    return NOTES

async def rent_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["notes"] = (update.message.text or "").strip()

    # –ò—Ç–æ–≥–∏
    area = context.user_data.get("area","")
    bedrooms = int(context.user_data.get("bedrooms",1))
    budget = int(context.user_data.get("budget",0))
    pets = context.user_data.get("pets","unknown")
    guests = int(context.user_data.get("guests",1))
    notes = context.user_data.get("notes","")

    # –ü–æ–¥–±–æ—Ä
    offers = suggest_listings(area, bedrooms, budget)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if offers:
        lines = ["–ù–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"]
        for o in offers:
            line = (
                f"‚Ä¢ {o.get('title') or '–õ–æ—Ç'} ‚Äî —Å–ø–∞–ª–µ–Ω: {o.get('bedrooms') or '?'}, "
                f"—Ü–µ–Ω–∞: {o.get('price_month') or '?'}, —Ä–∞–π–æ–Ω: {o.get('location') or '?'}\n"
                f"{o.get('link') or ''}"
            )
            lines.append(line)
        await update.message.reply_text("\n\n".join(lines))
    else:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –Ø –ø–µ—Ä–µ–¥–∞–º –∑–∞—è–≤–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.")

    # –ó–∞–ø–∏—Å—å –≤ Requests
    req_row = {
        "request_id": f"{update.effective_user.id}_{int(datetime.utcnow().timestamp())}",
        "created_at": datetime.utcnow().isoformat(timespec="seconds"),
        "user_id": update.effective_user.id if update.effective_user else "",
        "username": (update.effective_user.username if update.effective_user else "") or "",
        "area": area, "bedrooms": bedrooms, "budget": budget,
        "pets": pets, "guests": guests, "notes": notes,
        "matched_count": len(offers),
    }
    append_request_row(req_row)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    if MANAGER_CHAT_ID:
        try:
            text = (
                "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"–†–∞–π–æ–Ω: {area}\n–°–ø–∞–ª–µ–Ω: {bedrooms}\n–ë—é–¥–∂–µ—Ç: {budget}\n–ü–∏—Ç–æ–º—Ü—ã: {pets}\n"
                f"–ñ–∏–ª—å—Ü—ã: {guests}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {notes}\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{(update.effective_user.username or '‚Äî')}"
            )
            await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=text)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: %s", e)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ–º —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ: /rent")
    return ConversationHandler.END

# ---------- –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞ ----------
async def on_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    msg = update.channel_post
    if not msg:
        return

    uname = (msg.chat.username or "").lower()
    if PUBLIC_CHANNEL and uname != PUBLIC_CHANNEL.lower():
        return  # –Ω–µ –Ω–∞—à –∫–∞–Ω–∞–ª

    text = (msg.text or msg.caption or "").strip()
    if not text:
        return

    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.chat.username:
        link = f"https://t.me/{msg.chat.username}/{msg.message_id}"
    else:
        link = ""

    listing_id = f"{msg.chat.id}_{msg.message_id}"
    row = parse_listing_text(text, link, listing_id)
    append_listings_row(row)
    log.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω –ª–æ—Ç %s –∏–∑ –∫–∞–Ω–∞–ª–∞ @%s", listing_id, msg.chat.username)

# ---------- –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ----------
def make_app() -> Application:
    app = ApplicationBuilder().token(TOKEN).build()

    # /start, /rent, /cancel
    app.add_handler(CommandHandler("start", cmd_start))

    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            AREA:      [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS:  [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            BUDGET:    [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_budget)],
            PETS:      [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_pets)],
            GUESTS:    [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_guests)],
            NOTES:     [MessageHandler(filters.ChatType.PRIVATE & filters.TEXT & ~filters.COMMAND, rent_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)

    # –ü–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    app.add_handler(MessageHandler(filters.ChatType.CHANNEL & (filters.TEXT | filters.CAPTION), on_channel_post))

    return app

# ---------- –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞ ----------
async def run_webhook(app: Application) -> None:
    """–ó–∞–ø—É—Å–∫ –Ω–∞ Render (–≤–µ–±—Ö—É–∫). –ù–∏–∫–∞–∫–∏—Ö —Ä—É—á–Ω—ã—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å loop."""
    webhook_url = f"{BASE_URL}{WEBHOOK_PATH if WEBHOOK_PATH.startswith('/') else '/'+WEBHOOK_PATH}"
    port = int(os.environ.get("PORT", "10000"))

    log.info("Starting webhook at %s (PORT=%s)", webhook_url, port)

    await app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=WEBHOOK_PATH.lstrip("/"),
        webhook_url=webhook_url,
        allowed_updates=("message", "channel_post", "callback_query"),
        drop_pending_updates=True,   # —á–∏—Å—Ç–∏–º –æ—á–µ—Ä–µ–¥—å –∏ –∏–∑–±–µ–≥–∞–µ–º 409
    )

async def run_polling(app: Application) -> None:
    """–õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (polling)."""
    await app.run_polling(
        allowed_updates=("message", "channel_post", "callback_query"),
        drop_pending_updates=True,
    )

def main() -> None:
    setup_gsheets()
    app = make_app()

    async def _run():
        me = await app.bot.get_me()
        log.info("Bot started: @%s", me.username)
        if BASE_URL:
            await run_webhook(app)
        else:
            await run_polling(app)

    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è loop
    asyncio.run(_run())

if __name__ == "__main__":
    main()
