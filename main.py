import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, Optional, Tuple

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackContext,
    filters,
)
from dateutil import parser as dtparser
import requests

# ==== –õ–û–ì–ò ====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")


# ==== ENV ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE   = os.getenv("WEBHOOK_BASE", "").rstrip("/")
PORT           = int(os.getenv("PORT", "10000"))
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip() or os.getenv("OPENAI_API_KEY_V1", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

GROUP_CHAT_ID  = os.getenv("GROUP_CHAT_ID", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä "-4908974521"
SHEET_ID       = os.getenv("GOOGLE_SHEET_ID", "").strip()
GOOGLE_CREDS   = os.getenv("GOOGLE_CREDENTIALS", "").strip()  # JSON service account

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã
LINK_SITE      = os.getenv("LINK_SITE", "https://cozy.asia")
LINK_FEED      = os.getenv("LINK_FEED", "https://t.me/SamuiRental")
LINK_VILLAS    = os.getenv("LINK_VILLAS", "https://t.me/arenda_vill_samui")
LINK_IG        = os.getenv("LINK_IG", "https://www.instagram.com/cozy.asia")

# –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
def promo_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=LINK_SITE)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=LINK_FEED)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=LINK_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=LINK_IG)],
    ])


# ==== –£–¢–ò–õ–ò–¢–´ ====
def parse_date_human(s: str) -> Optional[str]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—ã –≤ –ª—é–±–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ–º –≤–∏–¥–µ: 01.12.2025, 2025-12-01, 1/12/25, 1 —è–Ω–≤ 2026 –∏ —Ç.–ø.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç YYYY-MM-DD –ª–∏–±–æ None.
    """
    s = (s or "").strip()
    if not s:
        return None
    try:
        dt = dtparser.parse(s, dayfirst=True, fuzzy=True)
        return dt.strftime("%Y-%m-%d")
    except Exception:
        return None


def safe_post_to_group(text: str, app: Application) -> None:
    if not GROUP_CHAT_ID:
        return
    try:
        app.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=text, disable_web_page_preview=True)
    except Exception as e:
        log.warning("Cannot post to group: %s", e)


def openai_chat(messages: list[Dict[str, str]]) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤ OpenAI Responses API –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö SDK (—á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
    """
    if not OPENAI_API_KEY:
        return "–°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –º–æ–¥–µ–ª–∏ –ò–ò. –ù–∞–ø–∏—à–∏—Ç–µ /rent, –∞ —Ç–∞–∫–∂–µ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ."
    try:
        url = "https://api.openai.com/v1/chat/completions"
        payload = {
            "model": OPENAI_MODEL,
            "messages": messages,
            "temperature": 0.7,
        }
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json",
        }
        res = requests.post(url, headers=headers, json=payload, timeout=30)
        res.raise_for_status()
        data = res.json()
        return data["choices"][0]["message"]["content"].strip()
    except Exception as e:
        log.error("OpenAI error: %s", e)
        return "–ü–æ—Ö–æ–∂–µ, –ò–ò —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –Ø –≤—Å—ë —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å: –Ω–∞–∂–º–∏—Ç–µ /rent –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ."


# ==== GOOGLE SHEETS ====
def sheets_append(row: Dict[str, Any]) -> None:
    """
    –ü–∏—à–µ–º —Å—Ç—Ä–æ–∫—É –ª–∏–¥–∞ –≤ Google Sheets (–≤ —à–∏—Ç 'Leads').
    –ù–∏–∫–∞–∫ –Ω–µ –≤–∞–ª–∏–º –±–æ—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥ –∏ –≤—Å—ë.
    """
    if not (SHEET_ID and GOOGLE_CREDS):
        log.info("Sheets disabled: no SHEET_ID or GOOGLE_CREDENTIALS")
        return
    try:
        import gspread
        from google.oauth2.service_account import Credentials

        creds_dict = json.loads(GOOGLE_CREDS)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        creds = Credentials.from_service_account_info(creds_dict, scopes=scopes)
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(SHEET_ID)
        ws = sh.worksheet("Leads")

        values = [
            datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            str(row.get("chat_id", "")),
            str(row.get("username", "")),
            str(row.get("type", "")),
            str(row.get("area", "")),
            str(row.get("bedrooms", "")),
            str(row.get("budget", "")),
            str(row.get("checkin", "")),
            str(row.get("checkout", "")),
            str(row.get("notes", "")),
        ]
        ws.append_row(values, value_input_option="RAW")
        log.info("Lead appended to sheet")
    except Exception as e:
        log.warning("Sheets append failed: %s", e)


# ==== –°–û–°–¢–û–Ø–ù–ò–Ø –û–ü–†–û–°–ù–ò–ö–ê ====
(
    Q_TYPE,
    Q_BUDGET,
    Q_AREA,
    Q_BEDS,
    Q_CHECKIN,
    Q_CHECKOUT,
    Q_NOTES,
) = range(7)

def start_text() -> str:
    return (
        "üñêÔ∏è –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cozy Asia Real Estate Bot¬ª\n\n"
        "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
        "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
        "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
        "üçπ –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
        "üîß –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent.\n"
        "–Ø —Å–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É."
    )

async def cmd_start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(start_text(), reply_markup=promo_keyboard())

async def cmd_cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–û–∫–µ–π, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–Ω–∫–µ—Ç—É. –ú–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è —á—Ç–æ —É–≥–æ–¥–Ω–æ.")
    return ConversationHandler.END


# ==== –û–ü–†–û–° /rent ====
async def rent_entry(update: Update, context: CallbackContext) -> int:
    context.user_data["lead"] = {
        "chat_id": update.effective_user.id,
        "username": update.effective_user.username or update.effective_user.full_name,
    }
    await update.message.reply_text("–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/7. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?")
    return Q_TYPE

async def rent_type(update: Update, context: CallbackContext) -> int:
    context.user_data["lead"]["type"] = update.message.text.strip()
    await update.message.reply_text("2/7. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return Q_BUDGET

async def rent_budget(update: Update, context: CallbackContext) -> int:
    context.user_data["lead"]["budget"] = update.message.text.strip()
    await update.message.reply_text("3/7. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return Q_AREA

async def rent_area(update: Update, context: CallbackContext) -> int:
    context.user_data["lead"]["area"] = update.message.text.strip()
    await update.message.reply_text("4/7. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return Q_BEDS

async def rent_beds(update: Update, context: CallbackContext) -> int:
    context.user_data["lead"]["bedrooms"] = update.message.text.strip()
    await update.message.reply_text("5/7. –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.12.2025)?")
    return Q_CHECKIN

async def rent_checkin(update: Update, context: CallbackContext) -> int:
    dt = parse_date_human(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2025-12-01).")
        return Q_CHECKIN
    context.user_data["lead"]["checkin"] = dt
    await update.message.reply_text("6/7. –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 01.01.2026)?")
    return Q_CHECKOUT

async def rent_checkout(update: Update, context: CallbackContext) -> int:
    dt = parse_date_human(update.message.text)
    if not dt:
        await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–∞—Ç—É. –ù–∞–ø–∏—à–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä 2026-01-01).")
        return Q_CHECKOUT
    context.user_data["lead"]["checkout"] = dt
    await update.message.reply_text("7/7. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

def format_lead_card(lead: Dict[str, Any], user_mention: str) -> str:
    return (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
        f"–ö–ª–∏–µ–Ω—Ç: {user_mention}\n"
        f"–¢–∏–ø: {lead.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {lead.get('area','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {lead.get('budget','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {lead.get('bedrooms','')}\n"
        f"Check-in: {lead.get('checkin','')} | Check-out: {lead.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {lead.get('notes','')}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')}"
    )

async def rent_notes(update: Update, context: CallbackContext) -> int:
    lead = context.user_data.get("lead", {})
    lead["notes"] = update.message.text.strip()

    # 1) –ü–∏—à–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
    sheets_append({
        "chat_id": lead.get("chat_id"),
        "username": lead.get("username"),
        "type": lead.get("type"),
        "area": lead.get("area"),
        "bedrooms": lead.get("bedrooms"),
        "budget": lead.get("budget"),
        "checkin": lead.get("checkin"),
        "checkout": lead.get("checkout"),
        "notes": lead.get("notes"),
    })

    # 2) –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    user_mention = f"@{update.effective_user.username}" if update.effective_user.username else update.effective_user.full_name
    safe_post_to_group(format_lead_card(lead, user_mention), context.application)

    # 3) –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é + –º—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —á–∞—Ç—É
    txt = (
        "–ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚úÖ\n"
        "–Ø —Ç–∞–∫–∂–µ –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø—Ä–∏—à–ª—é –≤–∞–º. "
        "–ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä ‚Äî —è –Ω–∞ —Å–≤—è–∑–∏.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /rent, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É."
    )
    await update.message.reply_text(txt, reply_markup=promo_keyboard())
    return ConversationHandler.END


# ==== –°–í–û–ë–û–î–ù–´–ô GPT-–ß–ê–¢ ====
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia –¥–ª—è –æ—Å—Ç—Ä–æ–≤–∞ –°–∞–º—É–∏. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. "
    "–ö–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ ¬´–≥–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã¬ª, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º ‚Äî "
    "–≤—Å–µ–≥–¥–∞ –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ –Ω–∞—à–∏–º —Ä–µ—Å—É—Ä—Å–∞–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–Ω–∫–µ—Ç—É /rent. "
    "–ù–æ –ø—Ä–∏ —ç—Ç–æ–º –æ—Ç–≤–µ—á–∞–π –Ω–∞ –ª—é–±—ã–µ –æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ–≥–æ–¥–∞, –ø–ª—è–∂–∏, —Ä–∞–π–æ–Ω—ã, –±—ã—Ç –∏ —Ç.–¥.)."
)

def build_messages(user_text: str, username: str) -> list[Dict[str, str]]:
    return [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (@{username}): {user_text}"},
    ]

async def free_chat(update: Update, context: CallbackContext) -> None:
    text = update.message.text or ""
    username = update.effective_user.username or update.effective_user.full_name
    log.info("TEXT from %s: %s", username, text)

    answer = openai_chat(build_messages(text, username))
    tail = (
        "\n\nüîß –°–∞–º—ã–π –¥–µ–π—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± ‚Äî –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É /rent. "
        "–°–¥–µ–ª–∞—é –ø–æ–¥–±–æ—Ä–∫—É –ª–æ—Ç–æ–≤ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"‚Ä¢ –°–∞–π—Ç: {LINK_SITE}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {LINK_FEED}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {LINK_VILLAS}\n"
        f"‚Ä¢ Instagram: {LINK_IG}"
    )
    try:
        await update.message.reply_text(answer + tail, reply_markup=promo_keyboard(), disable_web_page_preview=True)
    except Exception as e:
        log.error("Reply error: %s", e)


# ==== –û–®–ò–ë–ö–ò ====
async def on_error(update: Optional[Update], context: CallbackContext) -> None:
    log.exception("Exception while handling update: %s", context.error)


# ==== –ü–†–ò–õ–û–ñ–ï–ù–ò–ï ====
def build_application() -> Application:
    if not TELEGRAM_TOKEN:
        raise RuntimeError("ENV TELEGRAM_TOKEN is required")

    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))

    # –û–ø—Ä–æ—Å–Ω–∏–∫ /rent
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_entry)],
        states={
            Q_TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            Q_BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            Q_AREA:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            Q_BEDS:     [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_beds)],
            Q_CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_checkout)],
            Q_NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
        per_chat=True,
        per_user=True,
    )
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç ‚Äî –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –ª–æ–≤–∏—Ç—å –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_chat))

    # –û—à–∏–±–∫–∏
    app.add_error_handler(on_error)
    return app


def main() -> None:
    app = build_application()

    # –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–±–µ–∑ –≤–µ–±—Ö—É–∫–∞) ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if not WEBHOOK_BASE:
        log.info("Starting long-polling (WEBHOOK_BASE not set)")
        app.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)
        return

    # Render: –≤–µ–±—Ö—É–∫
    path = f"/webhook/{TELEGRAM_TOKEN}"
    url = f"{WEBHOOK_BASE}{path}"
    log.info("=> run_webhook port=%s url=%s", PORT, url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=f"{TELEGRAM_TOKEN}",
        webhook_url=url,
        allowed_updates=Update.ALL_TYPES,
        close_loop=False,
    )


if __name__ == "__main__":
    main()
