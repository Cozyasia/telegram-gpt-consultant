# main.py ‚Äî Cozy Asia Bot (python-telegram-bot v20+, WEBHOOK –¥–ª—è Render Web Service)
# –§—É–Ω–∫—Ü–∏–∏:
# - /start —Å —Ç–≤–æ–∏–º –Ω–æ–≤—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
# - /rent –∞–Ω–∫–µ—Ç–∞ -> –∑–∞–ø–∏—Å—å –≤ Google Sheets -> –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
# - –ü–µ—Ä–µ—Ö–≤–∞—Ç –ª—é–±—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ -> –≤–µ—Å—Ç–∏ –Ω–∞ —Ç–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã
# - –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–≤–µ—Ç—É–µ—Ç –¥—Ä—É–≥–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞/FB-–≥—Ä—É–ø–ø—ã/–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä—ã
# - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É (–ª–∏—á–∫–∞) –∏ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
# - /id –∏ /groupid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Chat ID
# - Webhook: –±–∏–Ω–¥–∏–º—Å—è –Ω–∞ 0.0.0.0:$PORT, URL = WEBHOOK_BASE/webhook/<BOT_TOKEN>

import os
import json
import time
import logging
from datetime import datetime

import requests
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–û–ì–ò
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢–í–û–ò –°–°–´–õ–ö–ò/–ö–û–ù–¢–ê–ö–¢–´
WEBSITE_URL       = "https://www.cozy-asiath.com/"
TG_CHANNEL_MAIN   = "https://t.me/SamuiRental"
TG_CHANNEL_VILLAS = "https://t.me/arenda_vill_samui"
INSTAGRAM_URL     = "https://www.instagram.com/cozy.asia?igsh=cmt1MHA0ZmM3OTRu"

# –º–µ–Ω–µ–¥–∂–µ—Ä: —Å—Å—ã–ª–∫—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –∞–Ω–∫–µ—Ç—ã
MANAGER_TG_URL  = "https://t.me/cozy_asia"   # @Cozy_asia
MANAGER_CHAT_ID = 5978240436                 # Cozy Asia manager (–ª–∏—á–∫–∞)

# —Ä–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–∏—Å–ª–æ–º —Ç—É—Ç –∏–ª–∏ —á–µ—Ä–µ–∑ ENV GROUP_CHAT_ID=-100‚Ä¶)
GROUP_CHAT_ID = None
_env_group = os.getenv("GROUP_CHAT_ID")
if _env_group:
    try:
        GROUP_CHAT_ID = int(_env_group)
    except Exception:
        log.warning("GROUP_CHAT_ID –∏–∑ ENV –Ω–µ int: %r", _env_group)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
START_TEXT = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
    "–û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–ù–û–ü–ö–ò/CTA
def build_cta_public() -> tuple[str, InlineKeyboardMarkup]:
    kb = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", url=WEBSITE_URL)],
        [InlineKeyboardButton("üì£ –¢–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª (–≤—Å–µ –ª–æ—Ç—ã)", url=TG_CHANNEL_MAIN)],
        [InlineKeyboardButton("üè° –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º", url=TG_CHANNEL_VILLAS)],
        [InlineKeyboardButton("üì∑ Instagram", url=INSTAGRAM_URL)],
    ]
    msg = (
        "üèùÔ∏è –ü–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å:\n"
        f"‚Ä¢ –°–∞–π—Ç: {WEBSITE_URL}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª —Å –ª–æ—Ç–∞–º–∏: {TG_CHANNEL_MAIN}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø–æ –≤–∏–ª–ª–∞–º: {TG_CHANNEL_VILLAS}\n"
        f"‚Ä¢ Instagram: {INSTAGRAM_URL}\n\n"
        "‚úçÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –º–æ–∂–Ω–æ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞—è–≤–∫–∏ –≤ /rent ‚Äî "
        "—ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    )
    return msg, InlineKeyboardMarkup(kb)

def build_cta_with_manager() -> tuple[str, InlineKeyboardMarkup]:
    msg, kb = build_cta_public()
    if MANAGER_TG_URL:
        kb.inline_keyboard.append([InlineKeyboardButton("üë§ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=MANAGER_TG_URL)])
        msg += "\n\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç –Ω–∏–∂–µ."
    return msg, kb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–ê–ü–†–ï–¢ ¬´—Å–æ–≤–µ—Ç–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤¬ª
BLOCK_PATTERNS = (
    "–º–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤","–Ω–∞ facebook","–≤ –≥—Ä—É–ø–ø–∞—Ö facebook",
    "–∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞—Ö","marketplace","airbnb","booking","renthub","fazwaz",
    "dotproperty","list with","contact local agencies","facebook groups"
)
def sanitize_competitors(text: str) -> str:
    if not text:
        return text
    low = text.lower()
    if any(p in low for p in BLOCK_PATTERNS):
        msg, _ = build_cta_public()
        return "–ß—Ç–æ–±—ã –Ω–µ —Ç—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏, –ª—É—á—à–µ —Å—Ä–∞–∑—É –∫ –Ω–∞–º.\n\n" + msg
    return text

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –¢—Ä–∏–≥–≥–µ—Ä—ã ¬´–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏¬ª
REALTY_KEYWORDS = {
    "–∞—Ä–µ–Ω–¥–∞","—Å–¥–∞—Ç—å","—Å–Ω–∏–º—É","—Å–Ω—è—Ç—å","–¥–æ–º","–≤–∏–ª–ª–∞","–∫–≤–∞—Ä—Ç–∏—Ä–∞","–∫–æ–º–Ω–∞—Ç—ã","—Å–ø–∞–ª—å–Ω–∏",
    "–ø–æ–∫—É–ø–∫–∞","–∫—É–ø–∏—Ç—å","–ø—Ä–æ–¥–∞–∂–∞","–ø—Ä–æ–¥–∞—Ç—å","–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å","–∫–æ–Ω–¥–æ","condo","—Ç–∞—É–Ω—Ö–∞—É—Å",
    "bungalow","bungalo","house","villa","apartment","rent","buy","sale","lease","property",
    "lamai","–ª–∞–º–∞–π","–±–æ–ø—Ö—É—Ç","–º–∞–µ–Ω–∞–º","—á–æ–Ω–≥ –º–æ–Ω","—á–∞–≤–µ–Ω–≥","bophut","maenam","choeng mon","chaweng"
}
def mentions_realty(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in REALTY_KEYWORDS)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–ù–ö–ï–¢–ê /rent
TYPE, BUDGET, AREA, BEDROOMS, NOTES = range(5)

async def rent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"] = {}
    await update.message.reply_text(
        "–ù–∞—á–Ω—ë–º –ø–æ–¥–±–æ—Ä.\n1/5. –ö–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç: –∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º –∏–ª–∏ –≤–∏–ª–ª–∞?"
    )
    return TYPE

async def rent_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["type"] = (update.message.text or "").strip()
    await update.message.reply_text("2/5. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –≤ –±–∞—Ç–∞—Ö (–º–µ—Å—è—Ü)?")
    return BUDGET

async def rent_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["budget"] = (update.message.text or "").strip()
    await update.message.reply_text("3/5. –í –∫–∞–∫–æ–º —Ä–∞–π–æ–Ω–µ –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ –∂–∏—Ç—å?")
    return AREA

async def rent_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["area"] = (update.message.text or "").strip()
    await update.message.reply_text("4/5. –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–ø–∞–ª–µ–Ω?")
    return BEDROOMS

async def rent_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["bedrooms"] = (update.message.text or "").strip()
    await update.message.reply_text("5/5. –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è? (–±–ª–∏–∑–æ—Å—Ç—å –∫ –ø–ª—è–∂—É, —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return NOTES

async def rent_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["form"]["notes"] = (update.message.text or "").strip()
    form = context.user_data["form"]

    ok, row_url = await write_lead_to_sheets(update, context, form)
    context.user_data["rental_form_completed"] = True
    await notify_staff(update, context, form, row_url=row_url)

    msg, kb = build_cta_with_manager()
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n" + msg,
                                    reply_markup=kb, disable_web_page_preview=True)
    return ConversationHandler.END

async def rent_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ ‚Äî –ø–∏—à–∏—Ç–µ /rent.")
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Google Sheets
# ENV:
#   TELEGRAM_BOT_TOKEN
#   GOOGLE_SERVICE_ACCOUNT_JSON  (–ø–æ–ª–Ω—ã–π JSON –∫–ª—é—á –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
#   GOOGLE_SHEETS_DB_ID
#   GOOGLE_SHEETS_SHEET_NAME (–Ω–µ–æ–±—è–∑., –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'Leads')
async def write_lead_to_sheets(update: Update, context: ContextTypes.DEFAULT_TYPE, form: dict):
    sheet_id = os.getenv("GOOGLE_SHEETS_DB_ID")
    if not sheet_id:
        log.warning("GOOGLE_SHEETS_DB_ID not set; skipping Sheets write.")
        return False, None

    try:
        import gspread
        from google.oauth2.service_account import Credentials

        svc_json = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON")
        info = json.loads(svc_json) if svc_json else {}
        creds = Credentials.from_service_account_info(
            info,
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
            ],
        )
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        ws_name = os.getenv("GOOGLE_SHEETS_SHEET_NAME", "Leads")
        try:
            ws = sh.worksheet(ws_name)
        except Exception:
            ws = sh.add_worksheet(title=ws_name, rows=1000, cols=20)

        if not ws.get_all_values():
            ws.append_row(
                ["created_at","user_id","username","first_name","type","area","budget","bedrooms","notes","source"],
                value_input_option="USER_ENTERED"
            )

        row = [
            datetime.now().strftime("%Y-%m-%d %H:%M"),
            str(update.effective_user.id),
            update.effective_user.username or "",
            update.effective_user.first_name or "",
            form.get("type",""),
            form.get("area",""),
            form.get("budget",""),
            form.get("bedrooms",""),
            form.get("notes",""),
            "telegram_bot",
        ]
        ws.append_row(row, value_input_option="USER_ENTERED")

        row_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/edit#gid={ws.id}"
        return True, row_url
    except Exception as e:
        log.exception("Sheets write failed: %s", e)
        return False, None

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–µ
async def notify_staff(update: Update, context: ContextTypes.DEFAULT_TYPE, form: dict, row_url: str | None):
    text = (
        "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n\n"
        f"–ö–ª–∏–µ–Ω—Ç: @{update.effective_user.username or '–±–µ–∑_username'} "
        f"(ID: {update.effective_user.id})\n"
        f"–¢–∏–ø: {form.get('type','‚Äî')}\n"
        f"–†–∞–π–æ–Ω: {form.get('area','‚Äî')}\n"
        f"–ë—é–¥–∂–µ—Ç: {form.get('budget','‚Äî')}\n"
        f"–°–ø–∞–ª–µ–Ω: {form.get('bedrooms','‚Äî')}\n"
        f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {form.get('notes','‚Äî')}\n"
        f"–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
    )
    if row_url:
        text += f"\nüóÇ –¢–∞–±–ª–∏—Ü–∞: {row_url}"

    for chat_id in (MANAGER_CHAT_ID, GROUP_CHAT_ID):
        if not chat_id:
            continue
        try:
            await context.bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True)
        except Exception as e:
            log.warning("Notify failed for %s: %s", chat_id, e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ GPT-–∑–∞–≥–ª—É—à–∫–∞ (—Å –ø–æ–ª–∏—Ç–∏–∫–æ–π)
async def call_gpt(user_text: str) -> str:
    return "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ª—É—á—à–µ —Å—Ä–∞–∑—É —É –Ω–∞—Å ‚Äî –∂–º–∏—Ç–µ /rent –∏–ª–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ."

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç (–ª–æ–≤–∏–º realty)
async def free_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.effective_message.text or ""
    completed = bool(context.user_data.get("rental_form_completed", False))

    if mentions_realty(text):
        msg, kb = (build_cta_with_manager() if completed else build_cta_public())
        await update.effective_message.reply_text(msg, reply_markup=kb, disable_web_page_preview=True)
        return

    reply = sanitize_competitors(await call_gpt(text))
    await update.effective_message.reply_text(reply, disable_web_page_preview=True)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–í–∞—à Chat ID: {update.effective_chat.id}\n–í–∞—à User ID: {update.effective_user.id}"
    )

async def cmd_groupid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"Group chat ID: {update.effective_chat.id}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Preflight (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
def preflight_release_slot(token: str, attempts: int = 2):
    # –î–ª—è webhook –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫/–æ—á–µ—Ä–µ–¥—å
    base = f"https://api.telegram.org/bot{token}"
    try:
        requests.post(f"{base}/deleteWebhook", params={"drop_pending_updates": True}, timeout=10)
        log.info("deleteWebhook -> OK")
    except Exception as e:
        log.warning("deleteWebhook error: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN (WEBHOOK –¥–ª—è Render)
def main():
    token = os.environ["TELEGRAM_BOT_TOKEN"]

    # –ü—É–±–ª–∏—á–Ω—ã–π https URL —Å–µ—Ä–≤–∏—Å–∞ (Render)
    base_url = os.getenv("WEBHOOK_BASE") or os.getenv("RENDER_EXTERNAL_URL")
    if not base_url:
        raise RuntimeError("WEBHOOK_BASE (–∏–ª–∏ RENDER_EXTERNAL_URL) –Ω–µ –∑–∞–¥–∞–Ω.")

    preflight_release_slot(token)

    app = ApplicationBuilder().token(token).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("groupid", cmd_groupid))

    # –ê–Ω–∫–µ—Ç–∞ /rent
    conv = ConversationHandler(
        entry_points=[CommandHandler("rent", rent_start)],
        states={
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_type)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_budget)],
            AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_area)],
            BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_bedrooms)],
            NOTES: [MessageHandler(filters.TEXT & ~filters.COMMAND, rent_finish)],
        },
        fallbacks=[CommandHandler("cancel", rent_cancel)],
    )
    app.add_handler(conv)

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text_handler))

    # Webhook binding
    port = int(os.getenv("PORT", "10000"))   # Render –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç $PORT
    url_path = token                         # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å (—Ç–æ–∫–µ–Ω)
    webhook_url = f"{base_url.rstrip('/')}/webhook/{url_path}"

    logging.info(f"Starting webhook on 0.0.0.0:{port}, url={webhook_url}")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{url_path}",   # –ø—É—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        webhook_url=webhook_url,          # –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è Telegram
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
