# main.py
import os, json, logging, re
from datetime import datetime
from typing import Dict, Any, List, Optional

import dateparser
import gspread
from oauth2client.service_account import ServiceAccountCredentials

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, ApplicationBuilder, ContextTypes,
    CommandHandler, MessageHandler, filters
)

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("cozyasia-bot")

# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------
def env(key: str, default: Optional[str] = None) -> str:
    val = os.environ.get(key)
    if val is None:
        if default is not None:
            return default
        raise RuntimeError(f"ENV {key} is required")
    return val

def parse_int(s: str) -> Optional[int]:
    if s is None:
        return None
    digits = re.sub(r"[^\d]", "", s)
    return int(digits) if digits else None

def parse_date_human(s: str) -> Optional[str]:
    if not s:
        return None
    dt = dateparser.parse(s)
    return dt.strftime("%Y-%m-%d") if dt else None

def now_utc_str() -> str:
    return datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

# -------------------- –ù–ê–°–¢–†–û–ô–ö–ò/–°–°–´–õ–ö–ò --------------------
SITE_URL        = os.environ.get("SITE_URL", "https://cozy.asia")
CHANNEL_PUBLIC  = os.environ.get("CHANNEL_PUBLIC", "https://t.me/cozy_asia")
CHANNEL_SALES   = os.environ.get("CHANNEL_SALES", "https://t.me/cozyasia_sales")
MANAGER_LINK    = os.environ.get("MANAGER_LINK", "https://t.me/cozy_asia")

def resources_block() -> str:
    # –∫—Ä–∞—Å–∏–≤—ã–π –±–ª–æ–∫ —Å—Å—ã–ª–æ–∫ –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë–º –∫ /rent
    lines = [
        "üìå **–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ Cozy Asia**",
        f"üåê –°–∞–π—Ç: {SITE_URL}",
        f"üì£ –ö–∞–Ω–∞–ª: {CHANNEL_PUBLIC}",
        f"üè° –ü–æ–¥–±–æ—Ä/–ø—Ä–æ–¥–∞–∂–∏: {CHANNEL_SALES}",
        f"üë§ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É: {MANAGER_LINK}",
        "",
        "üëâ –ì–æ—Ç–æ–≤—ã –∫ –ø–æ–¥–±–æ—Ä—É? –ù–∞–∂–º–∏—Ç–µ /rent ‚Äî –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."
    ]
    return "\n".join(lines)

# -------------------- GOOGLE SHEETS --------------------
_gs_client = None
_sheet = None

def init_sheets() -> None:
    global _gs_client, _sheet
    if _sheet:
        return

    creds_json = env("GOOGLE_CREDS_JSON")
    try:
        # –¥–æ–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        info = json.loads(creds_json)
    except json.JSONDecodeError:
        # –∏–Ω–æ–≥–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã / —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø—Ä–æ–±—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ
        info = json.loads(creds_json.encode("utf-8").decode("unicode_escape"))

    scope = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_dict(info, scope)
    _gs_client = gspread.authorize(creds)

    sheet_id = env("GOOGLE_SHEETS_ID")
    sh = _gs_client.open_by_key(sheet_id)
    _sheet = sh.worksheet("Leads")  # –∏–º—è –≤–∫–ª–∞–¥–∫–∏ –∫–∞–∫ –≤ —Ç–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü–µ

def write_lead_row(row: List[Any]) -> None:
    init_sheets()
    _sheet.append_row(row, value_input_option="USER_ENTERED")

# -------------------- –°–û–°–¢–û–Ø–ù–ò–ï –û–ü–†–û–°–ê --------------------
# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø—Ä—è–º–æ –≤ user_data
QUESTIONS = [
    ("type",     "1/7: –∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)"),
    ("people",   "2/7: –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫? (—á–∏—Å–ª–æ–º)"),
    ("budget",   "3/7: –±—é–¥–∂–µ—Ç (–≤ –±–∞—Ç/–Ω–æ—á—å –∏–ª–∏ –º–µ—Å., –ª—é–±—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º)"),
    ("location", "4/7: –∫–∞–∫–æ–π —Ä–∞–π–æ–Ω –°–∞–º—É–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?"),
    ("checkin",  "5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)"),
    ("checkout", "6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)"),
    ("notes",    "7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)"),
]

START_GREETING = (
    "‚úÖ –Ø —É–∂–µ —Ç—É—Ç!\n"
    "üå¥ –ú–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ –≤–∞—à–µ–º –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂—É –∏ –ø–æ–º–æ–≥—É.\n"
    "üëâ –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rent ‚Äî —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∂–∏–ª—å–µ, "
    "—Å—Ñ–æ—Ä–º–∏—Ä—É—é –∑–∞—è–≤–∫—É, –ø—Ä–µ–¥–ª–æ–∂—É –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞–º –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."
)

def reset_flow(data: Dict[str, Any]) -> None:
    data["flow"] = None
    data["answers"] = {}
    data["q_index"] = 0

# -------------------- –•–ï–ù–î–õ–ï–†–´ --------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reset_flow(context.user_data)
    await update.message.reply_text(START_GREETING)

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reset_flow(context.user_data)
    context.user_data["flow"] = "rent"
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1.")
    await update.message.reply_text(QUESTIONS[0][1])

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (update.message.text or "").strip()

    # –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞
    if context.user_data.get("flow") == "rent":
        q_index = context.user_data.get("q_index", 0)
        key, _ = QUESTIONS[q_index]
        context.user_data.setdefault("answers", {})[key] = text

        q_index += 1
        context.user_data["q_index"] = q_index

        if q_index < len(QUESTIONS):
            await update.message.reply_text(QUESTIONS[q_index][1])
            return

        # –∞–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -> —Ñ–æ—Ä–º–∏—Ä—É–µ–º
        ans = context.user_data["answers"]
        chat = update.effective_chat
        username = (update.effective_user.username or "‚Äî")
        chat_id = chat.id

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–∏—Ñ—Ä—ã/–¥–∞—Ç—ã
        people  = parse_int(ans.get("people", ""))
        budget  = parse_int(ans.get("budget", ""))
        checkin = parse_date_human(ans.get("checkin", ""))
        checkout= parse_date_human(ans.get("checkout", ""))

        # –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
        try:
            write_lead_row([
                now_utc_str(),
                str(chat_id),
                username,
                ans.get("location", ""),
                ans.get("type", ""),
                budget if budget is not None else ans.get("budget", ""),
                people if people is not None else ans.get("people", ""),
                ans.get("notes", ""),
                checkin or ans.get("checkin", ""),
                checkout or ans.get("checkout", ""),
            ])
        except Exception as e:
            log.exception("Sheets append failed")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É (–º—ã —ç—Ç–æ —É–∂–µ –ø—Ä–∞–≤–∏–º). –ó–∞—è–≤–∫–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞.")

        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
        try:
            group_id = int(env("GROUP_CHAT_ID"))
            await context.bot.send_message(
                chat_id=group_id,
                text=(
                    "üÜï **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia**\n"
                    f"–ö–ª–∏–µ–Ω—Ç: @{username} (ID: {chat_id})\n"
                    f"–¢–∏–ø: {ans.get('type','')}\n"
                    f"–†–∞–π–æ–Ω: {ans.get('location','')}\n"
                    f"–ë—é–¥–∂–µ—Ç: {budget if budget is not None else ans.get('budget','')}\n"
                    f"–°–ø–∞–ª–µ–Ω: {people if people is not None else ans.get('people','')}\n"
                    f"Check-in: {checkin or ans.get('checkin','')}\n"
                    f"Check-out: {checkout or ans.get('checkout','')}\n"
                    f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {ans.get('notes','')}\n"
                    f"–°–æ–∑–¥–∞–Ω–æ: {now_utc_str()} UTC"
                ),
                parse_mode="Markdown"
            )
        except Exception:
            log.exception("Group notify failed")

        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text(
            "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
            f"–¢–∏–ø: {ans.get('type','')}\n"
            f"–†–∞–π–æ–Ω: {ans.get('location','')}\n"
            f"–°–ø–∞–ª–µ–Ω: {people if people is not None else ans.get('people','')}\n"
            f"–ë—é–¥–∂–µ—Ç: {budget if budget is not None else ans.get('budget','')}\n"
            f"Check-in: {checkin or ans.get('checkin','')}\n"
            f"Check-out: {checkout or ans.get('checkout','')}\n"
            f"–£—Å–ª–æ–≤–∏—è: {ans.get('notes','')}\n\n"
            "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
            "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
        )

        reset_flow(context.user_data)
        return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Üí –≤—Å–µ–≥–¥–∞ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –≤–µ–¥—ë–º –∫ /rent –∏ –¥–∞—ë–º –±–ª–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
    # (—Ç—É—Ç –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤/—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞)
    reply = (
        "–ü–æ–Ω–∏–º–∞—é. –ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ –æ—Å—Ç—Ä–æ–≤—É, —Ä–∞–π–æ–Ω–∞–º –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏. "
        "–ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –ø–æ–¥–æ–±—Ä–∞—Ç—å –∂–∏–ª—å—ë –ø–æ–¥ –≤–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å ‚Äî –∫–æ–º–∞–Ω–¥–∞ /rent.\n\n"
        + resources_block()
    )
    await update.message.reply_text(reply, parse_mode="Markdown")

# -------------------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø --------------------
def build_application() -> Application:
    token = env("TELEGRAM_TOKEN")
    app = ApplicationBuilder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("rent", cmd_rent))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    return app

def run_webhook(app: Application) -> None:
    base = env("WEBHOOK_BASE").rstrip("/")
    path = env("WEBHOOK_PATH", "/webhook")
    port = int(env("PORT", "10000"))
    public_url = f"{base}{path}"

    log.info("=> run_webhook port=%s url=%s", port, public_url)

    # –í–ê–ñ–ù–û: –¥–ª—è —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏ PTB –Ω—É–∂–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä webhook_url
    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_path=path,
        webhook_url=public_url,
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    application = build_application()
    run_webhook(application)
