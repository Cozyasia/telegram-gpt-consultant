# main.py
import os
import json
import logging
from datetime import datetime

from telegram import Update, __version__ as TG_VER
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ===================== CONFIG & LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
log = logging.getLogger("cozyasia-bot")

TELEGRAM_TOKEN   = os.environ.get("TELEGRAM_TOKEN", "").strip()
WEBHOOK_BASE     = os.environ.get("WEBHOOK_BASE", "").strip()
PORT             = int(os.environ.get("PORT", "10000"))
GROUP_CHAT_ID    = os.environ.get("GROUP_CHAT_ID", "").strip()     # –Ω–∞–ø—Ä–∏–º–µ—Ä: -490897045931 (–º–∏–Ω—É—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã)
SHEET_ID         = os.environ.get("GOOGLE_SHEET_ID", "").strip()   # id —Ç–∞–±–ª–∏—Ü—ã
GOOGLE_CREDS_RAW = os.environ.get("GOOGLE_CREDS_JSON", "").strip() # –º—É–ª—å—Ç–∏—Å—Ç—Ä–æ—á–Ω–∞—è JSON –∏–∑ Google Cloud

OPENAI_API_KEY   = os.environ.get("OPENAI_API_KEY", "").strip()    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not TELEGRAM_TOKEN:
    raise RuntimeError("ENV TELEGRAM_TOKEN is required")
if not WEBHOOK_BASE or not WEBHOOK_BASE.startswith("http"):
    raise RuntimeError("ENV WEBHOOK_BASE must be your Render URL like https://xxx.onrender.com")

# ===================== SHEETS (gspread) =====================
# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã.
_gspread = None
_worksheet = None

def _init_sheets_once():
    """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é."""
    global _gspread, _worksheet
    if _worksheet is not None:
        return

    if not SHEET_ID or not GOOGLE_CREDS_RAW:
        log.warning("Google Sheets disabled (no GOOGLE_SHEET_ID or GOOGLE_CREDS_JSON)")
        return

    try:
        import gspread
        from google.oauth2.service_account import Credentials
    except Exception as e:
        log.error("gspread not installed or google auth missing: %s", e)
        return

    try:
        sa_info = json.loads(GOOGLE_CREDS_RAW)
        scopes = [
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive",
        ]
        creds = Credentials.from_service_account_info(sa_info, scopes=scopes)
        _gspread = gspread.authorize(creds)
        sh = _gspread.open_by_key(SHEET_ID)
        try:
            _worksheet = sh.worksheet("Leads")
        except Exception:
            _worksheet = sh.sheet1  # fallback –Ω–∞ –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç "Leads"
        log.info("Google Sheets ready: %s", _worksheet.title)
    except Exception as e:
        log.error("Failed to init Google Sheets: %s", e)
        _worksheet = None

def append_lead_row(row_values: list):
    """–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)."""
    _init_sheets_once()
    if _worksheet is None:
        return False
    try:
        _worksheet.append_row(row_values, value_input_option="USER_ENTERED")
        return True
    except Exception as e:
        log.error("append_row failed: %s", e)
        return False

# ===================== STATE MACHINE /rent =====================
(
    Q_TYPE, Q_DISTRICT, Q_BUDGET, Q_BEDROOMS,
    Q_CHECKIN, Q_CHECKOUT, Q_NOTES
) = range(7)

RENT_INTRO = (
    "–ó–∞–ø—É—Å–∫–∞—é –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É. –í–æ–ø—Ä–æ—Å 1/7:\n"
    "–∫–∞–∫–æ–π —Ç–∏–ø –∂–∏–ª—å—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–¥–æ–º/–≤–∏–ª–ª–∞)\n\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —è –æ—Ç–≤–µ—á—É üôÇ"
)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?\n"
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´Cozy Asia Real Estate Bot¬ª\n\n"
        "üòä –Ø —Ç–≤–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.\n"
        "üó£Ô∏è –°–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫ –∂–µ —Å–≤–æ–±–æ–¥–Ω–æ, –∫–∞–∫ —Å —á–µ–ª–æ–≤–µ–∫–æ–º.\n\n"
        "‚ùì –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã:\n"
        "üè° –ø—Ä–æ –¥–æ–º–∞, –≤–∏–ª–ª—ã –∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –°–∞–º—É–∏\n"
        "üå¥ –ø—Ä–æ –∂–∏–∑–Ω—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, —Ä–∞–π–æ–Ω—ã, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∏ –ø–æ–≥–æ–¥—É\n"
        "ü•• –ø—Ä–æ –±—ã—Ç, –æ—Ç–¥—ã—Ö –∏ –∫—É–¥–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ\n\n"
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä –∂–∏–ª—å—è ‚Äî –Ω–∞–ø–∏—à–∏ /rent"
    )
    await update.effective_message.reply_text(text)

async def cmd_rent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text(RENT_INTRO)
    return Q_TYPE

async def q_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["type"] = update.message.text.strip()
    await update.message.reply_text("2/7: —Ä–∞–π–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–∞–º–∞–π, –ú–∞–µ–Ω–∞–º, –ß–∞–≤–µ–Ω–≥)")
    return Q_DISTRICT

async def q_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["district"] = update.message.text.strip()
    await update.message.reply_text("3/7: –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 50000)")
    return Q_BUDGET

async def q_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = ''.join(ch for ch in update.message.text if ch.isdigit()) or update.message.text.strip()
    await update.message.reply_text("4/7: —Å–∫–æ–ª—å–∫–æ —Å–ø–∞–ª–µ–Ω –Ω—É–∂–Ω–æ? (—á–∏—Å–ª–æ)")
    return Q_BEDROOMS

async def q_bedrooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["bedrooms"] = ''.join(ch for ch in update.message.text if ch.isdigit()) or update.message.text.strip()
    await update.message.reply_text("5/7: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-12-01, 01.12.2025 –∏ —Ç. –ø.)")
    return Q_CHECKIN

async def q_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkin"] = update.message.text.strip()
    await update.message.reply_text("6/7: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ (–ª—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç)")
    return Q_CHECKOUT

async def q_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["checkout"] = update.message.text.strip()
    await update.message.reply_text("7/7: –≤–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∏—Ç–æ–º—Ü—ã, –±–∞—Å—Å–µ–π–Ω, –ø–∞—Ä–∫–æ–≤–∫–∞ –∏ —Ç.–ø.)")
    return Q_NOTES

async def q_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["notes"] = update.message.text.strip()

    ud = context.user_data
    summary = (
        "üìù –ó–∞—è–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n"
        f"–¢–∏–ø: {ud.get('type','')}\n"
        f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
        f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
        f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
        f"Check-in: {ud.get('checkin','')}\n"
        f"Check-out: {ud.get('checkout','')}\n"
        f"–£—Å–ª–æ–≤–∏—è: {ud.get('notes','')}\n\n"
        "–°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –∏ –ø—Ä–∏—à–ª—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞ –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ –ø—Ä–æ —Ä–∞–π–æ–Ω—ã, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ —Ç.–¥."
    )
    await update.message.reply_text(summary)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É
    try:
        if GROUP_CHAT_ID:
            mention = (
                f"@{update.effective_user.username}"
                if update.effective_user and update.effective_user.username
                else f"ID: {update.effective_user.id if update.effective_user else '‚Äî'}"
            )
            group_text = (
                "üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ Cozy Asia\n"
                f"–ö–ª–∏–µ–Ω—Ç: {mention}\n"
                f"–¢–∏–ø: {ud.get('type','')}\n"
                f"–†–∞–π–æ–Ω: {ud.get('district','')}\n"
                f"–ë—é–¥–∂–µ—Ç: {ud.get('budget','')}\n"
                f"–°–ø–∞–ª–µ–Ω: {ud.get('bedrooms','')}\n"
                f"Check-in: {ud.get('checkin','')}\n"
                f"Check-out: {ud.get('checkout','')}\n"
                f"–£—Å–ª–æ–≤–∏—è/–ø—Ä–∏–º.: {ud.get('notes','')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC"
            )
            await context.bot.send_message(chat_id=int(GROUP_CHAT_ID), text=group_text)
    except Exception as e:
        log.error("Failed to notify group: %s", e)

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
    try:
        created = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        chat_id = update.effective_chat.id if update.effective_chat else ""
        username = update.effective_user.username if update.effective_user and update.effective_user.username else ""
        row = [
            created, str(chat_id), username,
            ud.get("district",""),
            ud.get("bedrooms",""),
            ud.get("budget",""),
            ud.get("checkin",""),
            ud.get("checkout",""),
            ud.get("type",""),
            ud.get("notes",""),
        ]
        ok = append_lead_row(row)
        if not ok:
            log.warning("Lead not saved to sheet (disabled or error).")
    except Exception as e:
        log.error("Sheet append error: %s", e)

    context.user_data.clear()
    return ConversationHandler.END

async def cmd_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.effective_message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∏–ª –∞–Ω–∫–µ—Ç—É. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å /rent –ø–æ–∑–∂–µ.")
    return ConversationHandler.END

# ===================== FREE CHAT =====================
async def free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–∞—è –±–æ–ª—Ç–∞–ª–∫–∞. –ï—Å–ª–∏ –µ—Å—Ç—å OPENAI_API_KEY ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å, –∏–Ω–∞—á–µ –¥–∞—ë–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç + –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º /rent."""
    text = update.message.text.strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –ø–∏—à–µ—Ç 'rent' ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º
    if text.lower() == "rent":
        return await cmd_rent(update, context)

    if OPENAI_API_KEY:
        try:
            # –õ—ë–≥–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI (–±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            sys_prompt = (
                "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Cozy Asia (–°–∞–º—É–∏). –í—Å–µ–≥–¥–∞ –¥—Ä—É–∂–µ–ª—é–±–µ–Ω. "
                "–ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –∫–∞—Å–∞–µ—Ç—Å—è –∞—Ä–µ–Ω–¥—ã/–ø–æ–∫—É–ø–∫–∏ –∂–∏–ª—å—è ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /rent. "
                "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–π –æ –Ω–∞—à–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö:\n"
                "- –°–∞–π—Ç: https://cozy.asia\n"
                "- –ö–∞–Ω–∞–ª: https://t.me/cozy_asia\n"
                "- –ü—Ä–∞–≤–∏–ª–∞/FAQ: https://t.me/cozy_asia_rules\n"
            )
            resp = client.chat.completions.create(
                model=os.environ.get("OPENAI_MODEL", "gpt-4o-mini"),
                messages=[
                    {"role":"system","content":sys_prompt},
                    {"role":"user","content":text},
                ],
                temperature=0.6,
            )
            answer = resp.choices[0].message.content.strip()
            if "/rent" not in answer and any(k in text.lower() for k in ["—Å–Ω—è—Ç—å", "–∞—Ä–µ–Ω–¥–∞", "–≤–∏–ª–ª–∞", "–¥–æ–º", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–∂–∏–ª—å—ë", "–∂–∏–ª—å–µ"]):
                answer += "\n\n–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–±–æ—Ä ‚Äî –Ω–∞–ø–∏—à–∏ /rent."
            await update.message.reply_text(answer)
            return
        except Exception as e:
            log.error("OpenAI error: %s", e)

    # –§–æ–ª–ª–±—ç–∫ –±–µ–∑ OpenAI
    fallback = (
        "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∂–∏–ª—å—ë–º, –∂–∏–∑–Ω—å—é –Ω–∞ –°–∞–º—É–∏, —Ä–∞–π–æ–Ω–∞–º–∏ –∏ —Ç.–¥. "
        "–ï—Å–ª–∏ –≥–æ—Ç–æ–≤(–∞) –∫ –ø–æ–¥–±–æ—Ä—É ‚Äî –Ω–∞–ø–∏—à–∏ /rent –∏ —è –∑–∞–¥–∞–º 7 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–ù–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:\n"
        "- –°–∞–π—Ç: https://cozy.asia\n"
        "- –ö–∞–Ω–∞–ª: https://t.me/cozy_asia\n"
        "- –ü—Ä–∞–≤–∏–ª–∞/FAQ: https://t.me/cozy_asia_rules"
    )
    await update.message.reply_text(fallback)

# ===================== BOOTSTRAP =====================
def build_application() -> Application:
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    rent_conv = ConversationHandler(
        entry_points=[CommandHandler("rent", cmd_rent)],
        states={
            Q_TYPE:     [MessageHandler(filters.TEXT & ~filters.COMMAND, q_type)],
            Q_DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_district)],
            Q_BUDGET:   [MessageHandler(filters.TEXT & ~filters.COMMAND, q_budget)],
            Q_BEDROOMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_bedrooms)],
            Q_CHECKIN:  [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkin)],
            Q_CHECKOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, q_checkout)],
            Q_NOTES:    [MessageHandler(filters.TEXT & ~filters.COMMAND, q_notes)],
        },
        fallbacks=[CommandHandler("cancel", cmd_cancel)],
        allow_reentry=True,
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("cancel", cmd_cancel))
    app.add_handler(rent_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, free_text))
    return app

def run_webhook(app: Application):
    # –í–ê–ñ–ù–û: url_path == —Ç–µ–º –∂–µ —Ö–≤–æ—Å—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –≤ setWebhook,
    # —á—Ç–æ–±—ã –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π web-—Å–µ—Ä–≤–µ—Ä PTB –Ω–µ –æ—Ç–≤–µ—á–∞–ª 404.
    url_path = f"webhook/{TELEGRAM_TOKEN}"
    webhook_url = f"{WEBHOOK_BASE.rstrip('/')}/{url_path}"
    log.info("==> start webhook on 0.0.0.0:%s | url=%s", PORT, webhook_url)
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=url_path,
        webhook_url=webhook_url,
        drop_pending_updates=True,
    )

def main():
    app = build_application()
    run_webhook(app)

if __name__ == "__main__":
    main()
